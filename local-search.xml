<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【题解】SP15577 STC10</title>
    <link href="/2022/04/10/SP15577%20STC10/"/>
    <url>/2022/04/10/SP15577%20STC10/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/SP15577">题目传送门</a></p><h2 id="前言">前言</h2><p>这是一道双连通分量的<del>板子</del>题</p><h3 id="前置芝士">前置芝士</h3><p>双连通分量，割点</p><h2 id="分析">分析</h2><p>看到题目中<strong>封锁一个点</strong>的说法，我们很容易想到无向图中割点的概念，所以我们对每一个点进行分类讨论</p><ol type="1"><li>如果这个点不是割点，那么这个点被封锁后其他点依旧可以互相到达，只是到达不了这个被封锁的点，所以我们不能互相到达的点对数量就为<span class="math inline">\(2(n - 1)\)</span>(注意题目中求的是有序点对)。</li><li>如果这个点是割点，那么这个点被封锁之后我们的图后被分为若干个连通块，我们设节点<span class="math inline">\(i\)</span> 的子节点中点集 <spanclass="math inline">\(V\)</span> 满足 <span class="math inline">\(dfn[i]&lt;= low[v \in V]\)</span> 也就是这些子节点可以判定 <spanclass="math inline">\(i\)</span> 为割点。我们设 <spanclass="math inline">\(size[i]\)</span> 表示以 <spanclass="math inline">\(i\)</span>为根的子树的大小，那我们的方案数就可以用以下式子表示</li></ol><p><span class="math display">\[\sum_{v\in V}size[v] \times (n - size[v]) +\left(\sum_{v \in V}size[v] +1\right) \times \left( n - 1-\sum_{v\in V}size[v]\right) + (n - 1)\]</span></p><p>(建议没看懂这个式子的朋友自行画图思考)</p><p>我们发现我们可以在 dfs 的过程中记录一下 <spanclass="math inline">\(\sum_{v\in V}size[v]\)</span>,来方便我们的计算</p><h2 id="代码">代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> h[N], e[M], ne[M], idx;<br><span class="hljs-type">int</span> dfn[N], low[N], cut[N], sz[N];<br><span class="hljs-type">int</span> t;<br>ll res[N];<br><span class="hljs-type">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    e[idx] = b;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> </span>&#123;<br>    dfn[u] = low[u] = ++t;<br>    sz[u] = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>, sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (!dfn[v])<br>        &#123;<br>            <span class="hljs-built_in">tarjan</span>(v);<br>            sz[u] += sz[v]; <span class="hljs-comment">// 累加子树大小</span><br>            low[u] = <span class="hljs-built_in">min</span>(low[u], low[v]);<br>            <span class="hljs-keyword">if</span> (dfn[u] &lt;= low[v])<br>            &#123;<br>                res[u] += (ll)sz[v] * (n - sz[v]);<br>                sum += sz[v]; <span class="hljs-comment">// 记录子节点子树大小之和</span><br>                cnt++;<br>                <span class="hljs-keyword">if</span> (u != <span class="hljs-number">1</span> || cnt &gt; <span class="hljs-number">1</span>)<br>                    cut[u] = <span class="hljs-literal">true</span>; <br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            low[u] = <span class="hljs-built_in">min</span>(low[u], dfn[v]);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!cut[u]) res[u] = (n - <span class="hljs-number">1</span>) * <span class="hljs-number">2</span>; <span class="hljs-comment">// 非割点情况</span><br>    <span class="hljs-keyword">else</span> res[u] += (ll)(n - sum - <span class="hljs-number">1</span>) * (sum + <span class="hljs-number">1</span>) + (n - <span class="hljs-number">1</span>); <span class="hljs-comment">// 前半部分答案已经在dfs过程中记录完成</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>        <span class="hljs-built_in">add</span>(a, b);<br>        <span class="hljs-built_in">add</span>(b, a);<br>    &#125;<br>    <span class="hljs-built_in">tarjan</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, res[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>图论</tag>
      
      <tag>tarjan</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】SP16185 BUSINESS</title>
    <link href="/2022/04/09/SP16185%20BUSINESS/"/>
    <url>/2022/04/09/SP16185%20BUSINESS/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/SP16185">题目传送门</a></p><h2 id="前言">前言</h2><p>这道题是一道双连通分量的<del>板子</del>题</p><h3 id="前置芝士">前置芝士</h3><p>双连通分量, v-DCC</p><h2 id="分析">分析</h2><p>看到这个题目我们很容易想到用 tarjan 算法把这个无向图里的所有割点和v-DCC 求出来，然后我们来对每个 v-DCC中割点的数量进行分类讨论，我们设这个 v-DCC 中点的个数为 <spanclass="math inline">\(x\)</span> ，割点的个数为 <spanclass="math inline">\(y\)</span>。</p><ol type="1"><li>如果 <span class="math inline">\(y = 0\)</span> ，也就是说明这个v-DCC是一个单独的连通块，那么我们就至少要在这里面放两个太平井(只放一个如果太平井塌了就跑不掉)，这个v-DCC 的方案数就为 <span class="math inline">\(C_x^2=\frac{x(x -1)}{2}\)</span> 。但是有一种特殊情况，就是这个v-DCC中只有一个点，那么我们就只要装一个太平井，方案数为 <spanclass="math inline">\(1\)</span> (虽然这种情况在本题不可能出现)。</li><li>如果 <span class="math inline">\(y = 1\)</span> ，那么说明这个 v-DCC有和其他的 v-DCC相连，我们就只需要这里面<strong>非割点</strong>的地方任意安装一个太平井，来保证在某个节点坍塌之后，要么可以去到该v-DCC 中的太平井，要么可以跑到别的 v-DCC ,这个 v-DCC的方案数就为 <spanclass="math inline">\(x - 1\)</span>。</li><li>如果 <span class="math inline">\(y &gt; 1\)</span>，那么这个 v-DCC中的所有点在某个点坍塌后一定可以跑去别的 v-DCC ,我们就不用在这里安装额外的太平井</li></ol><p>那我们的答案也就呼之欲出了： 太平井的数量就是所有 v-DCC中安装的太平井的数量之和，方案数就是每个 v-DCC 中节点方案数的乘积</p><h2 id="代码">代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e4</span> + <span class="hljs-number">10</span>, M = N &lt;&lt; <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> h[N], e[M], ne[M], idx;<br><span class="hljs-type">int</span> dfn[N], low[N], stk[N], cut[N];<br><span class="hljs-type">int</span> t, cnt, tt;<br>vector&lt;<span class="hljs-type">int</span>&gt; dcc[N]; <br><span class="hljs-type">int</span> root;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> <span class="hljs-comment">// tarjan求割点和 v-DCC 的板子</span></span><br><span class="hljs-function"></span>&#123;<br>    dfn[u] = low[u] = ++t;<br>    stk[++tt] = u;<br>    <span class="hljs-keyword">if</span> (h[u] == <span class="hljs-number">-1</span>)<br>    &#123;<br>        dcc[++cnt].<span class="hljs-built_in">push_back</span>(u);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> kid = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (!dfn[v])<br>        &#123;<br>            <span class="hljs-built_in">tarjan</span>(v);<br>            low[u] = <span class="hljs-built_in">min</span>(low[u], low[v]);<br>            <span class="hljs-keyword">if</span> (dfn[u] &lt;= low[v])<br>            &#123;<br>                <span class="hljs-keyword">if</span> (u != root || ++kid &gt; <span class="hljs-number">1</span>) cut[u] = <span class="hljs-literal">true</span>;<br>                cnt++;<br>                <span class="hljs-type">int</span> j;<br>                <span class="hljs-keyword">do</span> &#123;<br>                    j = stk[tt--];<br>                    dcc[cnt].<span class="hljs-built_in">push_back</span>(j);<br>                &#125; <span class="hljs-keyword">while</span> (v != j);<br>                dcc[cnt].<span class="hljs-built_in">push_back</span>(u);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            low[u] = <span class="hljs-built_in">min</span>(low[u], dfn[v]);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-type">int</span> tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <span class="hljs-keyword">while</span> (m)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case %d: &quot;</span>, ++tot);<br>        <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>        <span class="hljs-built_in">memset</span>(dfn, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> dfn);<br>        <span class="hljs-built_in">memset</span>(cut, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> cut);<br>        idx = cnt = t = tt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (m--)<br>        &#123;<br>            <span class="hljs-type">int</span> a, b;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>            n = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">max</span>(a, b), n); <br>            <span class="hljs-built_in">add</span>(a, b);<br>            <span class="hljs-built_in">add</span>(b, a);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            dcc[i].<span class="hljs-built_in">clear</span>();<br>        <span class="hljs-keyword">for</span> (root = <span class="hljs-number">1</span>; root &lt;= n; root++)<br>            <span class="hljs-keyword">if</span> (!dfn[root])<br>                <span class="hljs-built_in">tarjan</span>(root); <span class="hljs-comment">// 如果这个节点没被搜过，那么就以这个节点为根开始搜索</span><br>        ll res1 = <span class="hljs-number">0</span>, res2 = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> cnt_cut = <span class="hljs-number">0</span>; <span class="hljs-comment">// 统计当前 v-DCC 中割点的数量</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; dcc[i].<span class="hljs-built_in">size</span>(); j++)<br>                cnt_cut += cut[dcc[i][j]];<br>            <span class="hljs-keyword">if</span> (!cnt_cut)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (dcc[i].<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span>) res1 += <span class="hljs-number">2</span>, res2 *= (ll)dcc[i].<span class="hljs-built_in">size</span>() * (dcc[i].<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">else</span> res1++; <span class="hljs-comment">// 特殊情况(在本题不可能出现)</span><br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cnt_cut == <span class="hljs-number">1</span>)<br>                res1++, res2 *= (ll)dcc[i].<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %lld\n&quot;</span>, res1, res2);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>图论</tag>
      
      <tag>tarjan</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】P2122还教室</title>
    <link href="/2022/04/08/P2122%E8%BF%98%E6%95%99%E5%AE%A4/"/>
    <url>/2022/04/08/P2122%E8%BF%98%E6%95%99%E5%AE%A4/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2122">题目传送门</a></p><p>题目大意:给定一个序列，支持区间加法，查询平均数和方差。</p><p>区间问题，最喜欢用线段树来解决。</p><p>首先我们由查询平均数知道肯定要维护区间和，但是我们还要支持查询方差，所以我们还需要维护一些其它的东西，把方差公式展开得到(<span class="math inline">\(A_i\)</span> 表示序列第 <spanclass="math inline">\(i\)</span> 项，<spanclass="math inline">\(\overline A\)</span> 表示序列 <spanclass="math inline">\(A\)</span> 的平均数)。</p><p><span class="math display">\[s^2=\frac{1}{n}\sum_{i=1}^n(A_i-\overline A)^2\]</span></p><p><span class="math display">\[s^2=\frac{1}{n}(A_1^2-2A_1\overline A+\overline A^2+A_2^2-2A_2\overlineA+\overline A^2+\cdots+A_n^2-2A_n\overline A+\overline A^2)\]</span></p><p><span class="math display">\[s^2=\frac{\sum_{i=1}^nA_i^2}{n}-\frac{2\overlineA\sum_{i=1}^{n}A_i-n\overline A^2}{n}\]</span></p><p><span class="math display">\[s^2=\frac{\sum_{i=1}^nA_i^2}{n}-2\overline A\frac{\sum_{i=1}^{n}A_i}{n}+ \overline A^2\]</span></p><p><span class="math display">\[s^2=\frac{\sum_{i=1}^nA_i^2}{n}-2\overline A^2+\overline A^2\]</span></p><p><span class="math display">\[s^2=\frac{\sum_{i=1}^nA_i^2}{n}-\overline A^2\]</span></p><p>所以我们不难看出，我们要维护一个区间的和与平方和，那我们在区间加之后修改区间的平方和数据呢？</p><p>假设我们这次把区间内的每个数加上 <spanclass="math inline">\(k\)</span> ，那么我们可以得到。 <spanclass="math display">\[\sum_{i=1}^{n}(A_i+k)^2=\sum_{i=1}^{n}A_i^2+2k\sum_{i=1}^{n}A_i+nk^2\]</span>所以我们就可已用上一轮的平方和与区间和数据来更新被修改后的区间平方和，这个式子也告诉我们在修改时，要先修改平方和，再修改区间和。</p><p>但是这道题题目让我们输出的是最简分数的形式，所以我们还需要对平均数式子和方差式子进行进一步简化。</p><p>设当前区间和为 <span class="math inline">\(sum\)</span>，区间平方和为 <span class="math inline">\(square\)</span> ，区间长度为<span class="math inline">\(n\)</span></p><p>那么我们就可以把平均数式子写成这样： <span class="math display">\[\frac{sum}{n}\]</span>所以我们就可以通过约去上下两式的最大公因式来得到它的最简形式。</p><p>再来看方差 <span class="math display">\[\frac{square}{n}-(\frac{sum}{n})^2\]</span> 化简得到 <span class="math display">\[\frac{n\cdot square - sum^2}{n^2}\]</span> 也是通过约去上下的最简公分母来得到最简形式。</p><p>于是我们就做完了这道蓝题。</p><h2 id="代码">代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> l, r;<br>    ll sum, square, add;<br>&#125; t[N &lt;&lt; <span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a, ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> b ? <span class="hljs-built_in">gcd</span>(b, a % b) : a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].sum = t[p &lt;&lt; <span class="hljs-number">1</span>].sum + t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum;<br>    t[p].square = t[p &lt;&lt; <span class="hljs-number">1</span>].square + t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].square;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    node &amp;u = t[p], &amp;l = t[p &lt;&lt; <span class="hljs-number">1</span>], &amp;r = t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>];<br><br>    <span class="hljs-keyword">if</span> (!u.add) <span class="hljs-keyword">return</span>;<br><br>    l.add += u.add;<br>    r.add += u.add;<br><br>    l.square += <span class="hljs-number">2</span> * u.add * l.sum + (l.r - l.l + <span class="hljs-number">1</span>) * u.add * u.add; <span class="hljs-comment">// 平方和式子</span><br>    r.square += <span class="hljs-number">2</span> * u.add * r.sum + (r.r - r.l + <span class="hljs-number">1</span>) * u.add * u.add;<br>    <br>    l.sum += (l.r - l.l + <span class="hljs-number">1</span>) * u.add;<br>    r.sum += (r.r - r.l + <span class="hljs-number">1</span>) * u.add;<br>    <br>    u.add = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].l = l, t[p].r = r;<br>    <span class="hljs-keyword">if</span> (l == r)<br>    &#123;<br>        t[p].sum = a[l];<br>        t[p].square = a[l] * a[l];<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> d)</span> <span class="hljs-comment">// 区间修改，线段树板子</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= t[p].l &amp;&amp; t[p].r &lt;= r)<br>    &#123;<br>        t[p].add += d;<br>        t[p].square += <span class="hljs-number">2</span> * d * t[p].sum + (t[p].r - t[p].l + <span class="hljs-number">1</span>) * d * d; <span class="hljs-comment">// 推平方和的式子</span><br>        t[p].sum += d * (t[p].r - t[p].l + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= mid) <span class="hljs-built_in">modify</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r, d);<br>    <span class="hljs-keyword">if</span> (r &gt; mid) <span class="hljs-built_in">modify</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r, d);<br>    <span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">get_sum</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> <span class="hljs-comment">// 查询区间和</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= t[p].l &amp;&amp; t[p].r &lt;= r) <span class="hljs-keyword">return</span> t[p].sum;<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    ll res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= mid) res += <span class="hljs-built_in">get_sum</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">if</span> (r &gt; mid) res += <span class="hljs-built_in">get_sum</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">get_square</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> <span class="hljs-comment">// 查询区间平方和</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= t[p].l &amp;&amp; t[p].r &lt;= r) <span class="hljs-keyword">return</span> t[p].square;<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    ll res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= mid) res += <span class="hljs-built_in">get_square</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">if</span> (r &gt; mid) res += <span class="hljs-built_in">get_square</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n); <span class="hljs-comment">// 建树</span><br>    <span class="hljs-keyword">while</span> (m--)<br>    &#123;<br>        <span class="hljs-type">int</span> opt, l, r;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;opt, &amp;l, &amp;r);<br>        <span class="hljs-keyword">if</span> (opt == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> d;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;d);<br>            <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, l, r, d); <span class="hljs-comment">// 区间加</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (opt == <span class="hljs-number">2</span>)<br>        &#123;<br>            ll sum = <span class="hljs-built_in">get_sum</span>(<span class="hljs-number">1</span>, l, r), length = r - l + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (sum == <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0/1&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            ll d = <span class="hljs-built_in">gcd</span>(sum, length);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld/%lld\n&quot;</span>, sum / d, length / d);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (opt == <span class="hljs-number">3</span>)<br>        &#123;<br>            ll sum = <span class="hljs-built_in">get_sum</span>(<span class="hljs-number">1</span>, l, r), square = <span class="hljs-built_in">get_square</span>(<span class="hljs-number">1</span>, l, r), length = r - l + <span class="hljs-number">1</span>;<br>            ll tmp = length * square - sum * sum; length *= length; <span class="hljs-comment">// 方差式子中的分母</span><br>            <span class="hljs-keyword">if</span> (tmp == <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0/1&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            ll d = <span class="hljs-built_in">gcd</span>(tmp, length);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld/%lld\n&quot;</span>, tmp / d, length / d);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>线段树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】CF1055A Metro</title>
    <link href="/2022/04/03/CF1055A%20Metro/"/>
    <url>/2022/04/03/CF1055A%20Metro/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF1055A">题目传送门</a></p><h2 id="前言">前言</h2><p>看到这题是个蓝题还以为要写最短路，做完以后感觉这题<del>最多是个黄</del>。</p><h2 id="分析">分析</h2><p>我们用序列 <span class="math inline">\(A\)</span> 记录 <spanclass="math inline">\(1-n\)</span> 中站点的开放情况，用序列 <spanclass="math inline">\(B\)</span> 记录 <span class="math inline">\(n -1\)</span> 中站点开放的情况。</p><p>这题其实就是一个分类讨论的题目，我们来思考一下什么情况能到，什么情况到不了。</p><ol type="1"><li>当 <span class="math inline">\(A[1] ==0\)</span>，也就是连车都上不了，肯定到不了。</li><li>当 <spanclass="math inline">\(A[1]\&amp;\&amp;A[s]\)</span>，这个时候我们可以通过<span class="math inline">\(1-n\)</span>的路线直达目的地，所以可以到达。</li><li>当 <span class="math inline">\(1\)</span>, <spanclass="math inline">\(2\)</span> 两种情况均不满足，我们考虑从 <spanclass="math inline">\(s + 1 - n\)</span>这一段路线中转，我们可以枚举这一段路径上的所有站点，如果存在一个站点<span class="math inline">\(i\)</span> 使得 <spanclass="math inline">\(A[i]\&amp;\&amp;B[i]\&amp;\&amp;B[s]\)</span>，这个时候我们就可以从 <span class="math inline">\(1\)</span> 坐到 <spanclass="math inline">\(i\)</span> ，再从 <spanclass="math inline">\(i\)</span> 坐到 <spanclass="math inline">\(s\)</span>，我们就可以到达了，反之如果不存在这样的站点，那我们就到达不了。</li></ol><p>所以，我们就可以根据这些结论写出极短的代码了。</p><h2 id="代码">代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> a[N], b[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, s;<br>    cin &gt;&gt; n &gt;&gt; s;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; a[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; b[i];<br>    <span class="hljs-keyword">if</span> (!a[<span class="hljs-number">1</span>]) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[s]) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YES&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = s + <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            <span class="hljs-keyword">if</span> (a[i] &amp;&amp; b[i] &amp;&amp; b[s])<br>                &#123;<br>                    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YES&quot;</span>);<br>                    flag = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>        <span class="hljs-keyword">if</span> (!flag) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>模拟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】SP2885 WORDRING</title>
    <link href="/2022/03/24/SP2885%20WORDRING/"/>
    <url>/2022/03/24/SP2885%20WORDRING/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/SP2885">题目传送门</a></p><h2 id="建图">1.建图</h2><p>看完这个题目的第一时间就想到了一个建图方式：将每个字符串看成一个点，如果字符串<span class="math inline">\(A\)</span> 与 <spanclass="math inline">\(B\)</span> 相连，那么就连一条从 <spanclass="math inline">\(A\)</span> 到 <spanclass="math inline">\(B\)</span> 长度为 <spanclass="math inline">\(A.length()\)</span>的有向边，但是仔细一想，在最坏情况下，我们的图中会有 <spanclass="math inline">\(10^5\)</span> 个点，<spanclass="math inline">\(10^{10}\)</span>条边，这显然是我们不能接受的。</p><p>但是我们观察到每个字符串中其实只有前两个字符和后两个字符是有用的，所以我们可以只取每个字符串的前两个字符和后两个字符，在它们之间连一条长度为这个字符串长度的有向边，这样做其实是和第一种建图方式等价的，但是我们最多只要<span class="math inline">\(26 \times 26 = 676\)</span> 个点，<spanclass="math inline">\(10^5\)</span>条边，这样的时空复杂度是我们能够接受的。</p><p>样例建的图如下:</p><p><img src="https://s2.loli.net/2022/03/24/wBClfXQpRvWLt3y.png" /></p><p>这样建完图以后，我们还可以使用类似<strong>字符串哈希</strong>的做法，把字符串映射为<span class="math inline">\(1 \sim 676\)</span> 中的数字，方便建图。</p><h2 id="求解">2.求解</h2><p>建完图以后，我们的目标就变成了找到一个环，使得 <spanclass="math inline">\(\frac{\sum w}{s}\)</span> 最大（<spanclass="math inline">\(w\)</span> 指的是边权，<spanclass="math inline">\(s\)</span> 为边数）</p><p>看到这个式子，首先想到的就是 <span class="math inline">\(0/1\)</span>分数规划二分答案的思想（显然有单调性）</p><p>考虑一个数 <span class="math inline">\(x\)</span>，使得 <spanclass="math inline">\(\frac{\sum w}{s} &gt;x\)</span>，将这个式子变形得到 <span class="math inline">\(\sum w - s\cdot x &gt; 0\)</span>，所以，我们可以将原图中每一条边的边权设为 <spanclass="math inline">\(w - x\)</span>（<spanclass="math inline">\(w\)</span>表示该边边权），那么就可以将问题转化为原图中是否存在正环，我们可以用 dfs版的 SPFA 求最长路解决这个问题。</p><h2 id="代码">3.代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">676</span>, M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>, L = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> h[N], e[M], ne[M], w[M], idx; <span class="hljs-comment">// 邻接表存图</span><br><span class="hljs-type">char</span> s[L];<br><span class="hljs-type">bool</span> flag;<br><span class="hljs-type">double</span> d[N];<br><span class="hljs-type">bool</span> vis[N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">double</span> x)</span> <span class="hljs-comment">// dfs版spfa</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (flag) <span class="hljs-keyword">return</span>;<br>    vis[u] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (d[v] &lt; d[u] + w[i] - x) <span class="hljs-comment">// 将边权变为 w[i] - x, 注意判断正环是求最长路</span><br>        &#123;<br>            d[v] = d[u] + w[i] - x;<br>            <span class="hljs-keyword">if</span> (vis[v]) flag = <span class="hljs-literal">true</span>;<br>            <span class="hljs-built_in">spfa</span>(v, x);<br>        &#125;<br>    &#125;<br>    vis[u] = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b;<br>    w[idx] = c;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> d);<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= N; i++)<br>    &#123;<br>        <span class="hljs-built_in">spfa</span>(i, x); <span class="hljs-comment">// 注意图不一定联通，要每个点都dfs一次</span><br>        <span class="hljs-keyword">if</span> (flag) <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 找到正环，退出</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">while</span> (n)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>        idx = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>            <span class="hljs-type">int</span> l = <span class="hljs-built_in">strlen</span>(s);<br>            <span class="hljs-keyword">if</span> (l &gt;= <span class="hljs-number">2</span>)<br>            &#123;<br>                <span class="hljs-type">int</span> u = (s[<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;a&#x27;</span>) * <span class="hljs-number">26</span> + (s[<span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;a&#x27;</span>); <br>                <span class="hljs-type">int</span> v = (s[l - <span class="hljs-number">2</span>] - <span class="hljs-string">&#x27;a&#x27;</span>) * <span class="hljs-number">26</span> + (s[l - <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">// 将字符串映射为数字</span><br>                <span class="hljs-built_in">add</span>(u, v, l); <span class="hljs-comment">// 连一条有向边</span><br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-type">double</span> l = <span class="hljs-number">0</span>, r = L;<br>        <span class="hljs-keyword">while</span> (r - l &gt; <span class="hljs-number">1e-4</span>) <span class="hljs-comment">// 精度要求,保留k位小数时就是 (r - l &gt; 1e-(2+k))</span><br>        &#123;<br>            <span class="hljs-type">double</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>            <span class="hljs-built_in">check</span>(mid);  <span class="hljs-comment">// 判断是否存在正环</span><br>            <span class="hljs-keyword">if</span> (flag) l = mid; <span class="hljs-comment">// 如果存在正环，说明mid比要求的最大值小，就l=mid</span><br>            <span class="hljs-keyword">else</span> r = mid; <span class="hljs-comment">// 不存在正环，说明mid比要求的最大值大，就r=mid</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (l) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lf\n&quot;</span>, l);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No solution.&quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>图论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】P4011孤岛营救问题</title>
    <link href="/2022/03/21/P4011%E5%AD%A4%E5%B2%9B%E8%90%A5%E6%95%91%E9%97%AE%E9%A2%98/"/>
    <url>/2022/03/21/P4011%E5%AD%A4%E5%B2%9B%E8%90%A5%E6%95%91%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4011">题目传送门</a></p><p>注意到数据范围<span class="math inline">\(1\le P\le10\)</span>,很容易想到二进制状压(<del>一开始做题以为钥匙是一次性的，没想到状压</del>)</p><p>所以我们可以自然而然地想到设<spanclass="math inline">\(d[i][state]\)</span>表示走到点<spanclass="math inline">\(i\)</span>且钥匙状态为<spanclass="math inline">\(state\)</span>的最短步数(我把二维点压成了一维，代码中会有体现)，分类讨论一下如何转移<spanclass="math inline">\(d[i][state]\)</span>这个状态</p><p>1.如果点<spanclass="math inline">\(i\)</span>处有若干把钥匙，那么我们的最优方案就是将这些钥匙捡起(捡钥匙不占用时间)，所以此时的状态为<spanclass="math inline">\(d[i][state | key[i]]\)</span>(<spanclass="math inline">\(key[i]\)</span>表示点<spanclass="math inline">\(i\)</span>处钥匙的状态)，而且我们还可以得出转移式子</p><p><span class="math inline">\(d[i][state|key[i]] =min(d[i][state|key[i]], d[i][state])\)</span></p><p>2.如果我们从点<span class="math inline">\(i\)</span>处走到点<spanclass="math inline">\(j\)</span>处而且手上恰好有能开门的钥匙(或没有门)，那我们就可以得到转移式子</p><p><span class="math inline">\(d[j][state] = min(d[j][state],d[i][state] +1)\)</span></p><p>我们发现第一种情况的边权为<spanclass="math inline">\(0\)</span>，第二种情况的边权为<spanclass="math inline">\(1\)</span>，所以我们可以想到用双端队列<spanclass="math inline">\(bfs\)</span>的方法去求最短路，具体细节见代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pii pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>, P = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">12</span>;<br>vector&lt;<span class="hljs-type">int</span>&gt; G[N], E[N];<br><span class="hljs-type">int</span> d[N][P];<br><span class="hljs-type">int</span> g[<span class="hljs-number">11</span>][<span class="hljs-number">11</span>];<br><span class="hljs-type">int</span> key[N];<br><span class="hljs-type">int</span> n, m, p, k, s;<br><span class="hljs-type">bool</span> vis[N][P];<br>set&lt;pii&gt; edge;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    G[a].<span class="hljs-built_in">push_back</span>(b);<br>    E[a].<span class="hljs-built_in">push_back</span>(c);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;, dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k++) <span class="hljs-comment">// 遍历从(i, j)可以走到的边</span><br>            &#123;<br>                <span class="hljs-type">int</span> u = i + dx[k], v = j + dy[k];<br>                <span class="hljs-keyword">if</span> (!u || u &gt; n || !v || v &gt; m) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span> (!edge.<span class="hljs-built_in">count</span>(&#123;g[i][j], g[u][v]&#125;)) <span class="hljs-comment">// 如果还没建过边，那就建</span><br>                    <span class="hljs-built_in">add</span>(g[i][j], g[u][v], <span class="hljs-number">0</span>), <span class="hljs-built_in">add</span>(g[u][v], g[i][j], <span class="hljs-number">0</span>);<br>            &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> d);<br>    d[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">// 起始状态在1号点，手上没有钥匙</span><br>    deque&lt;pii&gt; q;<br>    q.<span class="hljs-built_in">push_front</span>(&#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;);<br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        pii t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop_front</span>();<br>        <span class="hljs-type">int</span> u = t.first, st = t.second;<br>        <span class="hljs-keyword">if</span> (u == n * m) <span class="hljs-keyword">return</span> d[u][st]; <span class="hljs-comment">// 如果搜到答案立刻返回</span><br>        <span class="hljs-keyword">if</span> (vis[u][st]) <span class="hljs-keyword">continue</span>;<br>        vis[u][st] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (key[u]) <span class="hljs-comment">// 如果点u中有钥匙</span><br>        &#123;<br>            <span class="hljs-type">int</span> state = st | key[u];<br>            <span class="hljs-keyword">if</span> (d[u][state] &gt; d[u][st])<br>            &#123;<br>                d[u][state] = d[u][st]; <span class="hljs-comment">// 第一个转移式子</span><br>                q.<span class="hljs-built_in">push_front</span>(&#123;u, state&#125;); <span class="hljs-comment">// 边权为0，插入队头</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; G[u].<span class="hljs-built_in">size</span>(); i++) <span class="hljs-comment">// 遍历周围的点</span><br>        &#123;<br>            <span class="hljs-type">int</span> v = G[u][i], w = E[u][i];<br>            <span class="hljs-keyword">if</span> (w &amp;&amp; !(st &gt;&gt; w &amp; <span class="hljs-number">1</span>)) <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// 如果有门但是没钥匙就跳过</span><br>            <span class="hljs-keyword">if</span> (d[v][st] &gt; d[u][st] + <span class="hljs-number">1</span>)<br>            &#123;<br>                d[v][st] = d[u][st] + <span class="hljs-number">1</span>; <span class="hljs-comment">// 第二个转移式子</span><br>                q.<span class="hljs-built_in">push_back</span>(&#123;v, st&#125;); <span class="hljs-comment">// 边权为1，插入队尾</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>(), p = <span class="hljs-built_in">read</span>(), k = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, idx = <span class="hljs-number">0</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>            g[i][j] = ++idx; <span class="hljs-comment">// 将二维坐标映射为一维</span><br><br>    <span class="hljs-keyword">while</span> (k--)<br>    &#123;<br>        <span class="hljs-type">int</span> x1 = <span class="hljs-built_in">read</span>(), y1 = <span class="hljs-built_in">read</span>(), x2 = <span class="hljs-built_in">read</span>(), y2 = <span class="hljs-built_in">read</span>(), c = <span class="hljs-built_in">read</span>();<br>        edge.<span class="hljs-built_in">insert</span>(&#123;g[x1][y1], g[x2][y2]&#125;), edge.<span class="hljs-built_in">insert</span>(&#123;g[x2][y2], g[x1][y1]&#125;); <span class="hljs-comment">// 在集合中保存已建的边</span><br>        <span class="hljs-keyword">if</span> (c) <span class="hljs-built_in">add</span>(g[x1][y1], g[x2][y2], c), <span class="hljs-built_in">add</span>(g[x2][y2], g[x1][y1], c); <span class="hljs-comment">// 两个点之间建双向边</span><br>    &#125;<br>    <br>    <span class="hljs-built_in">build</span>();<br>    s = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">while</span> (s--)<br>    &#123;<br>        <span class="hljs-type">int</span> x = <span class="hljs-built_in">read</span>(), y = <span class="hljs-built_in">read</span>(), q = <span class="hljs-built_in">read</span>();<br>        key[g[x][y]] |= <span class="hljs-number">1</span> &lt;&lt; q; <span class="hljs-comment">// 一个点可能有多把钥匙</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">bfs</span>());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>图论</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
