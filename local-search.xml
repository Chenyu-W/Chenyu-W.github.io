<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【题解】CF1055A Metro</title>
    <link href="/2022/04/03/CF1055A%20Metro/"/>
    <url>/2022/04/03/CF1055A%20Metro/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF1055A">题目传送门</a></p><h2 id="前言">前言</h2><p>看到这题是个蓝题还以为要写最短路，做完以后感觉这题<del>最多是个黄</del>。</p><h2 id="分析">分析</h2><p>我们用序列 <span class="math inline">\(A\)</span> 记录 <spanclass="math inline">\(1-n\)</span> 中站点的开放情况，用序列 <spanclass="math inline">\(B\)</span> 记录 <span class="math inline">\(n -1\)</span> 中站点开放的情况。</p><p>这题其实就是一个分类讨论的题目，我们来思考一下什么情况能到，什么情况到不了。</p><ol type="1"><li>当 <span class="math inline">\(A[1] ==0\)</span>，也就是连车都上不了，肯定到不了。</li><li>当 <spanclass="math inline">\(A[1]\&amp;\&amp;A[s]\)</span>，这个时候我们可以通过<span class="math inline">\(1-n\)</span>的路线直达目的地，所以可以到达。</li><li>当 <span class="math inline">\(1\)</span>, <spanclass="math inline">\(2\)</span> 两种情况均不满足，我们考虑从 <spanclass="math inline">\(s + 1 - n\)</span>这一段路线中转，我们可以枚举这一段路径上的所有站点，如果存在一个站点<span class="math inline">\(i\)</span> 使得 <spanclass="math inline">\(A[i]\&amp;\&amp;B[i]\&amp;\&amp;B[s]\)</span>，这个时候我们就可以从 <span class="math inline">\(1\)</span> 坐到 <spanclass="math inline">\(i\)</span> ，再从 <spanclass="math inline">\(i\)</span> 坐到 <spanclass="math inline">\(s\)</span>，我们就可以到达了，反之如果不存在这样的站点，那我们就到达不了。</li></ol><p>所以，我们就可以根据这些结论写出极短的代码了。</p><h2 id="代码">代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> a[N], b[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, s;<br>    cin &gt;&gt; n &gt;&gt; s;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; a[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; b[i];<br>    <span class="hljs-keyword">if</span> (!a[<span class="hljs-number">1</span>]) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[s]) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YES&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = s + <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            <span class="hljs-keyword">if</span> (a[i] &amp;&amp; b[i] &amp;&amp; b[s])<br>                &#123;<br>                    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YES&quot;</span>);<br>                    flag = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>        <span class="hljs-keyword">if</span> (!flag) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>模拟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】SP2885 WORDRING</title>
    <link href="/2022/03/24/SP2885%20WORDRING/"/>
    <url>/2022/03/24/SP2885%20WORDRING/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/SP2885">题目传送门</a></p><h2 id="建图">1.建图</h2><p>看完这个题目的第一时间就想到了一个建图方式：将每个字符串看成一个点，如果字符串<span class="math inline">\(A\)</span> 与 <spanclass="math inline">\(B\)</span> 相连，那么就连一条从 <spanclass="math inline">\(A\)</span> 到 <spanclass="math inline">\(B\)</span> 长度为 <spanclass="math inline">\(A.length()\)</span>的有向边，但是仔细一想，在最坏情况下，我们的图中会有 <spanclass="math inline">\(10^5\)</span> 个点，<spanclass="math inline">\(10^{10}\)</span>条边，这显然是我们不能接受的。</p><p>但是我们观察到每个字符串中其实只有前两个字符和后两个字符是有用的，所以我们可以只取每个字符串的前两个字符和后两个字符，在它们之间连一条长度为这个字符串长度的有向边，这样做其实是和第一种建图方式等价的，但是我们最多只要<span class="math inline">\(26 \times 26 = 676\)</span> 个点，<spanclass="math inline">\(10^5\)</span>条边，这样的时空复杂度是我们能够接受的。</p><p>样例建的图如下:</p><p><img src="https://s2.loli.net/2022/03/24/wBClfXQpRvWLt3y.png" /></p><p>这样建完图以后，我们还可以使用类似<strong>字符串哈希</strong>的做法，把字符串映射为<span class="math inline">\(1 \sim 676\)</span> 中的数字，方便建图。</p><h2 id="求解">2.求解</h2><p>建完图以后，我们的目标就变成了找到一个环，使得 <spanclass="math inline">\(\frac{\sum w}{s}\)</span> 最大（<spanclass="math inline">\(w\)</span> 指的是边权，<spanclass="math inline">\(s\)</span> 为边数）</p><p>看到这个式子，首先想到的就是 <span class="math inline">\(0/1\)</span>分数规划二分答案的思想（显然有单调性）</p><p>考虑一个数 <span class="math inline">\(x\)</span>，使得 <spanclass="math inline">\(\frac{\sum w}{s} &gt;x\)</span>，将这个式子变形得到 <span class="math inline">\(\sum w - s\cdot x &gt; 0\)</span>，所以，我们可以将原图中每一条边的边权设为 <spanclass="math inline">\(w - x\)</span>（<spanclass="math inline">\(w\)</span>表示该边边权），那么就可以将问题转化为原图中是否存在正环，我们可以用 dfs版的 SPFA 求最长路解决这个问题。</p><h2 id="代码">3.代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">676</span>, M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>, L = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> h[N], e[M], ne[M], w[M], idx; <span class="hljs-comment">// 邻接表存图</span><br><span class="hljs-type">char</span> s[L];<br><span class="hljs-type">bool</span> flag;<br><span class="hljs-type">double</span> d[N];<br><span class="hljs-type">bool</span> vis[N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">double</span> x)</span> <span class="hljs-comment">// dfs版spfa</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (flag) <span class="hljs-keyword">return</span>;<br>    vis[u] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (d[v] &lt; d[u] + w[i] - x) <span class="hljs-comment">// 将边权变为 w[i] - x, 注意判断正环是求最长路</span><br>        &#123;<br>            d[v] = d[u] + w[i] - x;<br>            <span class="hljs-keyword">if</span> (vis[v]) flag = <span class="hljs-literal">true</span>;<br>            <span class="hljs-built_in">spfa</span>(v, x);<br>        &#125;<br>    &#125;<br>    vis[u] = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b;<br>    w[idx] = c;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> d);<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= N; i++)<br>    &#123;<br>        <span class="hljs-built_in">spfa</span>(i, x); <span class="hljs-comment">// 注意图不一定联通，要每个点都dfs一次</span><br>        <span class="hljs-keyword">if</span> (flag) <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 找到正环，退出</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">while</span> (n)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>        idx = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>            <span class="hljs-type">int</span> l = <span class="hljs-built_in">strlen</span>(s);<br>            <span class="hljs-keyword">if</span> (l &gt;= <span class="hljs-number">2</span>)<br>            &#123;<br>                <span class="hljs-type">int</span> u = (s[<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;a&#x27;</span>) * <span class="hljs-number">26</span> + (s[<span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;a&#x27;</span>); <br>                <span class="hljs-type">int</span> v = (s[l - <span class="hljs-number">2</span>] - <span class="hljs-string">&#x27;a&#x27;</span>) * <span class="hljs-number">26</span> + (s[l - <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">// 将字符串映射为数字</span><br>                <span class="hljs-built_in">add</span>(u, v, l); <span class="hljs-comment">// 连一条有向边</span><br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-type">double</span> l = <span class="hljs-number">0</span>, r = L;<br>        <span class="hljs-keyword">while</span> (r - l &gt; <span class="hljs-number">1e-4</span>) <span class="hljs-comment">// 精度要求,保留k位小数时就是 (r - l &gt; 1e-(2+k))</span><br>        &#123;<br>            <span class="hljs-type">double</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>            <span class="hljs-built_in">check</span>(mid);  <span class="hljs-comment">// 判断是否存在正环</span><br>            <span class="hljs-keyword">if</span> (flag) l = mid; <span class="hljs-comment">// 如果存在正环，说明mid比要求的最大值小，就l=mid</span><br>            <span class="hljs-keyword">else</span> r = mid; <span class="hljs-comment">// 不存在正环，说明mid比要求的最大值大，就r=mid</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (l) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lf\n&quot;</span>, l);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No solution.&quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>图论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】P4011孤岛营救问题</title>
    <link href="/2022/03/21/P4011%E5%AD%A4%E5%B2%9B%E8%90%A5%E6%95%91%E9%97%AE%E9%A2%98/"/>
    <url>/2022/03/21/P4011%E5%AD%A4%E5%B2%9B%E8%90%A5%E6%95%91%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4011">题目传送门</a></p><p>注意到数据范围<span class="math inline">\(1\le P\le10\)</span>,很容易想到二进制状压(<del>一开始做题以为钥匙是一次性的，没想到状压</del>)</p><p>所以我们可以自然而然地想到设<spanclass="math inline">\(d[i][state]\)</span>表示走到点<spanclass="math inline">\(i\)</span>且钥匙状态为<spanclass="math inline">\(state\)</span>的最短步数(我把二维点压成了一维，代码中会有体现)，分类讨论一下如何转移<spanclass="math inline">\(d[i][state]\)</span>这个状态</p><p>1.如果点<spanclass="math inline">\(i\)</span>处有若干把钥匙，那么我们的最优方案就是将这些钥匙捡起(捡钥匙不占用时间)，所以此时的状态为<spanclass="math inline">\(d[i][state | key[i]]\)</span>(<spanclass="math inline">\(key[i]\)</span>表示点<spanclass="math inline">\(i\)</span>处钥匙的状态)，而且我们还可以得出转移式子</p><p><span class="math inline">\(d[i][state|key[i]] =min(d[i][state|key[i]], d[i][state])\)</span></p><p>2.如果我们从点<span class="math inline">\(i\)</span>处走到点<spanclass="math inline">\(j\)</span>处而且手上恰好有能开门的钥匙(或没有门)，那我们就可以得到转移式子</p><p><span class="math inline">\(d[j][state] = min(d[j][state],d[i][state] +1)\)</span></p><p>我们发现第一种情况的边权为<spanclass="math inline">\(0\)</span>，第二种情况的边权为<spanclass="math inline">\(1\)</span>，所以我们可以想到用双端队列<spanclass="math inline">\(bfs\)</span>的方法去求最短路，具体细节见代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pii pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>, P = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">12</span>;<br>vector&lt;<span class="hljs-type">int</span>&gt; G[N], E[N];<br><span class="hljs-type">int</span> d[N][P];<br><span class="hljs-type">int</span> g[<span class="hljs-number">11</span>][<span class="hljs-number">11</span>];<br><span class="hljs-type">int</span> key[N];<br><span class="hljs-type">int</span> n, m, p, k, s;<br><span class="hljs-type">bool</span> vis[N][P];<br>set&lt;pii&gt; edge;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    G[a].<span class="hljs-built_in">push_back</span>(b);<br>    E[a].<span class="hljs-built_in">push_back</span>(c);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;, dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k++) <span class="hljs-comment">// 遍历从(i, j)可以走到的边</span><br>            &#123;<br>                <span class="hljs-type">int</span> u = i + dx[k], v = j + dy[k];<br>                <span class="hljs-keyword">if</span> (!u || u &gt; n || !v || v &gt; m) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span> (!edge.<span class="hljs-built_in">count</span>(&#123;g[i][j], g[u][v]&#125;)) <span class="hljs-comment">// 如果还没建过边，那就建</span><br>                    <span class="hljs-built_in">add</span>(g[i][j], g[u][v], <span class="hljs-number">0</span>), <span class="hljs-built_in">add</span>(g[u][v], g[i][j], <span class="hljs-number">0</span>);<br>            &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> d);<br>    d[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">// 起始状态在1号点，手上没有钥匙</span><br>    deque&lt;pii&gt; q;<br>    q.<span class="hljs-built_in">push_front</span>(&#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;);<br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        pii t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop_front</span>();<br>        <span class="hljs-type">int</span> u = t.first, st = t.second;<br>        <span class="hljs-keyword">if</span> (u == n * m) <span class="hljs-keyword">return</span> d[u][st]; <span class="hljs-comment">// 如果搜到答案立刻返回</span><br>        <span class="hljs-keyword">if</span> (vis[u][st]) <span class="hljs-keyword">continue</span>;<br>        vis[u][st] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (key[u]) <span class="hljs-comment">// 如果点u中有钥匙</span><br>        &#123;<br>            <span class="hljs-type">int</span> state = st | key[u];<br>            <span class="hljs-keyword">if</span> (d[u][state] &gt; d[u][st])<br>            &#123;<br>                d[u][state] = d[u][st]; <span class="hljs-comment">// 第一个转移式子</span><br>                q.<span class="hljs-built_in">push_front</span>(&#123;u, state&#125;); <span class="hljs-comment">// 边权为0，插入队头</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; G[u].<span class="hljs-built_in">size</span>(); i++) <span class="hljs-comment">// 遍历周围的点</span><br>        &#123;<br>            <span class="hljs-type">int</span> v = G[u][i], w = E[u][i];<br>            <span class="hljs-keyword">if</span> (w &amp;&amp; !(st &gt;&gt; w &amp; <span class="hljs-number">1</span>)) <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// 如果有门但是没钥匙就跳过</span><br>            <span class="hljs-keyword">if</span> (d[v][st] &gt; d[u][st] + <span class="hljs-number">1</span>)<br>            &#123;<br>                d[v][st] = d[u][st] + <span class="hljs-number">1</span>; <span class="hljs-comment">// 第二个转移式子</span><br>                q.<span class="hljs-built_in">push_back</span>(&#123;v, st&#125;); <span class="hljs-comment">// 边权为1，插入队尾</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>(), p = <span class="hljs-built_in">read</span>(), k = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, idx = <span class="hljs-number">0</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>            g[i][j] = ++idx; <span class="hljs-comment">// 将二维坐标映射为一维</span><br><br>    <span class="hljs-keyword">while</span> (k--)<br>    &#123;<br>        <span class="hljs-type">int</span> x1 = <span class="hljs-built_in">read</span>(), y1 = <span class="hljs-built_in">read</span>(), x2 = <span class="hljs-built_in">read</span>(), y2 = <span class="hljs-built_in">read</span>(), c = <span class="hljs-built_in">read</span>();<br>        edge.<span class="hljs-built_in">insert</span>(&#123;g[x1][y1], g[x2][y2]&#125;), edge.<span class="hljs-built_in">insert</span>(&#123;g[x2][y2], g[x1][y1]&#125;); <span class="hljs-comment">// 在集合中保存已建的边</span><br>        <span class="hljs-keyword">if</span> (c) <span class="hljs-built_in">add</span>(g[x1][y1], g[x2][y2], c), <span class="hljs-built_in">add</span>(g[x2][y2], g[x1][y1], c); <span class="hljs-comment">// 两个点之间建双向边</span><br>    &#125;<br>    <br>    <span class="hljs-built_in">build</span>();<br>    s = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">while</span> (s--)<br>    &#123;<br>        <span class="hljs-type">int</span> x = <span class="hljs-built_in">read</span>(), y = <span class="hljs-built_in">read</span>(), q = <span class="hljs-built_in">read</span>();<br>        key[g[x][y]] |= <span class="hljs-number">1</span> &lt;&lt; q; <span class="hljs-comment">// 一个点可能有多把钥匙</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">bfs</span>());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>图论</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
