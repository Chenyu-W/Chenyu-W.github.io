<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【题解】UVA12633 Super Rooks on Chessboard</title>
    <link href="/2023/02/11/UVA12633%20Super%20Rooks%20on%20Chessboard/"/>
    <url>/2023/02/11/UVA12633%20Super%20Rooks%20on%20Chessboard/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/UVA12633">题目传送门</a></p><p>比较套路的多项式题。</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先考虑没有主对角线的贡献怎么做。这时候的答案即为<strong>没有车的行数 $\times$ 没有车的列数</strong>，所以答案就是上面那个式子减去<strong>只被主对角线覆盖的数量</strong>。一个经典结论是主对角线可以表示为行与列的差，所以我们记没有车的行的集合为 $R$，没有车的列的集合为 $C$，有车的主对角线的集合为 $D$，那么我们的答案即可表示为 $\sum<em>{r \in R}\sum</em>{c \in C} [r - c \in D]$，这是一个经典的卷积形式。具体地，我们设 $F(x) = \sum<em>{r \in R} x^r, G(x) = \sum</em>{c \in C} x^c$，那么答案即为 $\sum_{d \in D} [x^d] F(x)G(x)$，直接卷积即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> L(i, j, k) for (int i = (j); i &lt;= (k); i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> R(i, j, k) for (int i = (j); i &gt;= (k); i--)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> G(i, u) for (int i = h[(u)]; ~i; i = ne[i])</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ld long double</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> ld PI = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Complex</span> &#123;<br>    ld x, y;<br>    Complex <span class="hljs-keyword">operator</span>+(Complex e) &#123;<span class="hljs-keyword">return</span> &#123;x + e.x, y + e.y&#125;;&#125;<br>    Complex <span class="hljs-keyword">operator</span>-(Complex e) &#123;<span class="hljs-keyword">return</span> &#123;x - e.x, y - e.y&#125;;&#125;<br>    Complex <span class="hljs-keyword">operator</span>*(Complex e) &#123;<span class="hljs-keyword">return</span> &#123;x * e.x - y * e.y, x * e.y + y * e.x&#125;;&#125;<br>&#125; a[N], b[N];<br>pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; pos[N];<br><span class="hljs-type">bool</span> visx[N], visy[N], visz[N];<br><span class="hljs-type">int</span> rev[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(Complex a[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> flg)</span> </span>&#123;<br>    <span class="hljs-built_in">L</span>(i, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>) <span class="hljs-keyword">if</span> (i &lt; rev[i]) <span class="hljs-built_in">swap</span>(a[i], a[rev[i]]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> mid = <span class="hljs-number">1</span>; mid &lt; n; mid &lt;&lt;= <span class="hljs-number">1</span>) &#123;<br>        Complex W = &#123;<span class="hljs-built_in">cos</span>(PI / mid), <span class="hljs-built_in">sin</span>(PI / mid) * flg&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i += (mid &lt;&lt; <span class="hljs-number">1</span>)) &#123;<br>            Complex w = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;;<br>            <span class="hljs-built_in">L</span>(j, i, i + mid - <span class="hljs-number">1</span>) &#123;<br>                Complex x = a[j], y = w * a[j + mid];<br>                a[j] = x + y, a[j + mid] = x - y;<br>                w = w * W;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125; <br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">FFT</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m, Complex a[], Complex b[])</span> </span>&#123;<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">1</span>, l = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (k &lt;= n + m) k &lt;&lt;= <span class="hljs-number">1</span>, l++;<br>    <span class="hljs-built_in">L</span>(i, <span class="hljs-number">0</span>, k - <span class="hljs-number">1</span>) rev[i] = (rev[i &gt;&gt; <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">1</span>) | ((i &amp; <span class="hljs-number">1</span>) &lt;&lt; (l - <span class="hljs-number">1</span>));<br>    <span class="hljs-built_in">fft</span>(a, k, <span class="hljs-number">1</span>), <span class="hljs-built_in">fft</span>(b, k, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">L</span>(i, <span class="hljs-number">0</span>, k - <span class="hljs-number">1</span>) a[i] = a[i] * b[i];<br>    <span class="hljs-built_in">fft</span>(a, k, <span class="hljs-number">-1</span>);<br>    <span class="hljs-built_in">L</span>(i, <span class="hljs-number">0</span>, k - <span class="hljs-number">1</span>) a[i].x = (ll)(a[i].x / k + <span class="hljs-number">0.5</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> T = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">L</span>(t, <span class="hljs-number">1</span>, T) &#123;<br>        <span class="hljs-built_in">memset</span>(visx, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> visx);<br>        <span class="hljs-built_in">memset</span>(visy, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> visy);<br>        <span class="hljs-built_in">memset</span>(visz, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> visz);<br>        <span class="hljs-built_in">L</span>(i, <span class="hljs-number">0</span>, <span class="hljs-number">2e5</span>) a[i].x = a[i].y = b[i].x = b[i].y = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>(), k = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-built_in">L</span>(i, <span class="hljs-number">1</span>, k) pos[i].first = <span class="hljs-built_in">read</span>(), pos[i].second = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-built_in">L</span>(i, <span class="hljs-number">1</span>, k) visx[pos[i].first] = visy[pos[i].second] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">int</span> kx = <span class="hljs-number">0</span>, ky = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">L</span>(i, <span class="hljs-number">1</span>, n) kx += !visx[i], a[i].x = !visx[i];<br>        <span class="hljs-built_in">L</span>(i, <span class="hljs-number">1</span>, m) ky += !visy[i], b[<span class="hljs-number">50000</span> - i].x = !visy[i];<br>        ll res = <span class="hljs-number">1ll</span> * kx * ky;<br>        <span class="hljs-built_in">FFT</span>(n, <span class="hljs-number">50000</span>, a, b);<br>        <span class="hljs-built_in">L</span>(i, <span class="hljs-number">1</span>, k) &#123;<br>            <span class="hljs-type">int</span> dig = pos[i].first - pos[i].second + <span class="hljs-number">50000</span>;<br>            <span class="hljs-keyword">if</span> (!visz[dig])<br>                res -= (ll)a[dig].x, visz[dig] = <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case %d: %lld\n&quot;</span>, t, res);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>多项式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】CF785D Anton and School - 2</title>
    <link href="/2023/02/09/CF785D%20Anton%20and%20School%20-%202/"/>
    <url>/2023/02/09/CF785D%20Anton%20and%20School%20-%202/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF785D">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>范德蒙德卷积入门题。</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>遇到这种分成前后两段的问题，一般都是枚举每个点作为分界点的答案，这题也是一样，我们记 $[1, i]$ 的 <code>(</code> 数量为 $l_i$，$[i, n]$ 的 <code>)</code> 数量为 $r_i$，然后我们枚举每个点作为最后一个 <code>(</code> 时的答案，考虑当前点为 $i$，选取的子序列长度为 $2k$，那么就相当于从 $[1, i - 1]$ 中选 $k - 1$ 个 <code>(</code>，再从 $[i, n]$ 中选取 $k$ 个 <code>)</code>，用组合数可表示为</p><script type="math/tex; mode=display">\sum_k \binom{l_i - 1}{k - 1}\binom{r_i}{k}</script><p>这很像范德蒙德卷积的形式，于是我们稍作变化，得到</p><script type="math/tex; mode=display">\begin{aligned}&\sum_k \binom{l_i - 1}{k - 1}\binom{r_i}{k}\\&=\sum_k \binom{l_i - 1}{l_i - k}\binom{r_i}{k}\\&=\binom{l_i + r_i - 1}{l_i}\end{aligned}</script><p>这样就可以 $O(1)$ 计算每个位置的答案了，总的时间复杂度为 $O(n)$。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> L(i, j, k) for (int i = (j); i &lt;= (k); i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> R(i, j, k) for (int i = (j); i &gt;= (k); i--)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> G(i, u) for (int i = h[(u)]; ~i; i = ne[i])</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ld long double</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>, mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">char</span> s[N];<br><span class="hljs-type">int</span> l[N], r[N], fac[N], ifac[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">qpow</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (b) &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) res = <span class="hljs-number">1ll</span> * res * a % mod;<br>        a = <span class="hljs-number">1ll</span> * a * a % mod;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    fac[<span class="hljs-number">0</span>] = ifac[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">L</span>(i, <span class="hljs-number">1</span>, n) fac[i] = <span class="hljs-number">1ll</span> * fac[i - <span class="hljs-number">1</span>] * i % mod;<br>    ifac[n] = <span class="hljs-built_in">qpow</span>(fac[n], mod - <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">R</span>(i, n - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) ifac[i] = <span class="hljs-number">1ll</span> * ifac[i + <span class="hljs-number">1</span>] * (i + <span class="hljs-number">1</span>) % mod; <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; y || y &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1ll</span> * fac[x] * (<span class="hljs-number">1ll</span> * ifac[y] * ifac[x - y] % mod) % mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s + <span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">init</span>(n);<br>    <span class="hljs-built_in">L</span>(i, <span class="hljs-number">1</span>, n) l[i] += s[i] == <span class="hljs-string">&#x27;(&#x27;</span>, r[i] += s[i] == <span class="hljs-string">&#x27;)&#x27;</span>;<br>    <span class="hljs-built_in">L</span>(i, <span class="hljs-number">1</span>, n) l[i] += l[i - <span class="hljs-number">1</span>];<br>    <span class="hljs-built_in">R</span>(i, n, <span class="hljs-number">1</span>) r[i] += r[i + <span class="hljs-number">1</span>];<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">L</span>(i, <span class="hljs-number">1</span>, n) &#123;<br>        <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;)&#x27;</span>) <span class="hljs-keyword">continue</span>;<br>        res = (res + <span class="hljs-built_in">C</span>(l[i] + r[i] - <span class="hljs-number">1</span>, l[i])) % mod;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【笔记】数列小记</title>
    <link href="/2023/02/04/%E6%95%B0%E5%88%97%E5%B0%8F%E8%AE%B0/"/>
    <url>/2023/02/04/%E6%95%B0%E5%88%97%E5%B0%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>浅谈一下数列的基础内容(笔者水平不高，轻喷)。</p><p>(该小记中没有具体例题，请谨慎服用)</p><span id="more"></span><h2 id="等差数列"><a href="#等差数列" class="headerlink" title="等差数列"></a>等差数列</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>如果数列 ${a<em>n}$ 满足 $a</em>{n + 1} - a_n$ 是常数，那么则称数列 ${a_n}$ 是一个等差数列，等差数列还可以写作 $\text{A.P}$。</p><h3 id="等差数列的基本量"><a href="#等差数列的基本量" class="headerlink" title="等差数列的基本量"></a>等差数列的基本量</h3><p>$a<em>1$ 称为首项，$a</em>{n + 1} - a_n$ 这个常数称为公差，一般用 $d$ 表示。</p><p>有了以上定义，我们可以容易得到等差数列的通项公式 $a_n = a_1 + (n - 1)d$。</p><p>我们还可以发现把一个等差数列的头尾两两配对，它们的和是一样的，这也是高斯计算等差数列和的原理，从中我们可以推出等差数列的前 $n$ 项和公式 $S_n = \dfrac{n(a_1 + a_n)}{2}$，有时也用通项公式换掉 $a_n$ 来方便计算。</p><h3 id="等差数列的性质"><a href="#等差数列的性质" class="headerlink" title="等差数列的性质"></a>等差数列的性质</h3><p>等差数列在 $d \neq 0$ 时是单调的，看起来十分废话，但是这条结论在一类求 $S_n$ 的最值问题可以应用，我们只需找到 $a_n$ 和 $0$ 的分界点即可。</p><p>等差数列的通项公式有一个弊端，那就是只能从 $a_1$ 推 $a_n$，好在我们可以把通项公式变形一下，这样就可以得到 $a_n = a_m + (n - m)d$ 这样比较普适的结论。</p><p>由等差数列求和公式推导的过程我们容易发现 $m + n = p + q \Rightarrow a<em>m + a_n = a_p + a_q$，这样得到了第二个性质，当 $d \neq 0$ 时，我们也容易由右边推左边，这个结论还有一个特别的形式，即 $m + n = 2p \Rightarrow a_m + a_n = 2a_p$，这样我们就可以发现一种全新的等差数列求和方法，就是当项数 $n$ 为奇数时，$S_n = na</em>{\frac{n + 1}{2}}$，这个结论可以帮助我们化简一些式子。</p><p>上述那个求和方式还可以逆用，比如 $a<em>n = \dfrac{S</em>{2n - 1}}{2n - 1}$，这一条性质可以解决一类问题，即给定等差数列 ${a<em>n}$ 和 ${b_n}$ 前 $n$ 项和 $S_n$ 和 $T_n$ 的比值 $\dfrac{S_n}{T_n}$，求 $\dfrac{a_n}{b_n}$，这时候我们就可以利用 $\dfrac{a_n}{b_n} = \dfrac{S</em>{2n - 1}}{T_{2n - 1}}$ 来进行计算。</p><p>等差数列的前 $n$ 项和 $S_n$ 也有一些很好的性质，下面我们来介绍一下。</p><p>首先根据 $S_n = \dfrac{n(a_1 + a_n)}{2}$，我们可以得到 $\dfrac{S_n}{n} = \dfrac{a_1 + a_n}{2} = \dfrac{2a_1 + (n - 1)d}{2} = a_1 + \dfrac{n - 1}{2}d$，也即 $\left{\dfrac{S_n}{n}\right}$ 是一个公差为 $\dfrac{d}{2}$ 的等差数列。</p><p>还有一个广为流传的结论是等差数列的片段和也是等差数列。形式化地，即 ${S<em>{nm} - S</em>{(n - 1)m}}$ 也是个等差数列，现在我们不妨来研究一下这个等差数列的公差是什么。</p><script type="math/tex; mode=display">S_{(n + 1)m} - S_{nm} = \sum_{i={nm + 1}}^{(n + 1)m} a_i = \sum_{i={nm + 1}}^{(n + 1)m} a_{i - m} + md = m^2d + \sum_{i = (n - 1)m + 1}^{nm}a_i = m^2d + S_{nm} - S_{(n - 1)m}</script><p>所以 ${S<em>{nm} - S</em>{(n - 1)m}}$ 是个公差为 $m^2d$ 的等差数列。</p><h2 id="等比数列"><a href="#等比数列" class="headerlink" title="等比数列"></a>等比数列</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>如果数列 ${a<em>n}$ 满足 $a_n \neq 0$，$\dfrac{a</em>{n + 1}}{a_n}$ 为常数，那么则称 ${a_n}$ 是一个等比数列，等比数列还可以写作 $\text{G.P}$。</p><h3 id="等比数列的基本量"><a href="#等比数列的基本量" class="headerlink" title="等比数列的基本量"></a>等比数列的基本量</h3><p>$a<em>1$ 称为首项，$\dfrac{a</em>{n + 1}}{a_n}$ 这个常数称为公比，一般用 $q$ 表示。</p><p>和等差数列相似，我们容易得到等比数列的通项公式 $a_n = a_1 \cdot q^{n - 1}$。</p><p>等比数列的求和公式推导要用到一个错位相减的经典 trick，具体地，我们要求等比数列的前 $n$ 项和 $S<em>n = \sum</em>{i = 1}^n a<em>i$，这个式子不是很好直接算，于是考虑消去求和式子中的一部分，考虑 $qS_n = \sum</em>{i = 2}^{n + 1}a<em>i$，两式相减，我们就可以得到 $(1 - q)S_n = a_1 - a</em>{n + 1}$，所以 $S<em>n = \dfrac{a_1 - a</em>{n + 1}}{1 - q} = \dfrac{(1 - q^n)a_1}{1 - q}(q \neq 1)$。</p><h3 id="等比数列的性质"><a href="#等比数列的性质" class="headerlink" title="等比数列的性质"></a>等比数列的性质</h3><p>等比数列的单调性不像等差数列那么直接，首先当 $q \in (-\infty, 0)$ 时，这个数列肯定是摆动的。接下来我们分为 $q \in (0, 1)$ 和 $q \in (1, +\infty)$ 来进行讨论。首先当 $q \in (0, 1)$ 时，若 $a_1 &gt; 0$，则单调递减，反之单调递增。当 $q \in (1, +\infty)$ 时，若 $a_1 &gt; 0$，则单调递增，反之单调递减。</p><p>同等差数列相似，我们也可以对等比数列的通项公式进行变形，得到 $a_n = a_m \cdot q^{n - m}$。</p><p>还是同等差数列相似，$m + n = p + q \Rightarrow a_ma_n = a_pa_q$，特别地，$m + n = 2p \Rightarrow a_ma_n = a_p^2$。</p><p>对于等比数列的前 $n$ 项和 $S<em>n$ 来说，我们也有片段和为等比数列的性质，具体地，${S</em>{nm} - S_{(n - 1)m}}$ 为等比数列，其公比为 $q^m$，该性质的证明与等差数列相似，读者可以自行研究。</p><h2 id="数列求通项公式"><a href="#数列求通项公式" class="headerlink" title="数列求通项公式"></a>数列求通项公式</h2><p><del>终于到了重头戏。</del></p><h3 id="叠加-叠乘法"><a href="#叠加-叠乘法" class="headerlink" title="叠加/叠乘法"></a>叠加/叠乘法</h3><p>这两种方法属于数列求通项里面最 simple 的，并没有涉及什么巧妙地变换。</p><p>叠加法解决的是一种递推式形如 $a<em>{n + 1} = a_n + f(n)$ 的数列通项，假设我们现在要求 $a_n$，那么第一步显然是变为 $a_n = a</em>{n - 1} + f(n - 1)$ 的形式，然后我们再把 $a<em>{n - 1}$ 以同样的形式拆开。以此类推，我们可以得到 $a_n = a_1 + \sum</em>{i = 1}^{n - 1} f(i)$ 的结论，所以我们只要对 $f$ 求和即可，大多数题目的 $f$ 通常是易于求和的，如果遇到更困难的可以参考数列求和部分。</p><p>当然 $a<em>{n + 1} = a_n + f(n)$ 还有一种解决方式，就是构造 $g(n + 1) - g(n) = f(n)$，然后我们就会得到 $a</em>{n + 1} - g(n + 1) = a_n - g(n)$，这样我们就可以得到 ${a_n - g(n)}$ 是常数数列，根据 $a_1 - g(1)$ 的值进行计算，不难发现 $g(n + 1) - g(n) = f(n)$ 和有限微积分中差分的定义相似，有兴趣的读者可以进行了解。</p><p>叠乘法和叠加法异曲同工，解决的是形如 $a<em>{n + 1} = a_n \cdot f(n)$ 的数列通项，不难发现它就是把变化从加法变为乘法，容易得到 $a_n = a_1 \cdot \prod</em>{i = 1}^{n - 1} f(i)$，对 $f$ 求积即可。</p><p>同叠加法，我们也可以构造 $\dfrac{g(n + 1)}{g(n)} = f(n)$，然后就可以变化为 $\dfrac{a_{n + 1}}{g(n + 1)} = \dfrac{a_n}{g(n)}$，然后得到 $\left{\dfrac{a_n}{g(n)}\right}$ 为常数数列，利用 $\dfrac{a_1}{g(1)}$ 进行计算即可。</p><h3 id="一阶常系数齐次线性递推形式"><a href="#一阶常系数齐次线性递推形式" class="headerlink" title="一阶常系数齐次线性递推形式"></a>一阶常系数齐次线性递推形式</h3><p>题目看着很长，实际上就是解决形如 $a_{n + 1} = pa_n + f(n)$ 的问题。</p><p>让我们先从最简单的 $a_{n + 1} = pa_n + q$ 入手。通常在遇到数列通项问题时，我们都会想办法把原数列变换为易于处理的形式，这里也是一样，我们有两种处理方法。</p><p>第一种，我们可以把式子变为 $\dfrac{a_{n + 1}}{p^{n + 1}} = \dfrac{a_n}{p^n} + \dfrac{q}{p^{n + 1}}$，这样数列 $\left{\dfrac{a_n}{p^n}\right}$ 就是一个叠加形的数列，后面的部分其实就是一个等比数列求和，可以用上面讲的方法计算。</p><p>第二种，也是更普适的方法，我们想办法构造一个等比数列。具体地，设 $a_{n + 1} + \lambda = p(a_n + \lambda)$，这个方程在 $p \neq 1$ 的时有解 $\lambda = \dfrac{q}{p - 1}$，然后我们就可以得到 ${a_n + \lambda}$ 是一个公比为 $p$ 的等比数列，可以直接计算通项公式。</p><p>研究完上述情况，我们来重新看最开始的 $a<em>{n + 1} = pa_n + f(n)$，同第二种方法，我们也想构造出一个等比数列，于是我们设 $a</em>{n + 1} + g(n + 1) = p(a_n + g(n))$，这个 $g(n)$ 在 $f(n)$ 是常系数多项式时是可以待定系数求出的，这样 ${a_n + g(n)}$ 就是一个公比为 $p$ 的等比数列，可以计算。</p><p>需要注意的是并不是所有形如 $a<em>{n + 1} = pa_n + f(n)$ 的问题都是用第二个方法解决，比如 $a</em>{n + 1} = 3a_n + 3^n$ 我们用第一种方法就可以直接变为一个等差数列的形式，所以具体用哪种方法还是看情况而定。</p><h3 id="二阶常系数齐次线性递推形式"><a href="#二阶常系数齐次线性递推形式" class="headerlink" title="二阶常系数齐次线性递推形式"></a>二阶常系数齐次线性递推形式</h3><p>顾名思义，解决的即为 $a<em>{n + 2} = pa</em>{n + 1} + qa_n$ 的问题，比如大名鼎鼎的 Fibonacci 数列就是如此。</p><p>首先根据一阶的推导，我们肯定是想往等比数列这个方向走，所以我们不妨设 $a<em>{n + 2} - \lambda_1a</em>{n + 1} = \lambda<em>2(a</em>{n + 1} - \lambda<em>1a_n)$，这样我们就可以得到 ${a</em>{n + 1} - \lambda_1a_n}$ 是一个公比为 $\lambda_2$ 的等比数列，解完这个之后我们就可以得到一个一阶的结构，也就能用学过的东西进行求解。然后我们把重点放在 $\lambda_1, \lambda_2$ 的求解，根据上面的式子，我们有 $\lambda_1 + \lambda_2 = p, \lambda_1\lambda_2 = -q$，根据韦达定理，它们正是 $x^2 - px - q = 0$ 的双根，有了这个结论，我们也就完成了二阶的求解。</p><p>当你用上面的方法解了几道题后不免会发现一个问题——怎么这么麻烦！是的，上面的方法虽然普适，但是要经过两次转化，不免有些复杂，所以我们尝试从中探索规律。当你做了几道习题后，不妨观察一下最终得出的结果，紧接着就可以发现当 $\lambda_1 \neq \lambda_2$ 时，最终的结果 $a_n$ 一定是一个 $a_n = A\lambda_1^n + B\lambda_2^n$ 的形式，所以我们只需解出 $A, B$ 即可，这可以用 $a_1, a_2$ 的值来待定系数求解。但当 $\lambda_1 = \lambda_2$ 时，结论稍有变化，这时的 $a_n$ 满足 $a_n = An\lambda_1^n + B\lambda_2^n$，我们依旧可以用 $a_1, a_2$ 的值来待定系数求解。有了以上两个结论，我们就可以大大简少计算量了。</p><h3 id="高阶常系数齐次线性递推形式"><a href="#高阶常系数齐次线性递推形式" class="headerlink" title="高阶常系数齐次线性递推形式"></a>高阶常系数齐次线性递推形式</h3><p>对于二阶式子，我们有 $x^2 - px - q = 0$ 这样的结构，那么推广到更高阶时是否存在这样的结构呢？答案是肯定的。</p><p>具体地，我们要解决形如 $a<em>n = \sum</em>{i = 1}^k p<em>ia</em>{n - i}$ 这样的问题，其中 $p<em>i$ 给定，那么我们就有一个这样的方程 $x^k = \sum</em>{i = 1}^k p<em>ix^{k - i}$ 叫做数列 ${a_n}$ 的特征方程。关于特征方程，有一个十分重要的结论，假设特征方程有 $m$ 个互不相同的根 $\lambda_1, \lambda_2, \ldots, \lambda_m$，它们的出现次数分别为 $n_1, n_2, \ldots, n_m$，那么我们可以得到 $a_n$ 一定满足 $a_n = \sum</em>{i = 1}^m f_i(n)\lambda_i^n$，其中 $f_i(n)$ 是一个次数为 $n_i - 1$ 的多项式，所有 $f_i$ 的系数我们不难通过 $a_1, a_2, \ldots, a_k$ 的值来待定系数解出。</p><h3 id="一阶分式线性递推数列"><a href="#一阶分式线性递推数列" class="headerlink" title="一阶分式线性递推数列"></a>一阶分式线性递推数列</h3><p>现在我们来讨论一种全新的递推形式，即 $a_{n + 1} = \dfrac{Aa_n + B}{Ca_n +D}$。</p><p>对于这一类型的递推式，有一种通用的解法，就是求出 $x = \dfrac{Ax + B}{Cx + D}$ 的两根 $x_1, x_2$，当 $x_1 \neq x_2$ 时，我们有结论 $\left{\dfrac{a_n - x_1}{a_n - x_2}\right}$ 是等比数列，当 $x_1 = x_2$ 时，我们有 $\left{\dfrac{1}{a_n - x_1}\right}$ 是等差数列。这种十分精妙的解法叫做不动点法，关于不动点法，推荐一篇讲的不错的<a href="https://zhuanlan.zhihu.com/p/104544760">文章</a>。</p><h2 id="数列求和"><a href="#数列求和" class="headerlink" title="数列求和"></a>数列求和</h2><h3 id="常用公式"><a href="#常用公式" class="headerlink" title="常用公式"></a>常用公式</h3><script type="math/tex; mode=display">\sum_{i = 1}^n i = \dfrac{n(n + 1)}{2}</script><script type="math/tex; mode=display">\sum_{i = 1}^n i^2 = \dfrac{n(n + 1)(2n + 1)}{6}</script><script type="math/tex; mode=display">\sum_{i = 1}^n i^3 = \dfrac{n^2(n+1)^2}{4}</script><p><del>以上结论均可以用有限微积分推，以后可能会写。</del></p><script type="math/tex; mode=display">\dfrac{1}{n(n + k)} = \dfrac{1}{k}\left(\dfrac{1}{n} - \dfrac{1}{n +k}\right)</script><h3 id="分组求和法"><a href="#分组求和法" class="headerlink" title="分组求和法"></a>分组求和法</h3><p>如果一个数列直接求和不好算，但是可以把这个数列分成几部分，使得这几部分的和都很好计算，那么我们就可以直接对数列进行分组，计算出每组的和然后相加，这种方法就叫分组求和法。</p><p>分组求和法的常见应用是在一些带绝对值或整除符号的数列的求和，一个很典型的例子是对数列 ${\lfloor \lg n\rfloor}$ 求和。</p><h3 id="错位相减法"><a href="#错位相减法" class="headerlink" title="错位相减法"></a>错位相减法</h3><p>在推导等比数列求和公式时我们用到了这个方法，但错位相减法不只是来解决这一个问题的。它的实质实际上就在于通过错位相减来消去求和式子中的一些项或者使其更加容易计算。</p><p>关于错位相减法，有一个经典的 trick，就是给定一个等差数列 ${a_n}$ 和一个等比数列 ${b_n}$，要求对 ${a_nb_n}$ 求和。</p><p>我们不妨设 ${a<em>n}$ 的公差为 $d$，${b_n}$ 的公比为 $q$，我们要求 $S_n = \sum</em>{i = 1}^n a<em>ib_i$，我们考虑 $qS_n = \sum</em>{i = 1}^na<em>ib</em>{i + 1}$，然后这样就变成了一个错位相减的形式，即 $(1 - q)S<em>n = \sum</em>{i = 1}^n a<em>ib_i - \sum</em>{i = 1}^na<em>ib</em>{i + 1}$，把 $b<em>n$ 相同的式子拉出来合并，然后就变为 $(1 - q)S_n = a_1b_1 - a_nb</em>{n + 1} + d\sum_{i = 2}^n b_i$，这样我们就只剩下了一个等比数列求和，可以直接计算。</p><h3 id="裂项相消法"><a href="#裂项相消法" class="headerlink" title="裂项相消法"></a>裂项相消法</h3><p>裂项相消的核心是利用常用公式的第四条把一类分式求和的中间项，全部抵消，比如 $\sum_{i = 1}^n \dfrac{1}{i(i +1)}$ 就可以利用第四条公式化成 $\dfrac{n}{n + 1}$，比较容易。裂项相消经常和放缩法一起搭配使用，我们只需把握放缩尺度，将不易求和的式子转为可以裂项的式子然后求和即可，注意在放缩时如果界不够紧，可以减少一些放缩的项数。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>目前大概就写这么多了，如果有实施性错误或建议加入内容，欢迎联系。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
      <tag>whk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【笔记】寒假补题计划</title>
    <link href="/2023/01/29/%E5%AF%92%E5%81%87%E8%A1%A5%E9%A2%98%E8%AE%A1%E5%88%92/"/>
    <url>/2023/01/29/%E5%AF%92%E5%81%87%E8%A1%A5%E9%A2%98%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<p>什么都学不会什么都学不会什么都学不会什么都学不会什么都学不会什么都学不会什么都学不会什么都学不会什么都学不会什么都学不会。</p><span id="more"></span><h2 id="BZOJ4361"><a href="#BZOJ4361" class="headerlink" title="BZOJ4361"></a>BZOJ4361</h2><p><a href="https://darkbzoj.cc/problem/4361">题目传送门</a></p><p>记 $f<em>i$ 为长度为 $i$ 的非降子序列个数，则最终剩下 $i$ 个数的答案即为 $(n - i)!f_i$，但是这样会有一种不合法情况，就是剩下 $i + 1$ 个数的时候已经结束了，这一部分的情况数为 $(n - i - 1)!(i + 1)f</em>{i + 1}$，所以答案为</p><script type="math/tex; mode=display">\sum_{i = 1}^n (n - i)!f_i - (n - i - 1)!(i + 1)f_{i +1}</script><p>所以只需考虑求 $f<em>i$，令 $g</em>{i, j}$ 表示长度为 $i$，且以 $j$ 结尾的非降子序列个数，那么我们就有转移</p><script type="math/tex; mode=display">g_{i, j} = \sum_{k = 1}^{j - 1} [a_k \le a_j]g_{i - 1, k}</script><p>可以使用 BIT 优化至 $O(n^2\log n)$。</p><p><a href="https://darkbzoj.cc/submission/228314">Submission</a></p><h2 id="HDU4609"><a href="#HDU4609" class="headerlink" title="HDU4609"></a>HDU4609</h2><p><a href="https://vjudge.net/problem/HDU-4609">题目传送门</a></p><p>考虑容斥，计算三条边不可以组成三角形的情况数，这等价于算 $a_i + a_j \le a_k$ 的状态数。</p><p>我们记 $F(x) = \sum_{i=1}^n x^{a_i}$，考虑 $[x^k]F^2(x)$ 即为 $a_i + a_j = k$ 的 $(i, j)$ 数，因为我们要算 $a_i + a_j \le a_k$ 的个数，所以我们对卷积做前缀和，注意要去掉两个的情况，又因为 $(i, j)$ 为有序数对，所以我们答案要除以 $2$。</p><p><a href="https://vjudge.net/solution/40629729">Submission</a></p><h2 id="BZOJ3252"><a href="#BZOJ3252" class="headerlink" title="BZOJ3252"></a>BZOJ3252</h2><p><a href="https://darkbzoj.cc/problem/3252">题目传送门</a></p><p>一个显然的贪心是每次取权值最大的链然后把链上权值清空。</p><p>考虑长链剖分优化，将链长定义为链上点权之和，不难发现答案为前 $k$ 大链的权值。</p><p><a href="https://darkbzoj.cc/submission/228559">Submission</a></p><h2 id="BZOJ3509"><a href="#BZOJ3509" class="headerlink" title="BZOJ3509"></a>BZOJ3509</h2><p><a href="https://darkbzoj.cc/problem/3509">题目传送门</a></p><p>一个不成熟的做法是我们对每一个 $a_j$ 都统计答案，把它左边的数放一个生成函数然后把它右边的数放一个生成函数，再把两个生成函数卷起来即可，这样做是 $O(nV\log V)$ 的。</p><p>但是我们发现这样很傻，因为卷一次只能获得一个数的答案，于是我们考虑分块。至少有两个元素在相同块内的情况我们可以直接 $O(n)$ 暴力。然后剩下的我们只要把块左边的数加进一个生成函数，把块右边的数加进另一个生成函数再卷即可。</p><p><a href="https://darkbzoj.cc/submission/228985">Submission</a></p><h2 id="Luogu3201"><a href="#Luogu3201" class="headerlink" title="Luogu3201"></a>Luogu3201</h2><p><a href="https://www.luogu.com.cn/problem/P3201">题目传送门</a></p><p>考虑对每个值都开一个线段树来维护其出现位置，这样维护一个值的段数是平凡的。答案即为所有线段树的答案之和，操作一相当于合并两棵线段树。</p><p><a href="https://www.luogu.com.cn/record/101292091">Submission</a></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】LOJ6208树上询问</title>
    <link href="/2023/01/26/LOJ6208%E6%A0%91%E4%B8%8A%E8%AF%A2%E9%97%AE/"/>
    <url>/2023/01/26/LOJ6208%E6%A0%91%E4%B8%8A%E8%AF%A2%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<p><a href="https://loj.ac/p/6208">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>好像有更快更简洁的纯线段树做法，但为什么不写不用脑子的矩阵做法呢？</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>树上路径修改显然是套上一层树剖，所以我们直接考虑如何修改。</p><p>我们在线段树的叶子结点维护一个矩阵，形如</p><script type="math/tex; mode=display">\begin{bmatrix}k_i & t_i & 1\end{bmatrix}</script><p>用来维护当前节点的 $k, t$ 值，然后注意到</p><script type="math/tex; mode=display">\begin{bmatrix}k_i & t_i & 1\end{bmatrix}\begin{bmatrix}1 & 0 & 0 \\0 & 1 & 0 \\d & 0 & 1\end{bmatrix}=\begin{bmatrix}k_i + d & t_i & 1\end{bmatrix}</script><script type="math/tex; mode=display">\begin{bmatrix}k_i & t_i & 1\end{bmatrix}\begin{bmatrix}1 & d & 0 \\0 & 1 & 0 \\0 & 0 & 1\end{bmatrix}=\begin{bmatrix}k_i & t_i + d \times k_i & 1\end{bmatrix}</script><p>此时操作转变为区间同乘一个矩阵，可以直接线段树维护，时间复杂度 $O(3^3n\log^2n)$。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> L(i, j, k, l) for(int i = (j); i &lt;= (k); i += (l))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> R(i, j, k, l) for(int i = (j); i &gt;= (k); i -= (l))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> G(i, u) for (int i = h[(u)]; ~i; i = ne[i])</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ld long double</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Matrix</span> &#123;<br>    ll a[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>];<br>    <span class="hljs-built_in">Matrix</span>() &#123;<span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> a);&#125;<br>    Matrix <span class="hljs-keyword">operator</span>*(Matrix b) &#123;<br>        Matrix c;<br>        <span class="hljs-built_in">L</span>(k, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>) <span class="hljs-built_in">L</span>(i, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>) <span class="hljs-built_in">L</span>(j, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>) c.a[i][j] += a[i][k] * b.a[k][j];<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Sgt</span> &#123;<br>    <span class="hljs-type">int</span> l, r;<br>    Matrix res, tag;<br>&#125; t[N &lt;&lt; <span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> h[N], e[N &lt;&lt; <span class="hljs-number">1</span>], ne[N &lt;&lt; <span class="hljs-number">1</span>], idx;<br><span class="hljs-type">int</span> fa[N], dep[N], sz[N], son[N], dfn[N], rk[N], top[N], tt;<br>Matrix val;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> p)</span> </span>&#123;<br>    fa[u] = p, dep[u] = dep[p] + <span class="hljs-number">1</span>, sz[u] = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">G</span>(i, u) &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (v == p) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs1</span>(v, u);<br>        sz[u] += sz[v];<br>        <span class="hljs-keyword">if</span> (sz[v] &gt; sz[son[u]]) son[u] = v;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> t)</span> </span>&#123;<br>    rk[dfn[u] = ++tt] = u, top[u] = t;<br>    <span class="hljs-keyword">if</span> (!son[u]) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">dfs2</span>(son[u], t);<br>    <span class="hljs-built_in">G</span>(i, u) &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (v == fa[u] || v == son[u]) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs2</span>(v, v);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    t[p].l = l, t[p].r = r, t[p].tag.a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = t[p].tag.a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = t[p].tag.a[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span> t[p].res.a[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>, <span class="hljs-built_in">void</span>();<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, mid), <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> </span>&#123;<br>    Sgt &amp;u = t[p], &amp;l = t[p &lt;&lt; <span class="hljs-number">1</span>], &amp;r = t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span> (l.l == l.r) l.res = l.res * u.tag;<br>    <span class="hljs-keyword">else</span> l.tag = l.tag * u.tag;<br>    <span class="hljs-keyword">if</span> (r.l == r.r) r.res = r.res * u.tag;<br>    <span class="hljs-keyword">else</span> r.tag = r.tag * u.tag;<br>    <span class="hljs-built_in">L</span>(i, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>) <span class="hljs-built_in">L</span>(j, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>) u.tag.a[i][j] = i == j;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= t[p].l &amp;&amp; t[p].r &lt;= r) &#123;<br>        <span class="hljs-keyword">if</span> (t[p].l == t[p].r) t[p].res = t[p].res * val;<br>        <span class="hljs-keyword">else</span> t[p].tag = t[p].tag * val;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= mid) <span class="hljs-built_in">modify</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">if</span> (r &gt; mid) <span class="hljs-built_in">modify</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (t[p].l == t[p].r) <span class="hljs-keyword">return</span> t[p].res.a[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>];<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (x &lt;= mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(p &lt;&lt; <span class="hljs-number">1</span>, x);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">modify_path</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (top[u] != top[v]) &#123;<br>        <span class="hljs-keyword">if</span> (dep[top[u]] &lt; dep[top[v]]) <span class="hljs-built_in">swap</span>(u, v);<br>        <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, dfn[top[u]], dfn[u]);<br>        u = fa[top[u]];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (dep[u] &gt; dep[v]) <span class="hljs-built_in">swap</span>(u, v);<br>    <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, dfn[u], dfn[v]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">L</span>(_, <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-type">int</span> a = <span class="hljs-built_in">read</span>(), b = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-built_in">add</span>(a, b), <span class="hljs-built_in">add</span>(b, a);<br>    &#125;<br>    <span class="hljs-built_in">dfs1</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">dfs2</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>    <span class="hljs-type">int</span> m = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-type">int</span> op = <span class="hljs-built_in">read</span>(), x = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-type">int</span> d = <span class="hljs-built_in">read</span>();<br>            <span class="hljs-built_in">L</span>(i, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>) <span class="hljs-built_in">L</span>(j, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>) val.a[i][j] = i == j;<br>            val.a[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] = d;<br>            <span class="hljs-built_in">modify_path</span>(<span class="hljs-number">1</span>, x);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-type">int</span> d = <span class="hljs-built_in">read</span>();<br>            <span class="hljs-built_in">L</span>(i, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>) <span class="hljs-built_in">L</span>(j, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>) val.a[i][j] = i == j;<br>            val.a[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = d;<br>            <span class="hljs-built_in">modify_path</span>(<span class="hljs-number">1</span>, x);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, dfn[x]));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线段树</tag>
      
      <tag>树链剖分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】P6021洪水</title>
    <link href="/2023/01/24/P6021%E6%B4%AA%E6%B0%B4/"/>
    <url>/2023/01/24/P6021%E6%B4%AA%E6%B0%B4/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>动态 DP 入门题。</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先考虑不带修怎么做。令 $f_u$ 表示做完以 $u$ 为根子树的最小代价，显然有</p><script type="math/tex; mode=display">f_u = \min(a_u, \sum_v f_v)</script><p>其中 $v$ 为 $u$ 的儿子。</p><p>然后根据动态 DP 的流程，考虑重链剖分，定义 $g_u$ 为 $u$ 所有轻儿子的 $f$ 值之和，特别地，若 $u$ 为叶子节点，$g_u = a_u$，那么现在转移方程变为</p><script type="math/tex; mode=display">f_u = \min(a_u, g_u + f_{\text{son}_u})</script><p>其中 $\text{son}_u$ 为 $u$ 的重儿子。</p><p>依旧是动态 DP 套路，定义广义矩阵乘法 $\text A * \text B = \text C$，满足</p><script type="math/tex; mode=display">\text C_{i, j} = \min_k\{\text A_{i, k} + \text B_{k, j}\}</script><p>那么我们就有转移</p><script type="math/tex; mode=display">\begin{bmatrix}g_u & a_u\\0 & 0\end{bmatrix}*\begin{bmatrix}f_v \\0\end{bmatrix}=\begin{bmatrix}f_u \\0\end{bmatrix}</script><p>不难发现求 $f_u$ 只要把从 $u$ 开始到 $u$ 所在的重链结尾路径上的所有矩阵乘起来即可，直接线段树维护即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> L(i, j, k, l) for(int i = (j); i &lt;= (k); i += (l))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> R(i, j, k, l) for(int i = (j); i &gt;= (k); i -= (l))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> G(i, u) for (int i = h[(u)]; ~i; i = ne[i])</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ld long double</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>, INF = <span class="hljs-number">1e9</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Matrix</span> &#123;<br>    ll a[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>];<br>    <span class="hljs-built_in">Matrix</span>(<span class="hljs-type">int</span> p = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> q = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> y = <span class="hljs-number">0</span>) &#123;a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = p, a[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = q, a[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = x, a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = y;&#125;<br>    Matrix <span class="hljs-keyword">operator</span>*(Matrix b) &#123;<br>        <span class="hljs-function">Matrix <span class="hljs-title">c</span><span class="hljs-params">(INF, INF, INF, INF)</span></span>;<br>        <span class="hljs-built_in">L</span>(k, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) <span class="hljs-built_in">L</span>(i, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) <span class="hljs-built_in">L</span>(j, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) c.a[i][j] = <span class="hljs-built_in">min</span>(c.a[i][j], a[i][k] + b.a[k][j]);<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Sgt</span> &#123;<br>    <span class="hljs-type">int</span> l, r;<br>    Matrix res;<br>&#125; t[N &lt;&lt; <span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> h[N], e[N &lt;&lt; <span class="hljs-number">1</span>], ne[N &lt;&lt; <span class="hljs-number">1</span>], idx;<br><span class="hljs-type">int</span> fa[N], sz[N], son[N];<br><span class="hljs-type">int</span> dfn[N], rk[N], top[N], ed[N], f[N], tt;<br>Matrix val[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> p)</span> </span>&#123;<br>    fa[u] = p, sz[u] = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">G</span>(i, u) &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (v == p) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs1</span>(v, u);<br>        sz[u] += sz[v];<br>        <span class="hljs-keyword">if</span> (sz[v] &gt; sz[son[u]]) son[u] = v;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> t)</span> </span>&#123;<br>    rk[ed[top[u] = t] = dfn[u] = ++tt] = u;<br>    val[u].a[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = f[u] = a[u];<br>    <span class="hljs-type">int</span> tmp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (son[u]) &#123;<br>        <span class="hljs-built_in">dfs2</span>(son[u], t);<br>        tmp += f[son[u]];<br>    &#125;<br>    <span class="hljs-built_in">G</span>(i, u) &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (v == fa[u] || v == son[u]) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs2</span>(v, v);<br>        val[u].a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] += f[v], tmp += f[v];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (sz[u] &gt; <span class="hljs-number">1</span>) f[u] = <span class="hljs-built_in">min</span>(f[u], tmp);<br>    <span class="hljs-keyword">else</span> val[u].a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = a[u];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> </span>&#123;<br>    t[p].res = t[p &lt;&lt; <span class="hljs-number">1</span>].res * t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    t[p].l = l, t[p].r = r;<br>    <span class="hljs-keyword">if</span> (l == r) &#123;<br>        t[p].res = val[rk[l]];<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, mid), <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (t[p].l == t[p].r) &#123;<br>        t[p].res = val[rk[x]];<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (x &lt;= mid) <span class="hljs-built_in">modify</span>(p &lt;&lt; <span class="hljs-number">1</span>, x);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">modify</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, x);<br>    <span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> Matrix <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= t[p].l &amp;&amp; t[p].r &lt;= r) <span class="hljs-keyword">return</span> t[p].res;<br>    <span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (l &gt; mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">if</span> (r &lt;= mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r) * <span class="hljs-built_in">query</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">modify_path</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> w)</span> </span>&#123;<br>    val[u].a[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] += w;<br>    a[u] += w;<br>    <span class="hljs-keyword">if</span> (sz[u] == <span class="hljs-number">1</span>) val[u].a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] += w;<br>    <span class="hljs-keyword">while</span> (u) &#123;<br>        Matrix bef = <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, dfn[top[u]], ed[top[u]]);<br>        <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, dfn[u]);<br>        Matrix aft = <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, dfn[top[u]], ed[top[u]]);<br>        u = fa[top[u]];<br>        val[u].a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] += aft.a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] - bef.a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">L</span>(i, <span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>) a[i] = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">L</span>(_, <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-type">int</span> a = <span class="hljs-built_in">read</span>(), b = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-built_in">add</span>(a, b), <span class="hljs-built_in">add</span>(b, a);<br>    &#125;<br>    <span class="hljs-built_in">dfs1</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">dfs2</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>    <span class="hljs-type">int</span> m = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-type">char</span> op; cin &gt;&gt; op;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;Q&#x27;</span>) &#123;<br>            <span class="hljs-type">int</span> x = <span class="hljs-built_in">read</span>();<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, dfn[x], ed[top[x]]).a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> u = <span class="hljs-built_in">read</span>(), w = <span class="hljs-built_in">read</span>();<br>            <span class="hljs-built_in">modify_path</span>(u, w);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线段树</tag>
      
      <tag>动态规划DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】CF1252K Addition Robot</title>
    <link href="/2023/01/21/CF1252K%20Addition%20Robot/"/>
    <url>/2023/01/21/CF1252K%20Addition%20Robot/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/solution/CF1252K">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第一次做线段树维护矩阵乘法的题目，算是为 ddp 打基础了吧。</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>注意到</p><script type="math/tex; mode=display">\begin{bmatrix}A & B\end{bmatrix}\begin{bmatrix}1 & 0\\1 & 1\end{bmatrix}=\begin{bmatrix}A + B & B\end{bmatrix}</script><script type="math/tex; mode=display">\begin{bmatrix}A & B\end{bmatrix}\begin{bmatrix}1 & 1\\0 & 1\end{bmatrix}=\begin{bmatrix}A & A + B\end{bmatrix}</script><p>所以我们可以用线段树一个区间内矩阵乘法的答案，因为字母类型单一，所以我们可以顺便存一下反转字符后的答案，修改时交换即可，时间复杂度 $O(2^3n\log n)$。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> L(i, j, k, l) for (int i = (j); i &lt;= (k); i += (l))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> R(i, j, k, l) for (int i = (j); i &gt;= (j); i -= (l))</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>, mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Matrix</span> &#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>];<br>    <span class="hljs-built_in">Matrix</span>(<span class="hljs-type">int</span> p = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> q = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> y = <span class="hljs-number">0</span>) &#123;a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = p, a[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = q, a[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = x, a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = y;&#125;<br>    Matrix <span class="hljs-keyword">operator</span>*(Matrix b) &#123;<br>        Matrix c;<br>        <span class="hljs-built_in">L</span>(k, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) <span class="hljs-built_in">L</span>(i, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) <span class="hljs-built_in">L</span>(j, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) c.a[i][j] = (c.a[i][j] + <span class="hljs-number">1ll</span> * a[i][k] * <span class="hljs-number">1ll</span> * b.a[k][j] % mod) % mod;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Sgt</span><br>&#123;<br>    <span class="hljs-type">int</span> l, r, tag;<br>    Matrix res0, res1;<br>&#125; t[N &lt;&lt; <span class="hljs-number">2</span>];<br><span class="hljs-type">char</span> s[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> </span>&#123;<br>    Sgt &amp;u = t[p], &amp;l = t[p &lt;&lt; <span class="hljs-number">1</span>], &amp;r = t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>];<br>    u.res0 = l.res0 * r.res0, u.res1 = l.res1 * r.res1;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (t[p].tag) <span class="hljs-built_in">swap</span>(t[p &lt;&lt; <span class="hljs-number">1</span>].res0, t[p &lt;&lt; <span class="hljs-number">1</span>].res1), t[p &lt;&lt; <span class="hljs-number">1</span>].tag ^= <span class="hljs-number">1</span>, <span class="hljs-built_in">swap</span>(t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].res0, t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].res1), t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].tag ^= <span class="hljs-number">1</span>, t[p].tag = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    t[p].l = l, t[p].r = r;<br>    <span class="hljs-keyword">if</span> (l == r) &#123;<br>        t[p].res0 = <span class="hljs-built_in">Matrix</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        t[p].res1 = <span class="hljs-built_in">Matrix</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (s[l] == <span class="hljs-string">&#x27;B&#x27;</span>)<br>            <span class="hljs-built_in">swap</span>(t[p].res0, t[p].res1);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, mid), <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= t[p].l &amp;&amp; t[p].r &lt;= r) &#123;<br>        <span class="hljs-built_in">swap</span>(t[p].res0, t[p].res1), t[p].tag ^= <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= mid) <span class="hljs-built_in">modify</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">if</span> (r &gt; mid) <span class="hljs-built_in">modify</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> Sgt <span class="hljs-title">merge</span><span class="hljs-params">(Sgt l, Sgt r)</span> </span>&#123;<br>    Sgt u;<br>    u.res0 = l.res0 * r.res0, u.res1 = l.res1 * r.res1;<br>    <span class="hljs-keyword">return</span> u;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> Sgt <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= t[p].l &amp;&amp; t[p].r &lt;= r) <span class="hljs-keyword">return</span> t[p];<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (l &gt; mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">if</span> (r &lt;= mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">merge</span>(<span class="hljs-built_in">query</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r), <span class="hljs-built_in">query</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">read</span>(), q = <span class="hljs-built_in">read</span>();<br>    cin &gt;&gt; s + <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>    <span class="hljs-keyword">while</span> (q--) &#123;<br>        <span class="hljs-type">int</span> op = <span class="hljs-built_in">read</span>(), l = <span class="hljs-built_in">read</span>(), r = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>)<br>            <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, l, r);<br>        <span class="hljs-keyword">else</span> &#123;<br>            Matrix a;<br>            a.a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-built_in">read</span>(), a.a[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-built_in">read</span>();<br>            a = a * <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, l, r).res0;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, a.a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], a.a[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线段树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】SP8372 TSUM</title>
    <link href="/2023/01/19/SP8372%20TSUM/"/>
    <url>/2023/01/19/SP8372%20TSUM/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/SP8372">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第一个多项式题解！</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>多项式乘法。</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>令 $F(x) = \sum_{i=1}^n x^{a_i}$，观察到如果没有 $i &lt; j &lt; k$ 的限制，那么答案就是 $F^3(x)$，所以我们想办法解决掉 $i &lt; j &lt; k$ 的限制。</p><p>首先将 $i &lt; j &lt; k$ 转化为 $i \neq j \neq k$，然后我们将答案除以 $6$，然后考虑 $F^3(x)$ 都算了些什么。显然是算了一遍 $i \neq j \neq k$ 的答案，算了 $3$ 遍 $i = j \neq k \vee i = k \neq j \vee j = k\neq i$ 的答案，然后算了一遍 $i = j = k$ 的答案。所以我们要先减去 $3$ 被中间的情况，即 $3F(x^2)F(x)$，其中 $F(x^2)$ 的意思是强行让一组相等，但这样还不够，我们发现多减了两遍 $i = j = k$ 的答案，所以再加上 $2F(x^3)$ 即可。</p><p>综上，答案即为 $\frac{F^3(x) - 3F(x^2)F(x) + 2F(x^3)}{6}$，直接 $\text{FFT}$ 即可 (注意这题会爆精度，要开 <code>long double</code> )。</p><p>Tips: 输入数据有负数，可以统一加上一个偏移量 $\Delta$，然后统计答案减去 $3\Delta$ 即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> L(i, j, k, l) for(int i = (j); i &lt;= (k); i += (l))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> R(i, j, k, l) for(int i = (j); i &gt;= (k); i -= (l))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ld long double</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> ld PI = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Complex</span> &#123;<br>    ld x, y;<br>    <span class="hljs-built_in">Complex</span>(ld _x = <span class="hljs-number">0</span>, ld _y = <span class="hljs-number">0</span>) &#123;x = _x, y = _y;&#125;<br>    Complex <span class="hljs-keyword">operator</span>+(Complex e) &#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">Complex</span>(x + e.x, y + e.y);&#125;<br>    Complex <span class="hljs-keyword">operator</span>-(Complex e) &#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">Complex</span>(x - e.x, y - e.y);&#125;<br>    Complex <span class="hljs-keyword">operator</span>*(Complex e) &#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">Complex</span>(x * e.x - y * e.y, x * e.y + y * e.x);&#125;<br>&#125; f[N], g[N];<br><span class="hljs-type">int</span> rev[N];<br>ll s1[N], s2[N], s3[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(Complex a[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> flg)</span> </span>&#123;<br>    <span class="hljs-built_in">L</span>(i, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> (i &lt; rev[i])<br>            <span class="hljs-built_in">swap</span>(a[i], a[rev[i]]);<br>    <span class="hljs-built_in">L</span>(mid, <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>, mid) &#123;<br>        <span class="hljs-function">Complex <span class="hljs-title">W</span><span class="hljs-params">(cos(PI / mid), sin(PI / mid) * flg)</span></span>;<br>        <span class="hljs-built_in">L</span>(i, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>, mid &lt;&lt; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-function">Complex <span class="hljs-title">w</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)</span></span>;<br>            <span class="hljs-built_in">L</span>(j, i, i + mid - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) &#123;<br>                Complex x = a[j], y = w * a[j + mid];<br>                a[j] = x + y, a[j + mid] = x - y;<br>                w = w * W;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">FFT</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m, Complex a[], Complex b[])</span> </span>&#123;<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">1</span>, l = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (k &lt;= n + m) k &lt;&lt;= <span class="hljs-number">1</span>, l++;<br>    <span class="hljs-built_in">L</span>(i, <span class="hljs-number">0</span>, k - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) rev[i] = (rev[i &gt;&gt; <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">1</span>) | ((i &amp; <span class="hljs-number">1</span>) &lt;&lt; (l - <span class="hljs-number">1</span>));<br>    <span class="hljs-built_in">fft</span>(a, k, <span class="hljs-number">1</span>), <span class="hljs-built_in">fft</span>(b, k, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">L</span>(i, <span class="hljs-number">0</span>, k - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) a[i] = a[i] * b[i];<br>    <span class="hljs-built_in">fft</span>(a, k, <span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">return</span> k;<br>&#125; <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">read</span>(), Max = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">L</span>(i, <span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>) a[i] = <span class="hljs-built_in">read</span>() + <span class="hljs-number">20000</span>, Max = <span class="hljs-built_in">max</span>(Max, a[i]);<br>    <span class="hljs-built_in">L</span>(i, <span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>) f[a[i]].x++, g[a[i]].x++;<br>    <span class="hljs-type">int</span> k = <span class="hljs-built_in">FFT</span>(Max, Max, f, g);<br>    <span class="hljs-built_in">L</span>(i, <span class="hljs-number">0</span>, <span class="hljs-number">2</span> * Max, <span class="hljs-number">1</span>) f[i].x = (ld)(ll)(f[i].x / k + <span class="hljs-number">0.5</span>);<br>    <span class="hljs-built_in">L</span>(i, <span class="hljs-number">0</span>, <span class="hljs-number">3e5</span>, <span class="hljs-number">1</span>) f[i].y = g[i].x = g[i].y = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">L</span>(i, <span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>) g[a[i]].x++;<br>    k = <span class="hljs-built_in">FFT</span>(<span class="hljs-number">2</span> * Max, Max, f, g);<br>    <span class="hljs-built_in">L</span>(i, <span class="hljs-number">0</span>, <span class="hljs-number">3</span> * Max, <span class="hljs-number">1</span>) s1[i] = (ll)(f[i].x / k + <span class="hljs-number">0.5</span>);<br>    <span class="hljs-built_in">L</span>(i, <span class="hljs-number">0</span>, <span class="hljs-number">3e5</span>, <span class="hljs-number">1</span>) f[i].x = f[i].y = g[i].x = g[i].y = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">L</span>(i, <span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>) f[<span class="hljs-number">2</span> * a[i]].x++, g[a[i]].x++;<br>    k = <span class="hljs-built_in">FFT</span>(<span class="hljs-number">2</span> * Max, Max, f, g);<br>    <span class="hljs-built_in">L</span>(i, <span class="hljs-number">0</span>, <span class="hljs-number">3</span> * Max, <span class="hljs-number">1</span>) s2[i] = (ll)(f[i].x / k + <span class="hljs-number">0.5</span>);<br>    <span class="hljs-built_in">L</span>(i, <span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>) s3[<span class="hljs-number">3</span> * a[i]]++;<br>    <span class="hljs-built_in">L</span>(i, <span class="hljs-number">0</span>, <span class="hljs-number">3</span> * Max, <span class="hljs-number">1</span>) &#123;<br>        ll res = (s1[i] - <span class="hljs-number">3</span> * s2[i] + <span class="hljs-number">2</span> * s3[i]) / <span class="hljs-number">6</span>;<br>        <span class="hljs-keyword">if</span> (res) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d : %lld\n&quot;</span>, i - <span class="hljs-number">60000</span>, res);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>多项式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】ABC285F Substring of Sorted String</title>
    <link href="/2023/01/16/ABC285F/"/>
    <url>/2023/01/16/ABC285F/</url>
    
    <content type="html"><![CDATA[<p><a href="https://atcoder.jp/contests/abc285/tasks/abc285_f">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>写篇题解纪念这道赛时让我心态炸裂的 F。</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先让我们来研究一下什么样的字符串 $A$ 可以作为 $T$ 串的子串。(为了方便说明，设 $A$ 中字典序最小字符的为 $c_1$, 字典序最大的字符为 $c_2$ )。</p><ol><li>字符单调不减，且在 $S$ 内连续(即不存在 $c \in [c_1, c_2], c \in S, c\notin A$)</li><li>除 $c_1, c_2$ 外，其余字符出现次数与 $S$ 中该字符出现次数相等。</li></ol><p>不难发现满足以上两个条件即可判断子串，所以我们可以考虑对每个字符都开一棵线段树，维护它在每个位置是否出现，判断字符单调不减就可以直接通过查询区间和来做到(具体见代码)，而剩下条件也直接查区间和判断即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>(赛时写的，很丑)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Sgt</span> &#123;<br>    <span class="hljs-type">int</span> l, r, sum;<br>&#125; t[<span class="hljs-number">26</span>][N &lt;&lt; <span class="hljs-number">2</span>];<br><span class="hljs-type">char</span> s[N];<br> <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(Sgt t[], <span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> c)</span> </span>&#123;<br>    t[p].l = l, t[p].r = r;<br>    <span class="hljs-keyword">if</span> (l == r) &#123;<br>        t[p].sum = s[l] == c + <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(t, p &lt;&lt; <span class="hljs-number">1</span>, l, mid, c), <span class="hljs-built_in">build</span>(t, p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r, c);<br>    t[p].sum = t[p &lt;&lt; <span class="hljs-number">1</span>].sum + t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(Sgt t[], <span class="hljs-type">int</span> p, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> v)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (t[p].l == t[p].r) &#123;<br>        t[p].sum = v;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (x &lt;= mid) <span class="hljs-built_in">modify</span>(t, p &lt;&lt; <span class="hljs-number">1</span>, x, v);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">modify</span>(t, p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, x, v);<br>    t[p].sum = t[p &lt;&lt; <span class="hljs-number">1</span>].sum + t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(Sgt t[], <span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= t[p].l &amp;&amp; t[p].r &lt;= r) <span class="hljs-keyword">return</span> t[p].sum;<br>    <span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>, res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= mid) res += <span class="hljs-built_in">query</span>(t, p &lt;&lt; <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">if</span> (r &gt; mid) res += <span class="hljs-built_in">query</span>(t, p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    cin &gt;&gt; s + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++)<br>        <span class="hljs-built_in">build</span>(t[i], <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, i);<br>    <span class="hljs-type">int</span> m;<br>    cin &gt;&gt; m;<br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-type">int</span> op;<br>        cin &gt;&gt; op;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-type">int</span> x;<br>            <span class="hljs-type">char</span> c;<br>            cin &gt;&gt; x &gt;&gt; c;<br>            <span class="hljs-built_in">modify</span>(t[s[x] - <span class="hljs-string">&#x27;a&#x27;</span>], <span class="hljs-number">1</span>, x, <span class="hljs-number">0</span>);<br>            <span class="hljs-built_in">modify</span>(t[c - <span class="hljs-string">&#x27;a&#x27;</span>], <span class="hljs-number">1</span>, x, <span class="hljs-number">1</span>);<br>            s[x] = c;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> l, r;<br>            cin &gt;&gt; l &gt;&gt; r;<br>            <span class="hljs-type">bool</span> flg = <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> now = l;<br>            <span class="hljs-type">int</span> firs = <span class="hljs-number">30</span>, last = <span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++)<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">query</span>(t[i], <span class="hljs-number">1</span>, l, r))<br>                    firs = <span class="hljs-built_in">min</span>(firs, i), last = <span class="hljs-built_in">max</span>(last, i);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) &#123;<br>                <span class="hljs-keyword">if</span> (flg) <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">query</span>(t[i], <span class="hljs-number">1</span>, l, r) &amp;&amp; (i &gt;= firs &amp;&amp; i &lt;= last) &amp;&amp; <span class="hljs-built_in">query</span>(t[i], <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n)) flg = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">query</span>(t[i], <span class="hljs-number">1</span>, l, r)) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-type">int</span> cnt1;<br>                <span class="hljs-keyword">if</span> (i == firs || i == last) cnt1 = <span class="hljs-built_in">query</span>(t[i], <span class="hljs-number">1</span>, l, r);<br>                <span class="hljs-keyword">else</span> cnt1 = <span class="hljs-built_in">query</span>(t[i], <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>                <span class="hljs-type">int</span> cnt2 = <span class="hljs-built_in">query</span>(t[i], <span class="hljs-number">1</span>, now, now + cnt1 - <span class="hljs-number">1</span>);<br>                now += cnt1;<br>                <span class="hljs-keyword">if</span> (cnt1 != cnt2) flg = <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-built_in">puts</span>(flg ? <span class="hljs-string">&quot;No&quot;</span> : <span class="hljs-string">&quot;Yes&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>线段树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】CF213E Two Permutations</title>
    <link href="/2023/01/14/CF213E%20Two%20Permutations/"/>
    <url>/2023/01/14/CF213E%20Two%20Permutations/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF213E">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>集训讲的一道高妙 DS。</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>平衡树，序列 Hash</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先子序列并不是连续的一段，不好维护，考虑到给排列 $a$ 每一项都加上 $x$ 后在值域上依旧是连续的一段，所以我们记$pos_{b_i} = i$，那么现在的问题就变成，我们每次从 $pos$ 数组中选一个长度为 $n$ 的子段，然后判断这个子段所对应的子序列是否和 $a_i$ 变化后相同。</p><p>我们考虑用平衡树来维护序列，我们用 $(p, v)$ 来表示一个位置在 $p$，值为 $v$ 的点，然后每次以 $p$ 为关键字插入，然后考虑判断序列相等，这里我们可以用序列 HASH 来快速判断，平衡树维护 Hash 是平凡的，而 $a$ 排列每次 Hash 的增量也是好计算的，由于我们平衡树插入了一个哨兵，序列右移一维，所以在用 $\text{Hash(A)} \times P$ 来判断。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>, P = <span class="hljs-number">1331</span>, INF = <span class="hljs-number">1</span> &lt;&lt;<span class="hljs-number">30</span>;<br>ull p[N], hasha, sump;<br><span class="hljs-type">int</span> pos[N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Splay</span> &#123;<br>    <span class="hljs-type">int</span> s[<span class="hljs-number">2</span>], p, sz, pos;<br>    ull v, sum;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(ull _v, <span class="hljs-type">int</span> _p, <span class="hljs-type">int</span> _pos)</span> </span>&#123;<br>        v = sum = _v, p = _p, pos = _pos, sz = <span class="hljs-number">1</span>;<br>    &#125;<br>&#125; t[N &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-type">int</span> root, tot;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    t[x].sz = t[t[x].s[<span class="hljs-number">0</span>]].sz + t[t[x].s[<span class="hljs-number">1</span>]].sz + <span class="hljs-number">1</span>;<br>    t[x].sum = (t[t[x].s[<span class="hljs-number">0</span>]].sum * P + t[x].v) * p[t[t[x].s[<span class="hljs-number">1</span>]].sz] + t[t[x].s[<span class="hljs-number">1</span>]].sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-type">int</span> y = t[x].p, z = t[y].p, k = t[y].s[<span class="hljs-number">1</span>] == x;<br>    t[z].s[t[z].s[<span class="hljs-number">1</span>] == y] = x, t[x].p = z;<br>    t[y].s[k] = t[x].s[!k], t[t[x].s[!k]].p = y;<br>    t[x].s[!k] = y, t[y].p = x;<br>    <span class="hljs-built_in">pushup</span>(y), <span class="hljs-built_in">pushup</span>(x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">splay</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (t[x].p != k) &#123;<br>        <span class="hljs-type">int</span> y = t[x].p, z = t[y].p;<br>        <span class="hljs-keyword">if</span> (z != k)<br>            <span class="hljs-keyword">if</span> ((t[z].s[<span class="hljs-number">1</span>] == y) ^ (t[y].s[<span class="hljs-number">1</span>] == x)) <span class="hljs-built_in">rotate</span>(x);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">rotate</span>(y);<br>        <span class="hljs-built_in">rotate</span>(x);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!k) root = x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> pos, <span class="hljs-type">int</span> v)</span> </span>&#123;<br>    <span class="hljs-type">int</span> u = root, p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (u) p = u, u = t[u].s[pos &gt; t[u].pos];<br>    u = ++tot;<br>    <span class="hljs-keyword">if</span> (p) t[p].s[pos &gt; t[p].pos] = u;<br>    t[u].<span class="hljs-built_in">init</span>((ull)v, p, pos);<br>    <span class="hljs-built_in">splay</span>(u, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-type">int</span> pos)</span> </span>&#123;<br>    <span class="hljs-type">int</span> u = root;<br>    <span class="hljs-keyword">while</span> (u) &#123;<br>        <span class="hljs-keyword">if</span> (t[u].pos == pos) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (t[u].pos &gt; pos) u = t[u].s[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">else</span> u = t[u].s[<span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-built_in">splay</span>(u, <span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> l = t[u].s[<span class="hljs-number">0</span>], r = t[u].s[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">while</span> (t[l].s[<span class="hljs-number">1</span>]) l = t[l].s[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">while</span> (t[r].s[<span class="hljs-number">0</span>]) r = t[r].s[<span class="hljs-number">0</span>];<br>    <span class="hljs-built_in">splay</span>(l, <span class="hljs-number">0</span>), <span class="hljs-built_in">splay</span>(r, l);<br>    t[r].s[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">pushup</span>(r), <span class="hljs-built_in">pushup</span>(l);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>();<br>    p[<span class="hljs-number">0</span>] = sump = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">insert</span>(-INF, <span class="hljs-number">0</span>), <span class="hljs-built_in">insert</span>(INF, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2e5</span>; i++) p[i] = p[i - <span class="hljs-number">1</span>] * P;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; i++) sump += p[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) hasha = hasha * P + <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) pos[<span class="hljs-built_in">read</span>()] = i;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; i++) <span class="hljs-built_in">insert</span>(pos[i], i);<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &lt;= m; i++) &#123;<br>        <span class="hljs-built_in">insert</span>(pos[i], i);<br>        <span class="hljs-keyword">if</span> (t[root].sum == hasha * P) res++;<br>        hasha += sump;<br>        <span class="hljs-built_in">del</span>(pos[i - n + <span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>平衡树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】CF1108F MST Unification</title>
    <link href="/2023/01/10/CF1108F%20MST%20Unification/"/>
    <url>/2023/01/10/CF1108F%20MST%20Unification/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF1108F">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一种 MST 被出烂的套路。</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>考虑先用 Kruscal 随便建一棵 MST 出来，然后我们考虑一条非树边 $(u, v, w)$ 在什么时候可能会在 MST 中。</p><p>显然地，若连 $(u, v, w)$，那么原来的 MST 上会多一个环，所以要在环上换一条边，由于我们建出来的已经是 MST，所以被换的只可能是 $w$ 最大的那条，所以如果当前边的 $w$ 和 MST 上 $u \rightarrow v$ 的最大边权相等答案就加一，用树剖维护路径边权最大值即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> h[N], e[N &lt;&lt; <span class="hljs-number">1</span>], ne[N &lt;&lt; <span class="hljs-number">1</span>], w[N &lt;&lt; <span class="hljs-number">1</span>], idx;<br><span class="hljs-type">int</span> a[N], b[N], fa[N], dep[N], sz[N], son[N], top[N], dfn[N], tt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    <span class="hljs-type">int</span> x, y, z;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> node &amp;e) <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">return</span> z &lt; e.z;<br>    &#125;<br>&#125; edges[N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">tree</span> &#123;<br>    <span class="hljs-type">int</span> l, r, max;<br>&#125; t[N &lt;&lt; <span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> vis[N], p[N];<br> <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> </span>&#123;<br>    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> p[x] == x ? x : p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> p)</span> </span>&#123;<br>    fa[u] = p, dep[u] = dep[p] + <span class="hljs-number">1</span>, sz[u] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i]) &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (v == p) <span class="hljs-keyword">continue</span>;<br>        a[v] = w[i], <span class="hljs-built_in">dfs1</span>(v, u);<br>        sz[u] += sz[v];<br>        <span class="hljs-keyword">if</span> (sz[v] &gt; sz[son[u]]) son[u] = v;<br>    &#125;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> t)</span> </span>&#123;<br>    top[u] = t, dfn[u] = ++tt, b[tt] = a[u];<br>    <span class="hljs-keyword">if</span> (!son[u]) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">dfs2</span>(son[u], t);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i]) &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (v == fa[u] || v == son[u]) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs2</span>(v, v);<br>    &#125;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    t[p].l = l, t[p].r = r;<br>    <span class="hljs-keyword">if</span> (l == r) &#123;<br>        t[p].max = b[l];<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>    t[p].max = <span class="hljs-built_in">max</span>(t[p &lt;&lt; <span class="hljs-number">1</span>].max, t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].max); <br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= t[p].l &amp;&amp; t[p].r &lt;= r) <span class="hljs-keyword">return</span> t[p].max;<br>    <span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>, res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= mid) res = <span class="hljs-built_in">max</span>(res, <span class="hljs-built_in">query</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r));<br>    <span class="hljs-keyword">if</span> (r &gt; mid) res = <span class="hljs-built_in">max</span>(res, <span class="hljs-built_in">query</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r));<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">query_path</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v)</span> </span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (top[u] != top[v]) &#123;<br>        <span class="hljs-keyword">if</span> (dep[top[u]] &lt; dep[top[v]]) <span class="hljs-built_in">swap</span>(u, v);<br>        res = <span class="hljs-built_in">max</span>(res, <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, dfn[top[u]], dfn[u]));<br>        u = fa[top[u]];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (dep[u] &gt; dep[v]) <span class="hljs-built_in">swap</span>(u, v);<br>    <span class="hljs-keyword">return</span> res = <span class="hljs-built_in">max</span>(res, <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, dfn[u] + <span class="hljs-number">1</span>, dfn[v]));<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> x = <span class="hljs-built_in">read</span>(), y = <span class="hljs-built_in">read</span>(), z = <span class="hljs-built_in">read</span>();<br>        edges[i] = &#123;x, y, z&#125;;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(edges + <span class="hljs-number">1</span>, edges + m + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) p[i] = i;<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> px = <span class="hljs-built_in">find</span>(edges[i].x), py = <span class="hljs-built_in">find</span>(edges[i].y);<br>        <span class="hljs-keyword">if</span> (px == py) <span class="hljs-keyword">continue</span>;<br>        p[px] = py, vis[i] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-built_in">add</span>(edges[i].x, edges[i].y, edges[i].z), <span class="hljs-built_in">add</span>(edges[i].y, edges[i].x, edges[i].z);<br>        <span class="hljs-keyword">if</span> (++k == n - <span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-built_in">dfs1</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">dfs2</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-keyword">if</span> (vis[i]) <span class="hljs-keyword">continue</span>;<br>        res += edges[i].z == <span class="hljs-built_in">query_path</span>(edges[i].x, edges[i].y);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线段树</tag>
      
      <tag>图论</tag>
      
      <tag>树链剖分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】P3278多项式的运算</title>
    <link href="/2023/01/09/P3278%E5%A4%9A%E9%A1%B9%E5%BC%8F%E7%9A%84%E8%BF%90%E7%AE%97/"/>
    <url>/2023/01/09/P3278%E5%A4%9A%E9%A1%B9%E5%BC%8F%E7%9A%84%E8%BF%90%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3278">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>写加调一遍过并且艹到了最优解，纪念一下。</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><code>query</code> 不超过 $10$ 次，直接暴力即可，所以我们主要考虑修改操作。</p><p>考虑用 Splay 维护 $(a_0, a_1, a_2,\ldots)$，然后我们考虑一次操作的实质是什么。</p><p>对于 <code>mul</code> 和 <code>add</code>，打两个 <code>tag</code> 然后先乘后加下放标记即可。</p><p>对于 <code>mulx</code>，手玩发现他会让 $(a<em>L, a</em>{L + 1}, \ldots, a<em>R, a</em>{R + 1}) \rightarrow (0, a<em>L, a_L + 1, \ldots, a</em>{R - 1}, a<em>{R} + a</em>{R + 1})$，发现是一个区间平移加两个单点修改，上 Splay 维护序列即可。</p><p>最后 <code>query</code> 直接按照中序遍历遍历 Splay 计算即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>, mod = <span class="hljs-number">20130426</span>, INF = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    <span class="hljs-type">int</span> s[<span class="hljs-number">2</span>], v, p, sz, mul, add;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> _v, <span class="hljs-type">int</span> _p)</span> </span>&#123;<br>        s[<span class="hljs-number">0</span>] = s[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>, v = _v, p = _p, mul = sz = <span class="hljs-number">1</span>;<br>    &#125;<br>&#125; t[N];<br><span class="hljs-type">int</span> root, tot;<br><span class="hljs-type">int</span> res, now;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    t[x].sz = t[t[x].s[<span class="hljs-number">0</span>]].sz + t[t[x].s[<span class="hljs-number">1</span>]].sz + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushadd</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> v)</span> </span>&#123;<br>    t[x].add = (t[x].add + v) % mod, t[x].v = (t[x].v + v) % mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushmul</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> v)</span> </span>&#123;<br>    t[x].mul = <span class="hljs-number">1ll</span> * t[x].mul * v % mod, t[x].add = <span class="hljs-number">1ll</span> * t[x].add * v % mod, t[x].v = <span class="hljs-number">1ll</span> * t[x].v * v % mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-built_in">pushmul</span>(t[x].s[<span class="hljs-number">0</span>], t[x].mul), <span class="hljs-built_in">pushmul</span>(t[x].s[<span class="hljs-number">1</span>], t[x].mul), t[x].mul = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">pushadd</span>(t[x].s[<span class="hljs-number">0</span>], t[x].add), <span class="hljs-built_in">pushadd</span>(t[x].s[<span class="hljs-number">1</span>], t[x].add), t[x].add = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-type">int</span> y = t[x].p, z = t[y].p, k = t[y].s[<span class="hljs-number">1</span>] == x;<br>    t[z].s[t[z].s[<span class="hljs-number">1</span>] == y] = x, t[x].p = z;<br>    t[y].s[k] = t[x].s[!k], t[t[x].s[!k]].p = y;<br>    t[x].s[!k] = y, t[y].p = x;<br>    <span class="hljs-built_in">pushup</span>(y), <span class="hljs-built_in">pushup</span>(x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">splay</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (t[x].p != k) &#123;<br>        <span class="hljs-type">int</span> y = t[x].p, z = t[y].p;<br>        <span class="hljs-keyword">if</span> (z != k)<br>            <span class="hljs-keyword">if</span> ((t[z].s[<span class="hljs-number">1</span>] == y) ^ (t[y].s[<span class="hljs-number">1</span>] == x)) <span class="hljs-built_in">rotate</span>(x);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">rotate</span>(y);<br>        <span class="hljs-built_in">rotate</span>(x);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!k) root = x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">get_k</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> </span>&#123;<br>    <span class="hljs-type">int</span> u = root;<br>    <span class="hljs-keyword">while</span> (u) &#123;<br>        <span class="hljs-built_in">pushdown</span>(u);<br>        <span class="hljs-keyword">if</span> (t[t[u].s[<span class="hljs-number">0</span>]].sz &gt;= k) u = t[u].s[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (t[t[u].s[<span class="hljs-number">0</span>]].sz + <span class="hljs-number">1</span> == k) <span class="hljs-keyword">return</span> u;<br>        <span class="hljs-keyword">else</span> k -= t[t[u].s[<span class="hljs-number">0</span>]].sz + <span class="hljs-number">1</span>, u = t[u].s[<span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> u;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> p)</span> </span>&#123;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> u = ++tot;<br>    t[u].<span class="hljs-built_in">init</span>(<span class="hljs-number">0</span>, p);<br>    <span class="hljs-keyword">if</span> (l &lt; mid) t[u].s[<span class="hljs-number">0</span>] = <span class="hljs-built_in">build</span>(l, mid - <span class="hljs-number">1</span>, u);<br>    <span class="hljs-keyword">if</span> (r &gt; mid) t[u].s[<span class="hljs-number">1</span>] = <span class="hljs-built_in">build</span>(mid + <span class="hljs-number">1</span>, r, u);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">pushup</span>(u), u;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v)</span> </span>&#123;<br>    <span class="hljs-built_in">pushdown</span>(u);<br>    <span class="hljs-keyword">if</span> (t[u].s[<span class="hljs-number">0</span>]) <span class="hljs-built_in">query</span>(t[u].s[<span class="hljs-number">0</span>], v);<br>    <span class="hljs-keyword">if</span> (now != <span class="hljs-number">-1</span>) res = (res + <span class="hljs-number">1ll</span> * t[u].v * now % mod) % mod, now = <span class="hljs-number">1ll</span> * now * v % mod;<br>    <span class="hljs-keyword">else</span> now = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (t[u].s[<span class="hljs-number">1</span>]) <span class="hljs-built_in">query</span>(t[u].s[<span class="hljs-number">1</span>], v);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> q = <span class="hljs-built_in">read</span>();<br>    root = <span class="hljs-built_in">build</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1e5</span> + <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">while</span> (q--) &#123;<br>        string op; cin &gt;&gt; op;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&quot;mul&quot;</span>) &#123;<br>            <span class="hljs-type">int</span> l = <span class="hljs-built_in">read</span>() + <span class="hljs-number">1</span>, r = <span class="hljs-built_in">read</span>() + <span class="hljs-number">1</span>, v = <span class="hljs-built_in">read</span>();<br>            l = <span class="hljs-built_in">get_k</span>(l), r = <span class="hljs-built_in">get_k</span>(r + <span class="hljs-number">2</span>);<br>            <span class="hljs-built_in">splay</span>(l, <span class="hljs-number">0</span>), <span class="hljs-built_in">splay</span>(r, l);<br>            node &amp;son = t[t[r].s[<span class="hljs-number">0</span>]];<br>            son.v = <span class="hljs-number">1ll</span> * son.v * v % mod, son.mul = <span class="hljs-number">1ll</span> * son.mul * v % mod, son.add = <span class="hljs-number">1ll</span> * son.add * v % mod;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&quot;add&quot;</span>) &#123;<br>            <span class="hljs-type">int</span> l = <span class="hljs-built_in">read</span>() + <span class="hljs-number">1</span>, r = <span class="hljs-built_in">read</span>() + <span class="hljs-number">1</span>, v = <span class="hljs-built_in">read</span>();<br>            l = <span class="hljs-built_in">get_k</span>(l), r = <span class="hljs-built_in">get_k</span>(r + <span class="hljs-number">2</span>);<br>            <span class="hljs-built_in">splay</span>(l, <span class="hljs-number">0</span>), <span class="hljs-built_in">splay</span>(r, l);<br>            node &amp;son = t[t[r].s[<span class="hljs-number">0</span>]];<br>            son.v = (son.v + v) % mod, son.add = (son.add + v) % mod;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&quot;mulx&quot;</span>) &#123;<br>            <span class="hljs-type">int</span> l = <span class="hljs-built_in">read</span>() + <span class="hljs-number">1</span>, r = <span class="hljs-built_in">read</span>() + <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> lp = <span class="hljs-built_in">get_k</span>(r), rp = <span class="hljs-built_in">get_k</span>(r + <span class="hljs-number">2</span>);<br>            <span class="hljs-built_in">splay</span>(lp, <span class="hljs-number">0</span>), <span class="hljs-built_in">splay</span>(rp, lp);<br>            <span class="hljs-type">int</span> k = t[t[rp].s[<span class="hljs-number">0</span>]].v;<br>            t[rp].v += k;<br>            t[rp].s[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>, <span class="hljs-built_in">pushup</span>(rp), <span class="hljs-built_in">pushup</span>(lp);<br>            lp = <span class="hljs-built_in">get_k</span>(l), rp = <span class="hljs-built_in">get_k</span>(l + <span class="hljs-number">1</span>);<br>            <span class="hljs-built_in">splay</span>(lp, <span class="hljs-number">0</span>), <span class="hljs-built_in">splay</span>(rp, lp);<br>            <span class="hljs-type">int</span> u = ++tot;<br>            t[u].<span class="hljs-built_in">init</span>(<span class="hljs-number">0</span>, rp), t[rp].s[<span class="hljs-number">0</span>] = u;<br>            <span class="hljs-built_in">pushup</span>(rp), <span class="hljs-built_in">pushup</span>(lp);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> v = <span class="hljs-built_in">read</span>();<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, (res = <span class="hljs-number">0</span>, now = <span class="hljs-number">-1</span>, <span class="hljs-built_in">query</span>(root, v), res));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>平衡树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】CF766E Mahmoud and a xor trip</title>
    <link href="/2022/12/28/CF766E%20Mahmoud%20and%20a%20xor%20trip/"/>
    <url>/2022/12/28/CF766E%20Mahmoud%20and%20a%20xor%20trip/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF766E">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>题解里面怎么都是树形 DP，显然不适合我这种没有脑子的选手，于是讲一下思维难度低，但是复杂度稍高的点分治做法。</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>点分治</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>考虑统计经过当前分治中心 $u$ 的答案，记 $d<em>v$ 为 $u \rightarrow v$ 上不包括点 $u$ 的所有点的异或和。当处理完 $u$ 的一棵子树后，我们可以对二进制下的每一位分别统计答案，用 $cnt</em>{0/1, i}$ 来表示第 $i$ 位为 $0/1$ 的距离数量，因为我们的 $d_v$ 并不包含 $a_u$，所以我们算贡献时要计算 $d_v \oplus a_u$ 的贡献，不难发现 $d_v \oplus a_u$ 的第 $i$ 位就是桶里面它异或 $1$ 的数量再乘个 $2^i$，我们直接统计即可。注意不要忘记统计路径短点在分治中心的路径和起终点一致的路径。时间复杂度 $O(n\log n\log a)$。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> h[N], e[N &lt;&lt; <span class="hljs-number">1</span>], ne[N &lt;&lt; <span class="hljs-number">1</span>], idx;<br><span class="hljs-type">bool</span> vis[N];<br><span class="hljs-type">int</span> cnt[<span class="hljs-number">2</span>][<span class="hljs-number">30</span>];<br><span class="hljs-type">int</span> d[N], tot;<br>ll res;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">get_size</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (vis[u]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (v == p) <span class="hljs-keyword">continue</span>;<br>        res += <span class="hljs-built_in">get_size</span>(v, u);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">get_root</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> p, <span class="hljs-type">int</span> all, <span class="hljs-type">int</span> &amp;root)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (vis[u]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">1</span>, now = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (v == p) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-type">int</span> k = <span class="hljs-built_in">get_root</span>(v, u, all, root);<br>        now = <span class="hljs-built_in">max</span>(now, k);<br>        sum += k;<br>    &#125;<br>    now = <span class="hljs-built_in">max</span>(now, all - sum);<br>    <span class="hljs-keyword">if</span> (now &lt;= all / <span class="hljs-number">2</span>) root = u;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">get_dist</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> p, <span class="hljs-type">int</span> dist)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (vis[u]) <span class="hljs-keyword">return</span>;<br>    d[++tot] = dist;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (v == p) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">get_dist</span>(v, u, dist ^ a[v]);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (vis[v]) <span class="hljs-keyword">continue</span>;<br>        tot = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">get_dist</span>(v, u, a[v]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= tot; j++)<br>        &#123;<br>            <span class="hljs-type">int</span> tmp = d[j] ^ a[u];<br>            res += tmp;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= <span class="hljs-number">29</span>; k++)<br>                res += (ll)cnt[(tmp &gt;&gt; k &amp; <span class="hljs-number">1</span>) ^ <span class="hljs-number">1</span>][k] * (<span class="hljs-number">1</span> &lt;&lt; k);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= tot; j++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= <span class="hljs-number">29</span>; k++)<br>                cnt[d[j] &gt;&gt; k &amp; <span class="hljs-number">1</span>][k]++;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">29</span>; i++)<br>        cnt[<span class="hljs-number">0</span>][i] = cnt[<span class="hljs-number">1</span>][i] = <span class="hljs-number">0</span>; <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (vis[u]) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">get_root</span>(u, <span class="hljs-number">-1</span>, <span class="hljs-built_in">get_size</span>(u, <span class="hljs-number">-1</span>), u);<br>    vis[u] = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">calc</span>(u);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i]) <span class="hljs-built_in">dfs</span>(e[i]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) a[i] = <span class="hljs-built_in">read</span>(), res += a[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> a = <span class="hljs-built_in">read</span>(), b = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-built_in">add</span>(a, b), <span class="hljs-built_in">add</span>(b, a);<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>点分治</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】SP1825 FTOUR2</title>
    <link href="/2022/12/26/SP1825%20FTOUR2/"/>
    <url>/2022/12/26/SP1825%20FTOUR2/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/SP1825">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>点分治板子。</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>点分治</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>点分治的套路在这里不赘述，主要讲讲如何统计经过当前分治中心 $u$ 的答案。</p><p>首先很套路地统计以 $u$ 为根的子树中每个点到根的距离，我们用一个二元组 $(d<em>v, p_v)$ 表示点 $v$ 到点 $u$ 的距离和路径上的黑点数量(不算点 $u$)，然后对于每个点 $v$，我们要计算的路径最大值即为 $d_v + \max</em>{p_s \le k - p_v - st_u} d_s$，其中 $st_u$ 表示点 $u$ 是否为黑点，这是个前缀 $\max$ 问题，于是直接用树状数组维护即可，因为每次插入的下标 $p_v$ 可能为 $0$，所以给每个下标加上 $1$ 作为偏移量，具体实现见代码。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pii pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, m, k;<br><span class="hljs-type">int</span> h[N], e[N &lt;&lt; <span class="hljs-number">1</span>], ne[N &lt;&lt; <span class="hljs-number">1</span>], w[N &lt;&lt; <span class="hljs-number">1</span>], idx;<br><span class="hljs-type">bool</span> vis[N], st[N];<br>pii d[N];<br><span class="hljs-type">int</span> tr[N], cnt;<br><span class="hljs-type">int</span> tmp[N];<br><span class="hljs-type">int</span> res;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b, ne[idx] = h[a], w[idx] = c, h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">get_size</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (vis[u]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (v == p) <span class="hljs-keyword">continue</span>;<br>        res += <span class="hljs-built_in">get_size</span>(v, u);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">get_root</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> p, <span class="hljs-type">int</span> all, <span class="hljs-type">int</span> &amp;root)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (vis[u]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">1</span>, now = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (v == p) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-type">int</span> k = <span class="hljs-built_in">get_root</span>(v, u, all, root);<br>        now = <span class="hljs-built_in">max</span>(now, k), sum += k;<br>    &#125;<br>    now = <span class="hljs-built_in">max</span>(now, all - sum);<br>    <span class="hljs-keyword">if</span> (now &lt;= all / <span class="hljs-number">2</span>) root = u;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">get_dist</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> p, <span class="hljs-type">int</span> dist, <span class="hljs-type">int</span> black)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (vis[u]) <span class="hljs-keyword">return</span>;<br>    d[++cnt] = &#123;dist, black&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (v == p) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">get_dist</span>(v, u, dist + w[i], black + st[v]);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (; x &lt;= k + <span class="hljs-number">1</span>; x += x &amp; -x) tr[x] = <span class="hljs-built_in">max</span>(tr[x], v);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (; x &lt;= k + <span class="hljs-number">1</span>; x += x &amp; -x) tr[x] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ask</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (; x; x -= x &amp; -x) res = <span class="hljs-built_in">max</span>(res, tr[x]);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> now = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (vis[v]) <span class="hljs-keyword">continue</span>;<br>        cnt = <span class="hljs-number">0</span>, <span class="hljs-built_in">get_dist</span>(v, u, w[i], st[v]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= cnt; j++)<br>            <span class="hljs-keyword">if</span> (d[j].second + st[u] &lt;= k)<br>                res = <span class="hljs-built_in">max</span>(res, d[j].first + <span class="hljs-built_in">ask</span>(k - d[j].second - st[u] + <span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= cnt; j++) tmp[++now] = d[j].second, <span class="hljs-built_in">add</span>(d[j].second + <span class="hljs-number">1</span>, d[j].first);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= now; i++) <span class="hljs-built_in">del</span>(tmp[i] + <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (vis[u]) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">get_root</span>(u, <span class="hljs-number">-1</span>, <span class="hljs-built_in">get_size</span>(u, <span class="hljs-number">-1</span>), u);<br>    vis[u] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-built_in">calc</span>(u);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i]) <span class="hljs-built_in">dfs</span>(e[i]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    n = <span class="hljs-built_in">read</span>(), k = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> x = <span class="hljs-built_in">read</span>();<br>        st[x] = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> a = <span class="hljs-built_in">read</span>(), b = <span class="hljs-built_in">read</span>(), c = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-built_in">add</span>(a, b, c), <span class="hljs-built_in">add</span>(b, a, c);<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>点分治</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】UVA11990 &#39;&#39;Dynamic&#39;&#39; Inversion</title>
    <link href="/2022/12/21/UVA11990%20&#39;&#39;Dynamic&#39;&#39;%20Inversion/"/>
    <url>/2022/12/21/UVA11990%20&#39;&#39;Dynamic&#39;&#39;%20Inversion/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/UVA11990">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>刚学 CDQ 分治的萌新来写篇题解复习一下。</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>考虑先求出全局逆序对个数，然后减去每次修改受影响的逆序对个数。考虑给每个元素三个属性 $p, v, t$，分别表示这个元素的位置，值，删去时间，那我们删去 $a_i$ 受影响的逆序对 $(i, j)$ 需要满足以下条件 $(t_i &lt; t_j \land p_i &lt; p_j \land v_i &gt; v_j) \vee (t_i &lt; t_j \land p_i &gt; p_j \land v_i &lt; v_j)$，所以对前面那个三维偏序做一遍 CDQ，后面那个三维偏序再做一遍 CDQ，把两个的答案加一起即可。</p><p>注意多测清空！！！</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[N], tr[N], pos[N];<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> p, v, t;<br>&#125; q[N];<br><span class="hljs-type">int</span> res[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (; x &lt;= n; x += x &amp; -x) tr[x] += v;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ask</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (; x; x -= x &amp; -x) res += tr[x];<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">cmp1</span><span class="hljs-params">(node i, node j)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> i.t &gt; j.t;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">cmp2</span><span class="hljs-params">(node i, node j)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> i.p &lt; j.p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">cmp3</span><span class="hljs-params">(node i, node j)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> i.p &gt; j.p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">cdq0</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">cdq0</span>(l, mid), <span class="hljs-built_in">cdq0</span>(mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-built_in">sort</span>(q + l, q + mid + <span class="hljs-number">1</span>, cmp2);<br>    <span class="hljs-built_in">sort</span>(q + mid + <span class="hljs-number">1</span>, q + r + <span class="hljs-number">1</span>, cmp2);<br>    <span class="hljs-type">int</span> j = l;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = mid + <span class="hljs-number">1</span>; i &lt;= r; i++)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (q[j].p &lt; q[i].p &amp;&amp; j &lt;= mid) <span class="hljs-built_in">add</span>(q[j].v, <span class="hljs-number">1</span>), j++;<br>        res[q[i].t] += <span class="hljs-built_in">ask</span>(n) - <span class="hljs-built_in">ask</span>(q[i].v);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt; j; i++) <span class="hljs-built_in">add</span>(q[i].v, <span class="hljs-number">-1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">cdq1</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">cdq1</span>(l, mid), <span class="hljs-built_in">cdq1</span>(mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-built_in">sort</span>(q + l, q + mid + <span class="hljs-number">1</span>, cmp3);<br>    <span class="hljs-built_in">sort</span>(q + mid + <span class="hljs-number">1</span>, q + r + <span class="hljs-number">1</span>, cmp3);<br>    <span class="hljs-type">int</span> j = l;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = mid + <span class="hljs-number">1</span>; i &lt;= r; i++)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (q[j].p &gt; q[i].p &amp;&amp; j &lt;= mid) <span class="hljs-built_in">add</span>(q[j].v, <span class="hljs-number">1</span>), j++;<br>        res[q[i].t] += <span class="hljs-built_in">ask</span>(q[i].v - <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt; j; i++) <span class="hljs-built_in">add</span>(q[i].v, <span class="hljs-number">-1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m) != EOF)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(tr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> tr);<br>        <span class="hljs-built_in">memset</span>(q, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> q);<br>        <span class="hljs-built_in">memset</span>(pos, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> pos);<br>        <span class="hljs-built_in">memset</span>(res, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> res);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>            q[i].p = i, q[i].v = a[i], pos[a[i]] = i;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) q[i].t = m + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> x;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>            q[pos[x]].t = i;<br>        &#125;<br>        ll all = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i; i--) <br>            all += <span class="hljs-built_in">ask</span>(a[i] - <span class="hljs-number">1</span>), <span class="hljs-built_in">add</span>(a[i], <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">memset</span>(tr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> tr);<br>        <span class="hljs-built_in">sort</span>(q + <span class="hljs-number">1</span>, q + n + <span class="hljs-number">1</span>, cmp1);<br>        <span class="hljs-built_in">cdq0</span>(<span class="hljs-number">1</span>, n);<br>        <span class="hljs-built_in">memset</span>(tr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> tr);<br>        <span class="hljs-built_in">sort</span>(q + <span class="hljs-number">1</span>, q + n + <span class="hljs-number">1</span>, cmp1);<br>        <span class="hljs-built_in">cdq1</span>(<span class="hljs-number">1</span>, n);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, all);<br>            all -= res[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>CDQ分治</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【随笔】期中考爆炸的反思</title>
    <link href="/2022/12/11/%E6%9C%9F%E4%B8%AD%E8%80%83%E7%88%86%E7%82%B8%E7%9A%84%E5%8F%8D%E6%80%9D/"/>
    <url>/2022/12/11/%E6%9C%9F%E4%B8%AD%E8%80%83%E7%88%86%E7%82%B8%E7%9A%84%E5%8F%8D%E6%80%9D/</url>
    
    <content type="html"><![CDATA[<p>虽然不愿承认自己的失败，但人总是在失败中成长的。或许……期末能翻罢。</p><span id="more"></span><p>出成绩的那刻，看见自己奖学金后一名的排名，我不禁想起了小学老师对我的评价: 太顺了。的确，我的学业生活比一般人更加一帆风顺。在这个卷王遍地的校园，我无疑是最躺，最摆的一个。当他人都辛苦复习，熬夜刷题时，我却在看番、打音游。当他人都在惜时如金，刻苦背诵时，我却将时间花在与同学聊天和看喜欢的女生上。但靠着纯纯的狗运，我在初一从未掉出过 $rk10$，打着全校第一的名号拿了奖学金，我却将着因运气得来的成绩归功于自己的天赋，认为自己的学习方法都是对的，但这次难度较大的期中考试，击碎了我的幻想，使我不得不意识到: 我也是需要努力的。</p><p>网课的生活，也对我的学习造成了巨大的影响。或许是在同学们一声声摆烂的声潮中，我迷失了自我。整个网课期间，我似乎从未完完整整听完一节课，真就以为靠着自己那点脑子和临时抱佛脚的功夫，就能击败自律努力的一两个月的卷王。网课的浪潮退去，我的水平一目了然，加之不想刷题不想复习的心态，我的小四科考得非常的烂，或许在期末的这段日子里，我应该化更多的时间在复习和刷题上，不要被自身的成绩迷惑。</p><p>除开自身的努力因素外，在这次考试中，我的心态也出现了失常。语文考后脑瘫去找同学对答案，发现炸裂后一心想着数学翻盘，在极具紧张的心态下，我差一步写出压轴，甚至忘记检查，计算直接错了 $16$ 分，一向优秀的数学，却成为了拖垮我的稻草。考前老师对我的期望，自身对自己的要求，以及渴望得到褒奖的虚荣心，都使我心态失衡，或许这次失利后，我应放下一切，把精力投入当学习当中。</p><p>我最喜欢的足球解说贺炜曾这样说过: “人生当中成功只是一时的，失败却是主旋律。但是如何面对失败，却把人分成了不同的样子，有的人会被失败击垮，有的人能不断的爬起来继续向前。” 在过往的失败中，我不应沉浸于悲苦中，而应认清真相，继续向前，预祝 wcy 期末翻回年段 $rk1$！</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>whk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】P8511 TEST_68</title>
    <link href="/2022/12/04/P8511%20TEST_68/"/>
    <url>/2022/12/04/P8511%20TEST_68/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P8511">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>某场模拟赛的 T4，赛时开题太晚了导致正解没调出来，赛后稍微改改就过了/kk。下面是赛时思路。</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>异或最大，那肯定是要用一棵 01-Trie 维护。然后我们发现链是好做的，只需要从上到下依次插进 Trie 中，动态维护答案即可。所以我们考虑怎么把一棵树转化为类似链这样好处理的东西。</p><p>观察到很多点的答案都是全局最大值，所以我们考虑全局最大值由 $a_x \oplus a_y$ 得到，显然地，只有 $x$ 到根路径上的点和 $y$ 到根路径上的点取不到 $a_x \oplus a_y$，所以我们单独处理这两条链。</p><p>然后我们考虑 <strong>从下至上</strong> 进行 dfs，每次把链上的点和其他子树中的点插进 Trie 中，实时维护当前最大值。这样每个点最多被插进 Trie 一次，时间复杂度 $O(n\log a)$。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e5</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">65</span>;<br><span class="hljs-type">int</span> fa[N];<br>ll a[N];<br>vector&lt;<span class="hljs-type">int</span>&gt; son[N];<br><span class="hljs-type">int</span> t[N * M][<span class="hljs-number">2</span>], tot;<br>ll ans[N];<br>ll now_ans;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>;<br>        c = <span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(ll x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">63</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        <span class="hljs-type">int</span> c = x &gt;&gt; i &amp; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (!t[p][c]) t[p][c] = ++tot;<br>        p = t[p][c];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">query</span><span class="hljs-params">(ll x)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll res = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">63</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        <span class="hljs-type">int</span> c = x &gt;&gt; i &amp; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (t[p][c ^ <span class="hljs-number">1</span>]) res = res * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, p = t[p][c ^ <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">else</span> res = res * <span class="hljs-number">2</span>, p = t[p][c];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (res &gt; now_ans) now_ans = res;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">insert</span>(a[u]);<br>    <span class="hljs-built_in">query</span>(a[u]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; son[u].<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        <span class="hljs-type">int</span> v = son[u][i];<br>        <span class="hljs-built_in">get</span>(v);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (u == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">dfs</span>(fa[u], u); <br>    ans[u] = now_ans;<br>    <span class="hljs-built_in">insert</span>(a[u]);<br>    <span class="hljs-built_in">query</span>(a[u]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; son[u].<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        <span class="hljs-type">int</span> v = son[u][i];<br>        <span class="hljs-keyword">if</span> (v != p) <span class="hljs-built_in">get</span>(v);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;d.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;d.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br>    <span class="hljs-built_in">memset</span>(ans, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> ans);<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>    &#123;<br>        fa[i] = <span class="hljs-built_in">read</span>();<br>        son[fa[i]].<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;a[i]);<br>        <span class="hljs-built_in">insert</span>(a[i]);<br>    &#125;<br>    ll x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>;<br>    ll res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        ll now = <span class="hljs-built_in">query</span>(a[i]);<br>        <span class="hljs-keyword">if</span> (now &gt; res)<br>        &#123;<br>            res = now;<br>            x = a[i], y = now ^ a[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> px = <span class="hljs-number">0</span>, py = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">if</span> (a[i] == x) px = i;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[i] == y) py = i;<br>    <span class="hljs-built_in">memset</span>(t, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> t), tot = <span class="hljs-number">0</span>, now_ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">dfs</span>(px, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">memset</span>(t, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> t), tot = <span class="hljs-number">0</span>, now_ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">dfs</span>(py, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans[i] &gt;= <span class="hljs-number">0</span> ? ans[i] : res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>Trie</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【笔记】萌萌数据结构乱做</title>
    <link href="/2022/12/03/%E8%90%8C%E8%90%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%B1%E5%81%9A/"/>
    <url>/2022/12/03/%E8%90%8C%E8%90%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%B1%E5%81%9A/</url>
    
    <content type="html"><![CDATA[<p>本文记录了菜狗 wcy 在学习 whk 期间用于放松身心的极简单 DS 题(暂时 AFO，滚回 whk 了)。</p><span id="more"></span><h2 id="Luogu3797"><a href="#Luogu3797" class="headerlink" title="Luogu3797"></a>Luogu3797</h2><p><a href="https://www.luogu.com.cn/problem/P3797">题目传送门</a></p><p>显然线段树，考虑在每个节点维护以下信息:</p><ul><li>$sum$，该区间答案。</li><li>$lp_{0/1}$，该区间最左端 <code>(</code> 或 <code>)</code> 的位置，没有记为 $n + 1$。</li><li>$rp_{0/1}$，该区间最右端 <code>(</code> 或 <code>)</code> 的位置，没有记为 $0$。</li></ul><p>显然我们有 $u.sum = l.sum + r.sum + [l.rp_1 &gt; l.rp_0][r.lp_0 &lt; r.lp_1]$，可以进行 $O(1)$ 转移，查询时直接合并区间信息即可。时间复杂度 $O(n\log n)$。</p><h2 id="Luogu3203-amp-CF13E"><a href="#Luogu3203-amp-CF13E" class="headerlink" title="Luogu3203 &amp; CF13E"></a>Luogu3203 &amp; CF13E</h2><p><a href="https://www.luogu.com.cn/problem/CF13E">题目传送门</a></p><p><a href="https://www.luogu.com.cn/problem/P3203">题目传送门</a></p><p>首先我们对原序列进行分块，块长为 $\sqrt{n}$，然后维护两个东西 $f_i$ 和 $g_i$，分别表示几次跳出块和跳出块后在哪里，从后往前扫一遍可以 $O(n)$ 求。</p><p>对于每个查询操作，我们可以每次暴力跳块 $O(\sqrt{n})$ 求出答案。</p><p>对于每次修改操作，我们直接每次对当前快进行暴力重构，是 $O(\sqrt{n})$ 的。</p><p>CF13E 需要再维护一个 $h_i$，表示跳出块最后一次在哪里。</p><p>时间复杂度 $O(n) - O(\sqrt{n})$。</p><h2 id="CF739C"><a href="#CF739C" class="headerlink" title="CF739C"></a>CF739C</h2><p><a href="https://www.luogu.com.cn/problem/CF739C">题目传送门</a></p><p>思维简单，考验 debug 能力的线段树。</p><p>考虑维护以下信息:</p><ul><li>$lp, rp$，该区间左右端点。</li><li>$lmax, rmax$，以该区间左端点为起始的最长下降段，以该区间右端点为结束的最长上升段。</li><li>$kmax_{0/1}$，以该区间左右端点为起始或结束的最长先升再降子段。</li><li>$tmax$，该区间答案。</li><li>$tag$ 该区间加法懒标记。</li></ul><p>转移和下传懒标记都很平凡，查询直接输出全局 $tmax$ 即可，时间复杂度 $O(n\log n)$。</p><h2 id="1204校内模拟赛-T3"><a href="#1204校内模拟赛-T3" class="headerlink" title="1204校内模拟赛 T3"></a>1204校内模拟赛 T3</h2><p>因为给的是一棵树，所以可以得到 <strong>连通块 = 点数 - 边数</strong>，所以直接求保留边数即可。</p><p>考虑用 $(x, y, z)$ 定义一条边，则这条边保留等价于 $x, y, z \in [l, r]$，但这样变成了三维数点，不好写且复杂度高，所以考虑令 $a = \max(x, y, z), b = \min(x, y, z)$，这样就变为了 $a, b \in [l, r]$，直接二维数点即可，时间复杂度 $O(n\log n)$。</p><h2 id="CF817E"><a href="#CF817E" class="headerlink" title="CF817E"></a>CF817E</h2><p><a href="https://www.luogu.com.cn/problem/CF817E">题目传送门</a></p><p>01-Trie 套路题，前两个操作直接在 Trie 上修改即可，重点在于如何处理查询。</p><p>首先令 $p, l$ 的第 $i$ 为分别为 $p_i, l_i$，那么我们发现当 $l_i = 1$ 时，我们当前位异或上 $p_i$ 即可满足要求，所以可以加上一整个子树的贡献，然后去到另一子树，而当 $l_i = 0$ 时，我们就什么都算不了，只能去到 $p_i$ 这一子树，在 Trie 树上统计答案，时间复杂度 $O(n\log p)$。</p><h2 id="CF1311F"><a href="#CF1311F" class="headerlink" title="CF1311F"></a>CF1311F</h2><p><a href="https://www.luogu.com.cn/problem/CF1311F">题目传送门</a></p><p>注意到若 $x_i &lt; x_j, v_i &gt;v_j$，则 $d(i, j) = 0$，所以问题转化为求</p><script type="math/tex; mode=display">\sum_{i, j, i \neq j}^n [x_i \le x_j][v_i \le v_j](x_j - x_i)</script><p>直接开两个 BIT 搞二维偏序即可，时间复杂度 $O(n\log n)$。</p><h2 id="Luogu4247"><a href="#Luogu4247" class="headerlink" title="Luogu4247"></a>Luogu4247</h2><p><a href="https://www.luogu.com.cn/problem/P4247">题目传送门</a></p><p>一直想做的一道 DS，在数学课上推出来了。</p><p>观察到 $c$ 很小，所以考虑对于每一个 $c$ 都在线段树上记录它的答案，所以我们维护以下信息</p><ul><li>$f_i$，当前区间 $c = i$ 时的答案。</li><li>$tag, rev$，两个标记。</li></ul><p>显然 <code>pushup</code> 是好做的，因为有</p><script type="math/tex; mode=display">u.f_i = \sum_{j + k = i} l.f_j \cdot r.f_k</script><p>然后区间取反也是好写的，只需暴力修改当 $c$ 为奇数时的答案即可。</p><p>所以考虑如何处理区间加，我们不妨从小数据开始考虑，观察到</p><script type="math/tex; mode=display">(a_1 + k)(a_2 +k) + (a_2 + k)(a_3 + k) + (a_1 + k)(a_3 + k) = a_1a_2a_3 + 2k(a_1 + a_2 + a_3) + k^2</script><p>这其实我们用幂和组合数去搞，然后我们稍微推推就可以得到</p><script type="math/tex; mode=display">u.f_i = \sum_j^{i - 1} c^{i - j}\binom{u.r - u.l +1 - j}{i - j}u.f_j</script><p>注意到小的 $f$ 对大的 $f$ 有影响，所以从大到小更新，注意实现需要精细，应预处理 $c$ 的幂而不是快速幂。</p><p>时间复杂度 $O(c^2m\log n)$。</p><h2 id="Luogu3431"><a href="#Luogu3431" class="headerlink" title="Luogu3431"></a>Luogu3431</h2><p><a href="https://www.luogu.com.cn/problem/P3431">题目传送门</a></p><p>第一道在学校做的 OI 题。</p><p>观察到 $k$ 很小，所以进行离散化，注意多加一个车站 $(n, m)$，然后以 $x$ 为第一关键字，$y$ 为第二关键字排序，然后令 $f_i$ 为走到第 $i$ 个车站的最大值，不难得到转移</p><script type="math/tex; mode=display">f_i = \max_{j\in[1, i - 1], y_j \le y_i}\{f_j\} + a_i</script><p>直接做是 $O(n^2)$ 的，所以用线段树类似二维偏序的方式维护前面的东西，可以做到 $O(n\log n)$。</p><h2 id="CF833B"><a href="#CF833B" class="headerlink" title="CF833B"></a>CF833B</h2><p><a href="https://www.luogu.com.cn/problem/CF833B">题目传送门</a></p><p>考虑 $f_{i, j}$ 为将 $[1, j]$ 划分为 $i$ 段的最大值，显然有转移</p><script type="math/tex; mode=display">f_{i, j} = \max_{k \in [1, j]} f_{i - 1, k - 1} + cnt_{k, j}</script><p>其中 $cnt_{i, j}$ 表示区间 $[i, j]$ 的价值。</p><p>不难想到线段树优化，在处理一个新的 $i$ 值时先让线段树继承上一层的 $f$，然后令 $pre_i$ 表示 $a_i$ 上一次出现的位置，这样每次把 $[pre_j + 1, j]$ 中的答案加一，就变成了一个区间加区间最大值问题，可以 $O(nk\log n)$ 解决。</p><h2 id="CF522D-amp-1211校内模拟赛-T2"><a href="#CF522D-amp-1211校内模拟赛-T2" class="headerlink" title="CF522D &amp; 1211校内模拟赛 T2"></a>CF522D &amp; 1211校内模拟赛 T2</h2><p><a href="https://www.luogu.com.cn/problem/CF522D">题目传送门</a></p><p>考虑离线，将询问按右端点进行分组。</p><p>预处理 $pre_i$ 表示 $a_i$ 上一次出现的位置，然后我们考虑用一棵线段树来维护每个位置上的答案。</p><p>考虑插进一个数 $i$ 会对答案造成什么影响，显然我们要将 $pre_i$ 的答案改为 $i - pre_i$，然后处理以 $i$ 为右端点的询问，直接区间最小值即可，时间复杂度 $O(m\log n)$。</p><h2 id="Luogu1975"><a href="#Luogu1975" class="headerlink" title="Luogu1975"></a>Luogu1975</h2><p><a href="https://www.luogu.com.cn/problem/P1975">题目传送门</a></p><p>虽然能暴力，但还是当成树套树板子做的。</p><p>首先离散化然后搞个 BIT 求出全局逆序对，然后考虑交换 $a_l, a_r (l &lt; r)$ 会对全局答案造成那些影响。</p><p>形式化地，记 $f<em>{l, r, x} = \sum</em>{i = l} ^ r [a<em>i &lt; x], g</em>{l, r, x} = \sum_{i = l} ^ r [a_i &gt; x]$，我们首先统计 $(l, r)$ 对全局答案的贡献，手玩一下发现是</p><script type="math/tex; mode=display">g_{l + 1, r - 1, a_l} - f_{l + 1, r - 1, a_l} + f_{l + 1, r - 1, a_r} - g_{l + 1, r - 1, a_r}</script><p>对于 $a_l, a_r$ 这两个数产生的贡献直接比较大小即可，由于带修，所以用线段树套平衡树做到 $O(n\log^2n)$。</p><h2 id="Luogu4093"><a href="#Luogu4093" class="headerlink" title="Luogu4093"></a>Luogu4093</h2><p><a href="https://www.luogu.com.cn/problem/P4093">题目传送门</a></p><p>考虑将数组中的每一个元素的数用一个三元组 $(a, l, r)$，表示该位置的值，可变化的值的最小值，可变化的值的最大值，然后设计状态 $f_i$ 为前 $i$ 个数中选第 $i$ 个数的最长序列长度，显然有转移</p><script type="math/tex; mode=display">f_i = \max_{j \in [1, i) \land r_j \le a_i \land a_j \le l_i} f_j + 1</script><p>直接做是 $O(n^2)$ 的，可以用 CDQ 分治优化到 $O(n\log^2 n)$，注意在使用 CDQ 分治优化 DP 时，一定要先做完左半区间然后按 $id$ 排序做右半区间。</p><h2 id="Luogu3364"><a href="#Luogu3364" class="headerlink" title="Luogu3364"></a>Luogu3364</h2><p><a href="https://www.luogu.com.cn/problem/P3364">题目传送门</a></p><p>首先对原序列按照 $l$ 进行排序。</p><p>设计状态 $f_i$ 表示前 $i$ 个人中选第 $i$ 个的答案，那么依题意有</p><script type="math/tex; mode=display">f_i = \max_{j \in [1, i) \land a_j \le s_i \land w_j \le  a_i}f_j + 1</script><p>用 CDQ 优化至 $O(n\log^2 n)$。</p><h2 id="Luogu4390"><a href="#Luogu4390" class="headerlink" title="Luogu4390"></a>Luogu4390</h2><p><a href="https://www.luogu.com.cn/problem/P4390">题目传送门</a></p><p>记 ${(a, b), (c, d)}$ 为以 $(a, b)$ 为左下角，$(c, d)$ 为右上角的子矩阵的和。</p><p>首先利用二维前缀和思想把 ${(x_1, y_1), (x_2, y_2)}$ 拆成 </p><script type="math/tex; mode=display">\{(1, 1), (x_2, y_2)\} + \{(1, 1), (x_1 -1, y_1 - 1)\} - \{(1, 1), (x_1 - 1, y_2)\} - \{(1, 1), (x_2, y_1 - 1)\}</script><p>那么就变成了求以 $(x, y)$ 为右上角的矩阵的和，是个简单的二维数点，接下来处理带修，给每一个修改或询问加上一个时间戳，这样是一个三维偏序，用 CDQ 解决即可，时间复杂度 $O(n\log^2 n)$。</p><h2 id="Luogu2487"><a href="#Luogu2487" class="headerlink" title="Luogu2487"></a>Luogu2487</h2><p><a href="https://www.luogu.com.cn/problem/P2487">题目传送门</a></p><p>思路一眼，但细节很多，写起来难受的一道题。</p><p>记 $f_i$ 为以 $i$ 结尾的最长子序列，$g_i$ 为这样子序列的个数，那么显然有转移</p><script type="math/tex; mode=display">f_i = \max_{j \in [1, i)\land h_j \ge h_i \land v_j \ge v_i} f_j + 1\\g_i = \sum_{j = 1}^{i - 1} g_j[f_j + 1 = f_i]</script><p>因为我们要计算经过 $i$ 的子序列个数，所以要再从后往前 DP 一遍，这样用 CDQ 分治优化至 $O(n\log^2 n)$。</p><h2 id="1225作业T2"><a href="#1225作业T2" class="headerlink" title="1225作业T2"></a>1225作业T2</h2><p>题目所求式子为</p><script type="math/tex; mode=display">\sum_{l=1}^n\sum_{r=l}^n\sum_{i=l}^r\sum_{j=i+1}^r a_ia_j[a_i > a_j]</script><p>如果我们直接枚举 $[l, r]$，那么时间复杂度至少来到 $O(n^2)$，必然不行，所以我们倒着考虑每一对逆序对 $(i, j)$ 造成的贡献为多少，也就是说有多少个区间包含 $[i, j]$，这个的答案显然为 $i(n - j + 1)$，所以每一对逆序对 $(i, j)$ 造成的贡献为$i(n - j +1)a_ia_j$，然后把式子重写一下就变成</p><script type="math/tex; mode=display">\sum_{i=1}^n\sum_{j=i+1}^n i(n - j + 1)a_ia_j[a_i > a_j] = \sum_{i=1}^n ia_i\sum_{j=i+1}^n(n - j +1)a_j[a_i > a_j]</script><p>直接 BIT 维护逆序对即可，时间复杂度 $O(n\log n)$ (未包括龟速乘复杂度)。</p><h2 id="CF609E"><a href="#CF609E" class="headerlink" title="CF609E"></a>CF609E</h2><p><a href="https://www.luogu.com.cn/problem/CF609E">题目传送门</a></p><p>一个 MST 的经典 trick，我们首先可以建出全局 MST，然后我们考虑加进一条边 $(u, v)$，这样我们会发现这棵树变成了基环树，所以我们需要断掉环上的一条边，由于我们需要权值最小，所以肯定要断掉 MST 上 $u \rightarrow v$ 边的最大值，树链剖分维护即可，时间复杂度 $O(m\log n)$。(注意到由于作者太菜没写 ST 表，所以时间复杂度变为 $O(m\log^2 n)$ )。</p><h2 id="CF1567E"><a href="#CF1567E" class="headerlink" title="CF1567E"></a>CF1567E</h2><p><a href="https://www.luogu.com.cn/problem/CF1567E">题目传送门</a></p><p>考虑线段树，维护以下信息</p><ul><li>$lp, rp$，区间左右端点。</li><li>$lmax, rmax$，区间左/右侧 LIS 长度。</li><li>$sum$，区间答案。</li></ul><p>转移平凡，时间复杂度 $O(n\log n)$。</p><h2 id="ABC283F"><a href="#ABC283F" class="headerlink" title="ABC283F"></a>ABC283F</h2><p><a href="https://www.luogu.com.cn/problem/AT_abc283_f">题目传送门</a></p><p>纪念第一场打到 G 的 ABC<del>（这 F 不比 E 简单多了</del>。</p><p>看到绝对值显然是个分讨，因此我们有</p><script type="math/tex; mode=display">D_i = \min_{i\neq j}(|P_i - P_j| + |i - j|) = \begin{cases}\min(P_i + i - P_j - j) & P_i > P_j \land i > j\\\min(i - P_i - j + P_j) & P_i < P_j \land i > j\\\min(P_i - i + j - P_j) & P_i > P_j \land i < j\\\min(-P_i - i + j + P_j) & P_i < P_j \land i < j\end{cases}</script><p>对着四种情况分别做一遍二维偏序即可，时间复杂度 $O(n\log n)$。</p><h2 id="Luogu8575"><a href="#Luogu8575" class="headerlink" title="Luogu8575"></a>Luogu8575</h2><p><a href="https://www.luogu.com.cn/problem/P8575">题目传送门</a></p><p>子树问题显然用 dfs 序拍到序列上做，我们用 $(Red_i, Blue_i, l_i, r_i)$ 来描述一个点，分别表示红星、蓝星、dfs 序起始点，那么点 $j$ 对点 $i$ 有贡献当且仅当 $Red_j \le Red_i \land Blue_j \le  Blue_i \land l_j \in [l_i, r_i]$，直接 CDQ 治即可，时间复杂度 $O(n\log^2 n)$。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】CF1628E Groceries in Meteor Town</title>
    <link href="/2022/11/21/CF1628E/"/>
    <url>/2022/11/21/CF1628E/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF1628E">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一道思维难度不算大，但代码相对难写的重构树题。</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>kruscal 重构树。</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>求最大边权显然启示我们按边权从小到大去建立 kruscal 重构树，然后求的东西就变为了 $x$ 和所有白色节点的 LCA，于是我们可以先求所有白色节点的 LCA，根据<a href="https://www.luogu.com.cn/problem/CF1062E">这题</a>的经验我们可以开个线段树维护一下所有白色节点中最大和最小的 dfs 序，再加一个区间覆盖的 tag 我们就写完了这题。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">6e5</span> + <span class="hljs-number">10</span>, INF = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> h[N], e[N &lt;&lt; <span class="hljs-number">1</span>], ne[N &lt;&lt; <span class="hljs-number">1</span>], idx;<br><span class="hljs-type">int</span> p[N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">edge</span><br>&#123;<br>    <span class="hljs-type">int</span> x, y, z;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> edge &amp;e) <span class="hljs-type">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> z &lt; e.z;<br>    &#125;<br>&#125; edges[N];<br><span class="hljs-type">int</span> dep[N], f[N][<span class="hljs-number">30</span>], dfn[N], rk[N], tt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">tree</span><br>&#123;<br>    <span class="hljs-type">int</span> l, r, max, max0, min, min0;<br>    <span class="hljs-type">int</span> cover;<br>&#125; t[N &lt;&lt; <span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x != p[x]) p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    dep[u] = dep[p] + <span class="hljs-number">1</span>, f[u][<span class="hljs-number">0</span>] = p, dfn[u] = ++tt, rk[tt] = u;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">25</span>; i++)<br>        f[u][i] = f[f[u][i - <span class="hljs-number">1</span>]][i - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (v == p) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs</span>(v, u);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (dep[x] &lt; dep[y]) <span class="hljs-built_in">swap</span>(x, y);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">25</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-keyword">if</span> (dep[f[x][i]] &gt;= dep[y])<br>            x = f[x][i];<br>    <span class="hljs-keyword">if</span> (x == y) <span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">25</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-keyword">if</span> (f[x][i] != f[y][i])<br>            x = f[x][i], y = f[y][i];<br>    <span class="hljs-keyword">return</span> f[x][<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].max = <span class="hljs-built_in">max</span>(t[p &lt;&lt; <span class="hljs-number">1</span>].max, t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].max);<br>    t[p].min = <span class="hljs-built_in">min</span>(t[p &lt;&lt; <span class="hljs-number">1</span>].min, t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].min);<br>    t[p].max0 = <span class="hljs-built_in">max</span>(t[p &lt;&lt; <span class="hljs-number">1</span>].max0, t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].max0);<br>    t[p].min0 = <span class="hljs-built_in">min</span>(t[p &lt;&lt; <span class="hljs-number">1</span>].min0, t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].min0);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    tree &amp;u = t[p], &amp;l = t[p &lt;&lt; <span class="hljs-number">1</span>], &amp;r = t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span> (!u.cover) <span class="hljs-keyword">return</span>;<br>    l.cover = r.cover = u.cover;<br>    <span class="hljs-keyword">if</span> (u.cover == <span class="hljs-number">1</span>)<br>    &#123;<br>        l.max0 = r.max0 = -INF;<br>        l.min0 = r.min0 = INF;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        l.max0 = l.max, r.max0 = r.max;<br>        l.min0 = l.min, r.min0 = r.min;<br>    &#125;<br>    u.cover = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].l = l;<br>    t[p].r = r;<br>    <span class="hljs-keyword">if</span> (l == r)<br>    &#123;<br>        t[p].max = t[p].min = dfn[l];<br>        t[p].max0 = -INF, t[p].min0 = INF;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">cover</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= t[p].l &amp;&amp; t[p].r &lt;= r)<br>    &#123;<br>        t[p].cover = x;<br>        <span class="hljs-keyword">if</span> (x == <span class="hljs-number">1</span>) t[p].max0 = -INF, t[p].min0 = INF;<br>        <span class="hljs-keyword">else</span> t[p].max0 = t[p].max, t[p].min0 = t[p].min;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= mid) <span class="hljs-built_in">cover</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r, x);<br>    <span class="hljs-keyword">if</span> (r &gt; mid) <span class="hljs-built_in">cover</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r, x);<br>    <span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">read</span>(), q = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> a = <span class="hljs-built_in">read</span>(), b = <span class="hljs-built_in">read</span>(), c = <span class="hljs-built_in">read</span>();<br>        edges[i] = &#123;a, b, c&#125;;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(edges + <span class="hljs-number">1</span>, edges + n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span> * n - <span class="hljs-number">1</span>; i++) p[i] = i;<br>    <span class="hljs-type">int</span> cnt = n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> px = <span class="hljs-built_in">find</span>(edges[i].x), py = <span class="hljs-built_in">find</span>(edges[i].y);<br>        <span class="hljs-keyword">if</span> (px == py) <span class="hljs-keyword">continue</span>;<br>        cnt++;<br>        p[px] = p[py] = cnt;<br>        <span class="hljs-built_in">add</span>(cnt, px);<br>        <span class="hljs-built_in">add</span>(cnt, py);<br>        <span class="hljs-built_in">add</span>(px, cnt);<br>        <span class="hljs-built_in">add</span>(py, cnt);<br>        a[cnt] = edges[i].z;<br>        <span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">2</span> * n - <span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(cnt, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>    <span class="hljs-keyword">while</span> (q--)<br>    &#123;<br>        <span class="hljs-type">int</span> op = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> l = <span class="hljs-built_in">read</span>(), r = <span class="hljs-built_in">read</span>();<br>            <span class="hljs-built_in">cover</span>(<span class="hljs-number">1</span>, l, r, <span class="hljs-number">2</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> l = <span class="hljs-built_in">read</span>(), r = <span class="hljs-built_in">read</span>();<br>            <span class="hljs-built_in">cover</span>(<span class="hljs-number">1</span>, l, r, <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-type">int</span> u = <span class="hljs-built_in">read</span>();<br>            <span class="hljs-keyword">if</span> (t[<span class="hljs-number">1</span>].max0 == -INF &amp;&amp; t[<span class="hljs-number">1</span>].min0 == INF) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-type">int</span> maxx = rk[t[<span class="hljs-number">1</span>].max0], minn = rk[t[<span class="hljs-number">1</span>].min0];<br>                <span class="hljs-keyword">if</span> (maxx == minn &amp;&amp; minn == u) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br>                <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, a[<span class="hljs-built_in">lca</span>(u, <span class="hljs-built_in">lca</span>(maxx, minn))]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>线段树</tag>
      
      <tag>图论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【比赛】20221113模拟赛</title>
    <link href="/2022/11/15/20221113%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    <url>/2022/11/15/20221113%E6%A8%A1%E6%8B%9F%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>过于相信 T4 的大样例导致 $100 \rightarrow 25$，痛失 $300+$。赛时切了 T1 和 T2，T4 改个小错误就过了，我是傻逼。</p><span id="more"></span><h2 id="T1-maya"><a href="#T1-maya" class="headerlink" title="T1 (maya)"></a>T1 (maya)</h2><p>典题，设 $n! = m$，然后变成 $(x - m)(y - m) = m^2$，求出 $m^2$ 的因数个数即可，这里用到阶乘分解的一个经典 trick，即质因子 $p<em>i$ 的指数 $k_i = \sum</em>{j\ge1} \lfloor\dfrac{n}{p_i^j}\rfloor$，最终的结果即 $\prod_i (2k_i +1)$，时间复杂度 $O(n\log n)$。</p><h2 id="T2-chino"><a href="#T2-chino" class="headerlink" title="T2 (chino)"></a>T2 (chino)</h2><p>结论题，由对称性，我们只考虑从一个点 $i$ 向编号大的点，一个很显然的结论是走到编号最大的那个点是最优的，下面我们来证一下这个结论。</p><p>我们只考虑从 $i$ 往编号大的连边，那么我们点 $i$ 显然是不能同时作为最大值和最小值和右边的点匹配，我们设点 $j$ 是点 $i$ 走到的最大编号点，由对称性，我们只考虑当 $a_i$ 为最小值的情况，假设 $i$ 可以达到的另一个点为 $k$，根据题设 $a_k$ 为 $[i, k]$ 的最大值，$a_j$ 为 $[i, j]$ 的最大值，如果 $k$ 以最大值去匹配 $[k, j]$ 之间的点，因为 $a_j &gt;a_k$，那么这个点 $j$ 也能匹配到，如果 $k$ 以最小值去匹配 $[j, n]$ 之间的点，那么由于 $a_i &lt; a_k$，这个点 $i$ 能匹配到，和 $j$ 为最大点矛盾，所以 $k$ 能走到的点 $j$ 都能到，所以 $k$ 就是个没用的点，$a_i$ 为最大值同理。(证明好废话，我是傻逼。)</p><p>有了结论这个题就很 simple 了，我们只需处理每个点能到的最大点即可，首先对于一个点 $i \in [1, n - 1]$，如果 $a<em>{i } &gt; a</em>{i +1}$，那么 $i$ 只能作为最大值，反之就只能做最小值。我们用单调栈处理出 $i$ 右边第一个比 $a_i$ 大的下标和 $i$ 右边第一个比 $a_i$ 小的下标，记为 $p_i$ 和 $q_i$。当 $i$ 为最大值时，能匹配到的最远点即 $[i + 1, p_i - 1]$ 的最小值的下标，当 $i$ 为最小值时，能最远匹配到的点即 $[i + 1, q_i - 1]$ 的最大值的下标，随便来个 RMQ 维护一下即可，时间复杂度 $O(n\log n)$。</p><h2 id="T4-chimame"><a href="#T4-chimame" class="headerlink" title="T4 (chimame)"></a>T4 (chimame)</h2><p>由于做过区间 $\operatorname{mex}$ 的题，所以感觉这道比 T2 简单（大雾。</p><p>做过回滚莫队的我们知道，$\operatorname{mex}$ 在区间缩小时单调不增，所以我们考虑拆成前缀/后缀 $\operatorname{mex}$ 进行计算。</p><p>我们可以先 $O(n)$ 求出 $\operatorname{mex}(1, n), \operatorname{mex}(1, n - 1),\ldots,\operatorname{mex}(1, 1)$，然后我们把这些数扔进线段树里面，然后我们考虑删去 $a_1$ 对后面的答案有什么影响，首先我们处理每个数的下一次出现的下标，记为$next_i$，那么我们删去 $a_1$，显然是不会对 $[next_1, n]$ 的 $\operatorname{mex}$ 值产生影响的，然后我们就可以在线段树上二分出 $[2, next_1 - 1]$ 中第一个 $ &gt; a_1$ 的 $\operatorname{mex}$ 位置，记为 $p$，最后将 $[p, next_1 - 1]$ 这个区间推平成 $a_1$ 即可，然后我们重复这个过程，就变为了一个区间推平区间求和的问题，线段树可以 $O(n\log n)$ 解决。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不要再相信任何比赛的大样例！！！</p>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
      <tag>trick</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】P8844小卡与落叶</title>
    <link href="/2022/11/09/P8844%E5%B0%8F%E5%8D%A1%E4%B8%8E%E8%90%BD%E5%8F%B6/"/>
    <url>/2022/11/09/P8844%E5%B0%8F%E5%8D%A1%E4%B8%8E%E8%90%BD%E5%8F%B6/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P8844">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>提供一个不需要什么脑子，但是相对于难写的线段树合并做法。</p><h4 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h4><p>线段树合并</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>显然对于每个操作 $2$，对它有影响的只有上一个修改操作，所以我们可以把所有操作离线下来，对于每一个操作 $2$，记录一下它上一个操作 $1$ 的深度，然后问题就转化为了求 $u$ 子树中深度 $ \ge x$ 的点有几个。</p><p>然后就是线段树合并的经典套路，我们在每个点以深度为下标建立线段树，进行插入，再通过一次 dfs 向上合并，假设我们现在计算的深度为 $x$，那么答案即为区间 $[x, n]$ 中的和。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pii pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">1e7</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> h[N], e[N &lt;&lt; <span class="hljs-number">1</span>], ne[N &lt;&lt; <span class="hljs-number">1</span>], idx;<br><span class="hljs-type">int</span> dep[N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> lc, rc, sum;<br>&#125; t[M];<br><span class="hljs-type">int</span> root[N], tot;<br><span class="hljs-type">int</span> n, m;<br>vector&lt;pii&gt; q[N];<br><span class="hljs-type">int</span> res[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    dep[u] = dep[p] + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (v == p) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs1</span>(v, u);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].sum = t[t[p].lc].sum + t[t[p].rc].sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!p) p = ++tot;<br>    <span class="hljs-keyword">if</span> (l == r)<br>    &#123;<br>        t[p].sum++;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (x &lt;= mid) <span class="hljs-built_in">insert</span>(t[p].lc, l, mid, x);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">insert</span>(t[p].rc, mid + <span class="hljs-number">1</span>, r, x);<br>    <span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;p, <span class="hljs-type">int</span> &amp;q, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!p) <span class="hljs-keyword">return</span> q;<br>    <span class="hljs-keyword">if</span> (!q) <span class="hljs-keyword">return</span> p;<br>    <span class="hljs-keyword">if</span> (l == r)<br>    &#123;<br>        t[p].sum += t[q].sum;<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    t[p].lc = <span class="hljs-built_in">merge</span>(t[p].lc, t[q].lc, l, mid);<br>    t[p].rc = <span class="hljs-built_in">merge</span>(t[p].rc, t[q].rc, mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-built_in">pushup</span>(p);<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!p || l &gt; R || r &lt; L) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) <span class="hljs-keyword">return</span> t[p].sum;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>, res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (L &lt;= mid) res += <span class="hljs-built_in">query</span>(t[p].lc, l, mid, L, R);<br>    <span class="hljs-keyword">if</span> (R &gt; mid) res += <span class="hljs-built_in">query</span>(t[p].rc, mid + <span class="hljs-number">1</span>, r, L, R);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (v == p) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs2</span>(v, u);<br>        <span class="hljs-built_in">merge</span>(root[u], root[v], <span class="hljs-number">1</span>, n);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; q[u].<span class="hljs-built_in">size</span>(); i++)<br>        res[q[u][i].second] = <span class="hljs-built_in">query</span>(root[u], <span class="hljs-number">1</span>, n, q[u][i].first, n);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> a = <span class="hljs-built_in">read</span>(), b = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-built_in">add</span>(a, b);<br>        <span class="hljs-built_in">add</span>(b, a);<br>    &#125;<br>    <span class="hljs-built_in">dfs1</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-built_in">insert</span>(root[i], <span class="hljs-number">1</span>, n, dep[i]);<br>    <span class="hljs-type">int</span> last_dep = n + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> op = <span class="hljs-built_in">read</span>(), u = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) last_dep = u;<br>        <span class="hljs-keyword">else</span> q[u].<span class="hljs-built_in">push_back</span>(&#123;last_dep, ++cnt&#125;);<br>    &#125;<br>    <span class="hljs-built_in">dfs2</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>线段树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【比赛】ABC276</title>
    <link href="/2022/11/06/ABC276/"/>
    <url>/2022/11/06/ABC276/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>比赛策略巨大失误，连 F 都没来得及看就结束了。</p><span id="more"></span><h2 id="思路-amp-题解"><a href="#思路-amp-题解" class="headerlink" title="思路 &amp; 题解"></a>思路 &amp; 题解</h2><h3 id="A-amp-amp-B"><a href="#A-amp-amp-B" class="headerlink" title="A &amp;&amp; B"></a>A &amp;&amp; B</h3><p>不解释。</p><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p>一开始以为要用康拓展开，但是 $100!$ 太大了很显然是不能的，所以我们可以把原题转换一下，输出比 $A$ 字典序小中字典序最大的排列，那我们就想如何构造这个排列 $B$，首先肯定有一个分界点 $i$，使得 $(A<em>1,\ldots,A</em>{i-1})=(B<em>1,\ldots,B</em>{i-1})$ 因为要让 $B$ 的字典序尽量大，所以我们的 $i$ 也要大，那么什么样的 $i$ 符合条件呢，观察到，如果 $\exists j \in [i +1, n],A_j &lt; A_i$，那么我们就可以通过交换 $A_i, A_j$ 来让字典序变小，然后我们从后往前扫描即可。找到这个位置后，因为我们要字典序最大，所以我们在 $[i + 1, n]$ 中找到 $A_i$ 的前驱，让它和 $A_i$ 换一下位置，随后将剩下的部分排序即可。</p><h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><p>预处理每个数 $2$ 的次数和 $3$ 的次数，记为 $s2<em>i$ 和 $s3_i$，那么显然我们要把每个数的 $2$ 的次数变为 $\min(s2_1,\ldots</em>,s2_n)$，$3$ 的次数同理，然后暴力一下判断是否相等即可。</p><h3 id="E"><a href="#E" class="headerlink" title="E"></a>E</h3><p>容易发现等价题目等价于有没有经过 $S$ 且长度 $\ge 4$ 的环，于是把图建出来跑 e-DCC 缩点即可。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>C 和 D 这种简单题花的时间太多了，下次要先理清思路再开码。</p>]]></content>
    
    
    <categories>
      
      <category>比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
      <tag>trick</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】AT_HHKB2020_E Lamps</title>
    <link href="/2022/11/05/AT-HHKB2020-E%20Lamps/"/>
    <url>/2022/11/05/AT-HHKB2020-E%20Lamps/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/AT_hhkb2020_e">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>暑假集训的一个题，现在看来非常一眼当时竟然不会做，我太菜了。</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>根本没有。</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>枚举所有 $2^k$ 种方案显然是困难的，所以我们考虑每个位置 $(i, j)$ 对答案的贡献。</p><p>根据题意，$(i, j)$ 这个位置在某种摆放方案下能对答案造成贡献当且仅当 $(i, j)$ 被至少一盏灯照到，这是我们就可以想到一个经典的容斥模型，就是 <strong>至少一个 = 全集 - 一个都没有</strong>，在这题中，我们设 $f(i, j)$ 为 $(i, j)$ 对答案的贡献，根据容斥，我们有</p><script type="math/tex; mode=display">f(i, j) = 2^k - g(i, j)</script><p>其中 $g(i, j)$ 为 $(i, j)$ 不能被照到的方案数，然后我们转而求 $g(i, j)$。</p><p>我们预处理 $l<em>{i, j}, r</em>{i, j}, u<em>{i, j}, d</em>{i, j}$，分别表示左侧离 $(i, j)$ 的最近墙的纵坐标，右侧离 $(i, j)$ 的最近墙的纵坐标，上方离 $(i, j)$ 最近墙的横坐标，下方离 $(i, j)$ 最近墙的横坐标，不难发现四个东西我们都可以 $O(nm)$ 预处理，处理完后，我们得到能把 $(i, j)$ 的照亮的格子数量为</p><script type="math/tex; mode=display">p_{i, j} = (j - l_{i, j} - 1) + (r_{i, j} - j - 1) + (i - u_{i, j} - 1) + (d_{i, j} - i - 1) + 1</script><p>然后我们就可以得到 $g(i, j) = 2^{k - p_{i, j}}$，那么最终我们就可以求出 $f(i, j)$ 了，最后对所有合法的 $f(i, j)$ 求和即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2010</span>, mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">char</span> a[N][N];<br><span class="hljs-type">int</span> l[N][N], r[N][N], u[N][N], d[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">qpow</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) res = <span class="hljs-number">1ll</span> * res * a % mod;<br>        a = <span class="hljs-number">1ll</span> * a * a % mod;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">get_mod</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (x % mod + mod) % mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)    <br>            cin &gt;&gt; a[i][j], k += a[i][j] == <span class="hljs-string">&#x27;.&#x27;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>            l[i][j] = a[i][j] == <span class="hljs-string">&#x27;#&#x27;</span> ? j : l[i][j - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>            u[i][j] = a[i][j] == <span class="hljs-string">&#x27;#&#x27;</span> ? i : u[i - <span class="hljs-number">1</span>][j];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) r[i][m + <span class="hljs-number">1</span>] = m + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; i--)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = m; j &gt;= <span class="hljs-number">1</span>; j--)<br>            r[i][j] = a[i][j] == <span class="hljs-string">&#x27;#&#x27;</span> ? j : r[i][j + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) d[n + <span class="hljs-number">1</span>][i] = n + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; i--)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = m; j &gt;= <span class="hljs-number">1</span>; j--)<br>            d[i][j] = a[i][j] == <span class="hljs-string">&#x27;#&#x27;</span> ? i : d[i + <span class="hljs-number">1</span>][j];<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (a[i][j] == <span class="hljs-string">&#x27;#&#x27;</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-type">int</span> p = (j - l[i][j] - <span class="hljs-number">1</span>) + (r[i][j] - j - <span class="hljs-number">1</span>) + (i - u[i][j] - <span class="hljs-number">1</span>) + (d[i][j] - i - <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>            res = (res + <span class="hljs-built_in">get_mod</span>(<span class="hljs-built_in">qpow</span>(<span class="hljs-number">2</span>, k) - <span class="hljs-built_in">qpow</span>(<span class="hljs-number">2</span>, k - p))) % mod;<br>        &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>思维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【笔记】简单计数题乱做</title>
    <link href="/2022/11/03/%E7%AE%80%E5%8D%95%E8%AE%A1%E6%95%B0%E9%A2%98%E4%B9%B1%E5%81%9A/"/>
    <url>/2022/11/03/%E7%AE%80%E5%8D%95%E8%AE%A1%E6%95%B0%E9%A2%98%E4%B9%B1%E5%81%9A/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>偶然发现去年寒假给的计数题题单还没有做，所以补一波题。</p><span id="more"></span><h2 id="CF1462E2-Close-Tuples-hard-version"><a href="#CF1462E2-Close-Tuples-hard-version" class="headerlink" title="CF1462E2 Close Tuples (hard version)"></a>CF1462E2 Close Tuples (hard version)</h2><p><a href="https://www.luogu.com.cn/problem/CF1462E2">题目传送门</a></p><p>观察到极差和数组顺序是无关的，所以题目中子序列的要求其实是假的。</p><p>然后我们把 $a$ 数组排序，对每一个 $i$ 枚举当 $a<em>i$ 为最小值的贡献。观察到当左端点 $i$ 固定时，如果 $j$ 是一个满足条件的右端点，那么 $(i, j)$ 中的点也必定是满足条件的最大值，我们可以在 $a$ 中二分出 $a_i + k$ 的前驱，假设这个前驱的下标为 $j$，那么这个左端点 $i$ 的贡献即为 $\sum</em>{k=1}^{j - i - 1} \binom{k}{m - 2}$ (中间的每个数都可以和点 $i$ 匹配，所以要计算中间每个点的贡献)，预处理组合数的前缀和即可做到预处理 $O(nm)$，查询 $O(n\log n)$。</p><h2 id="CF1442B-Identify-the-Operations"><a href="#CF1442B-Identify-the-Operations" class="headerlink" title="CF1442B Identify the Operations"></a>CF1442B Identify the Operations</h2><p><a href="https://www.luogu.com.cn/problem/CF1442B">题目传送门</a></p><p>对于每一个 $b_i$，我们考虑它被加入进去的过程，显然是分为 $t - 1$ 被删和 $t + 1$ 被删这两种情况，所以答案肯定是 $2$ 的次幂。</p><p>对于每一个 $b_i$，我们考虑删去左边和删去右边的合法性，我们设当前要删去的数为 $x$，那么删去 $x$ 合法当且仅当 $x$ 不存在 $b$ 中或 $x$ 在 $b$ 中出现的更早，最后把所有贡献乘在一起即可，时间复杂度 $O(n)$。</p><h2 id="CF1444B-Divide-and-Sum"><a href="#CF1444B-Divide-and-Sum" class="headerlink" title="CF1444B Divide and Sum"></a>CF1444B Divide and Sum</h2><p><a href="https://www.luogu.com.cn/problem/CF1444B">题目传送门</a></p><p>手玩了几组发现每一个划分的值都是相等的，所以我们不妨来证明一下这个结论。</p><p>结论:每个划分的值都为 $a$ 中较大的 $n$ 个数减去 $a$ 中较小的 $n$ 个数。</p><p>证明过程是轻松的，首先我们看到绝对值符号，考虑分正负进行讨论，然后我们发现结论成立当且仅当不会有在一个部分的数被分为一组，那这个是很显然的，因为根据题设，对于每个 $i$ 来说，$p_i$ 都至多为原序列的第 $i$ 大，而 $q_i$ 都至多为原序列的第 $i$ 小，所以不会出现前文所述的情况，然后因为我们要统计所有贡献，我们乘上一个 $\binom{2n}{n}$ 即可。</p><h2 id="CF1422C-Bargain"><a href="#CF1422C-Bargain" class="headerlink" title="CF1422C Bargain"></a>CF1422C Bargain</h2><p><a href="https://www.luogu.com.cn/problem/CF1422C">题目传送门</a></p><p>考虑 DP，用 $f_i$ 表示 $[1, i]$ 的总价值，转移时进行分类讨论。</p><p>我们令 $k_i$ 表示 $[1, i]$ 拼成的数，然后我们就可以对 $f_i$ 进行转移。</p><ol><li>如果我们删去 $i$，那么此时的价值为 $\sum_{j=1}^{i - 1}k_i$</li><li>如果我们不删去 $i$，那么 $a<em>i$ 肯定会出现在当前结果的末尾，处理完前 $i - 1$ 位时，一共有 $\frac{i(i - 1)}{2}$ 可能的结果，所以价值为 $10f</em>{i-1} + \frac{i(i - 1)}{2}a_i$</li></ol><p>综上，我们得到转移</p><script type="math/tex; mode=display">f_i = \sum_{j=1}^{i-1}k_i + 10f_{i - 1} + \frac{i(i - 1)}{2}a_i</script><p>但我们不难发现我们的 $f_i$ 包含一个都不删的贡献，减去即可，然后我们预处理 $k$ 的前缀和即可做到 $O(n)$。</p><h2 id="CF1420D-Rescue-Nibel"><a href="#CF1420D-Rescue-Nibel" class="headerlink" title="CF1420D Rescue Nibel!"></a>CF1420D Rescue Nibel!</h2><p><a href="https://www.luogu.com.cn/problem/CF1420D">题目传送门</a></p><p>一个朴素的做法是，离散化之后差分一下，统计出覆盖每个位置的线段数量，然后直接组合数统计，但是这样显然是会算重的，为什么呢？显然，对于一个可能的交集，他的贡献被交集中的每个点都算了一遍，那如何解决呢？显然，对于一个可能的交集，我们只选取其中的一个点来计算它的贡献即可，所以我们不难想到只统计每一个点 $x$ 作为交集左端点时的贡献，根据容斥原理，我们可以得到 $x$ 这个点的贡献为</p><script type="math/tex; mode=display">\binom{s}{k} - \binom{s - t}{k}</script><p>其中 $s$ 代表覆盖点 $x$ 的线段数量， $t$ 代表以 $x$ 为左端点的线段数量，然后我们就有了这个 $O(n\log n)$ 做法。</p><h2 id="CF1400D-Zigzags"><a href="#CF1400D-Zigzags" class="headerlink" title="CF1400D Zigzags"></a>CF1400D Zigzags</h2><p><a href="https://www.luogu.com.cn/problem/CF1400D">题目传送门</a></p><p>比较一眼，令 $s_{i, j}$ 为前 $i$ 个数中 $j$ 的出现次数，我们显然枚举中间的两个数，易得答案为</p><script type="math/tex; mode=display">\sum_{i=2}^n\sum_{j=i+1}^n s_{i - 1,a_i}(s_{n,a_i} - s_{j, a_i})</script><p>时间复杂度 $O(n ^ 2)$。</p><h2 id="CF1239D-Dreamoon-Likes-Sequences"><a href="#CF1239D-Dreamoon-Likes-Sequences" class="headerlink" title="CF1239D Dreamoon Likes Sequences"></a>CF1239D Dreamoon Likes Sequences</h2><p><a href="https://www.luogu.com.cn/problem/CF1329B">题目传送门</a></p><p>暑假模拟赛原题，当时推了许久的结论，被 cjw 神仙的 $O(\log^3d)$ DP 但好想的方法薄纱。</p><p>结论，设 $c_1, c_2, \ldots,c_n$ 分别为 $a_1, a_2,\ldots,a_n$ 二进制下的位数，则有 $c_1 &lt; c_2 &lt; \cdots &lt; c_n$。</p><p>证明：首先有 $c<em>1 \le c_2 \le \cdots \le c_n$，所以我们只需证不能取等即可，观察到如果有任意的 $c_i = c</em>{i + 1}$，根据异或的性质，我们必定有 $b<em>i &lt; b</em>{i + 1}$，所以结论成立，那么知道结论后，一位一位算贡献即可，时间复杂度 $O(\log d)$。</p><h2 id="CF1279D-Santa’s-Bot"><a href="#CF1279D-Santa’s-Bot" class="headerlink" title="CF1279D Santa’s Bot"></a>CF1279D Santa’s Bot</h2><p><a href="https://www.luogu.com.cn/problem/CF1279D">题目传送门</a></p><p>依旧是暑假模拟赛原题，比较入门的一道概率题，首先我们考虑怎么算单个 $y \in a_x$ 合法的概率，首先，我们抽到这个 $y$ 的概率为 $\frac{1}{nk_x}$，我们令 $s_x$ 表示含有 $x$ 的集合个数，这时抽到合法的 $z$ 的概率就是 $\frac{s_y}{n}$，然后我们把所有 $y \in a_x$ 的可能全部算一遍即可得到答案为</p><script type="math/tex; mode=display">\sum_{x=1}^n\sum_{y\in a_x} \frac{s_y}{n^2k_x}</script>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】CF1062E Company</title>
    <link href="/2022/11/02/CF1062E%20Company/"/>
    <url>/2022/11/02/CF1062E%20Company/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF1062E">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>感觉是个挺牛逼的 trick，写篇题解记录一下。</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>LCA，线段树</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>观察到这题出现了多个点的 LCA，我们并不是很熟悉，所以尝试对其进行转化。</p><p>接下来就有一个最关键的结论，对于一个点集 $S$，令 $u$ 为 $S$ 中 dfs 序最大的节点， $v$ 为 $S$ 中 dfs 序最小的节点，那么有 $LCA(S) = LCA(u, v)$。</p><p>证明的过程相当简单，我们设这个点集的 $LCA$ 为 $p$，那么显然有 $S \subseteq subtree(p)$，而由 dfs 序的知识得到 $subtree$ 中子节点的 dfs 序都在 $[dfn_p,  dfn_p + size_p - 1]$ 中，所以我们有 $\forall i \in S，dfn_i \in [dfn_p, dfn_p + sisze_p - 1]$，所以说我们如果把 dfs 序排在中间的点忽略，并不会对 $[dfn_p, dfn_p + size_p - 1]$ 这个范围产生影响，所以我们可以得到 LCA 只和 $u, v$ 有关，即 $LCA(S) = LCA(u, v)$。</p><p>知道了这个结论，这道题就变成了一个区间 LCA 的板子，我们可以用各种 RMQ 求出来 $[l, r]$ 中最大/最小的 dfs 序，然后比较一下删去的 LCA 深度，那么这题就做完了。具体做法是，如果当前删掉了点 $x$，那么后来的 LCA 就是 $LCA(LCA(l, x - 1), LCA(x + 1， r))$，区间 LCA 用 线段树或 st表进行维护，我写的是线段树，时间复杂度 $O(m\log^2n)$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> h[N], e[N &lt;&lt; <span class="hljs-number">1</span>], ne[N &lt;&lt; <span class="hljs-number">1</span>], idx;<br><span class="hljs-type">int</span> dep[N], f[N][<span class="hljs-number">25</span>], dfn[N], rk[N], tt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> l, r, max, min, lca;<br>&#125; t[N &lt;&lt; <span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    dep[u] = dep[p] + <span class="hljs-number">1</span>, f[u][<span class="hljs-number">0</span>] = p, dfn[u] = ++tt, rk[tt] = u;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">20</span>; i++)<br>        f[u][i] = f[f[u][i - <span class="hljs-number">1</span>]][i - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (v == p) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs</span>(v, u);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (dep[x] &lt; dep[y]) <span class="hljs-built_in">swap</span>(x, y);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">20</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-keyword">if</span> (dep[f[x][i]] &gt;= dep[y])<br>            x = f[x][i];<br>    <span class="hljs-keyword">if</span> (x == y) <span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">20</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-keyword">if</span> (f[x][i] != f[y][i])<br>            x = f[x][i], y = f[y][i];<br>    <span class="hljs-keyword">return</span> f[x][<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].lca = <span class="hljs-built_in">lca</span>(t[p &lt;&lt; <span class="hljs-number">1</span>].lca, t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].lca);<br>    t[p].max = <span class="hljs-built_in">max</span>(t[p &lt;&lt; <span class="hljs-number">1</span>].max, t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].max);<br>    t[p].min = <span class="hljs-built_in">min</span>(t[p &lt;&lt; <span class="hljs-number">1</span>].min, t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].min);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].l = l, t[p].r = r;<br>    <span class="hljs-keyword">if</span> (l == r)<br>    &#123;<br>        t[p].max = t[p].min = dfn[l];<br>        t[p].lca = l;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">query_lca</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= t[p].l &amp;&amp; t[p].r &lt;= r) <span class="hljs-keyword">return</span> t[p].lca;<br>    <span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (l &gt; mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">query_lca</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">if</span> (r &lt;= mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">query_lca</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">lca</span>(<span class="hljs-built_in">query_lca</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r), <span class="hljs-built_in">query_lca</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">query_max</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= t[p].l &amp;&amp; t[p].r &lt;= r) <span class="hljs-keyword">return</span> t[p].max;<br>    <span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>, res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= mid) res = <span class="hljs-built_in">max</span>(res, <span class="hljs-built_in">query_max</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r));<br>    <span class="hljs-keyword">if</span> (r &gt; mid) res = <span class="hljs-built_in">max</span>(res, <span class="hljs-built_in">query_max</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r));<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">query_min</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= t[p].l &amp;&amp; t[p].r &lt;= r) <span class="hljs-keyword">return</span> t[p].min;<br>    <span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>, res = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= mid) res = <span class="hljs-built_in">min</span>(res, <span class="hljs-built_in">query_min</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r));<br>    <span class="hljs-keyword">if</span> (r &gt; mid) res = <span class="hljs-built_in">min</span>(res, <span class="hljs-built_in">query_min</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r));<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> x = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-built_in">add</span>(x, i);<br>        <span class="hljs-built_in">add</span>(i, x);<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>    <span class="hljs-keyword">while</span> (m--)<br>    &#123;<br>        <span class="hljs-type">int</span> l = <span class="hljs-built_in">read</span>(), r = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-type">int</span> maxx = <span class="hljs-built_in">query_max</span>(<span class="hljs-number">1</span>, l, r), minn = <span class="hljs-built_in">query_min</span>(<span class="hljs-number">1</span>, l, r);<br>        <span class="hljs-type">int</span> lca_max = rk[maxx] == l ? <span class="hljs-built_in">query_lca</span>(<span class="hljs-number">1</span>, l + <span class="hljs-number">1</span>, r) : (rk[maxx] == r ? <span class="hljs-built_in">query_lca</span>(<span class="hljs-number">1</span>, l, r - <span class="hljs-number">1</span>) : <span class="hljs-built_in">lca</span>(<span class="hljs-built_in">query_lca</span>(<span class="hljs-number">1</span>, l, rk[maxx] - <span class="hljs-number">1</span>), <span class="hljs-built_in">query_lca</span>(<span class="hljs-number">1</span>, rk[maxx] + <span class="hljs-number">1</span>, r)));<br>        <span class="hljs-type">int</span> lca_min = rk[minn] == l ? <span class="hljs-built_in">query_lca</span>(<span class="hljs-number">1</span>, l + <span class="hljs-number">1</span>, r) : (rk[minn] == r ? <span class="hljs-built_in">query_lca</span>(<span class="hljs-number">1</span>, l, r - <span class="hljs-number">1</span>) : <span class="hljs-built_in">lca</span>(<span class="hljs-built_in">query_lca</span>(<span class="hljs-number">1</span>, l, rk[minn] - <span class="hljs-number">1</span>), <span class="hljs-built_in">query_lca</span>(<span class="hljs-number">1</span>, rk[minn] + <span class="hljs-number">1</span>, r)));<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, dep[lca_max] &gt; dep[lca_min] ? rk[maxx] : rk[minn], <span class="hljs-built_in">max</span>(dep[lca_max], dep[lca_min]) - <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>线段树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】CF1575I Illusions of the Desert</title>
    <link href="/2022/11/01/CF1575I%20Illusions%20of%20the%20Desert/"/>
    <url>/2022/11/01/CF1575I%20Illusions%20of%20the%20Desert/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF1575I">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个菜狗不知道 $\max(|a_x-a_y|,|a_x+a_y|) = |a_x|+|a_y|$，所以写了一个题解中都没有的巨大难写的线段树做法。</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>树链剖分，线段树。</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>用树链剖分转化为区间问题之后，我们就把问题转化为了求这样一个式子</p><script type="math/tex; mode=display">\sum_{i=l + 1}^r \max(|a_i-a_{i-1}|,|a_i+a_{i-1}|)</script><p>并且支持单点修改。</p><p>考虑线段树，我们维护 $3$ 个值 $la, ra, sum$，分别表示当前区间的左端点，右端点和答案。依照定义可以这样从子节点转移给父节点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].la = t[p &lt;&lt; <span class="hljs-number">1</span>].la;<br>    t[p].ra = t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].ra;<br>    t[p].sum = t[p &lt;&lt; <span class="hljs-number">1</span>].sum + t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum + <span class="hljs-built_in">max</span>(<span class="hljs-built_in">abs</span>(t[p &lt;&lt; <span class="hljs-number">1</span>].ra - t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].la), <span class="hljs-built_in">abs</span>(t[p &lt;&lt; <span class="hljs-number">1</span>].ra + t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].la));<br>&#125;<br></code></pre></td></tr></table></figure><p>然后查询的时候就把左右区间的答案全部合并起来，树上查询也如法炮制，那么我们就用一种巨大难写的线段树通过了本题。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[N], b[N];<br><span class="hljs-type">int</span> h[N], e[N], ne[N], idx;<br><span class="hljs-type">int</span> fa[N], dep[N], son[N], sz[N], top[N], dfn[N], tt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> l, r, la, ra;<br>    ll sum;<br>    <span class="hljs-built_in">node</span>() &#123;l = r = la = ra = sum = <span class="hljs-number">0</span>;&#125;<br>&#125; t[N &lt;&lt; <span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    fa[u] = p, dep[u] = dep[p] + <span class="hljs-number">1</span>, sz[u] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (v == p) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs1</span>(v, u);<br>        sz[u] += sz[v];<br>        <span class="hljs-keyword">if</span> (sz[son[u]] &lt; sz[v]) son[u] = v;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    top[u] = t, dfn[u] = ++tt, b[tt] = a[u];<br>    <span class="hljs-keyword">if</span> (!son[u]) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">dfs2</span>(son[u], t);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (v == fa[u] || v == son[u]) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs2</span>(v, v);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].la = t[p &lt;&lt; <span class="hljs-number">1</span>].la;<br>    t[p].ra = t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].ra;<br>    t[p].sum = t[p &lt;&lt; <span class="hljs-number">1</span>].sum + t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum + <span class="hljs-built_in">max</span>(<span class="hljs-built_in">abs</span>(t[p &lt;&lt; <span class="hljs-number">1</span>].ra - t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].la), <span class="hljs-built_in">abs</span>(t[p &lt;&lt; <span class="hljs-number">1</span>].ra + t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].la));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].l = l;<br>    t[p].r = r;<br>    <span class="hljs-keyword">if</span> (l == r)<br>    &#123;<br>        t[p].la = t[p].ra = b[l];<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (t[p].l == t[p].r)<br>    &#123;<br>        t[p].la = t[p].ra = v;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (x &lt;= mid) <span class="hljs-built_in">modify</span>(p &lt;&lt; <span class="hljs-number">1</span>, x, v);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">modify</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, x, v);<br>    <span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> node <span class="hljs-title">merge</span><span class="hljs-params">(node l, node r)</span></span><br><span class="hljs-function"></span>&#123;<br>    node u;<br>    u.la = l.la, u.ra = r.ra;<br>    u.sum = l.sum + r.sum + <span class="hljs-built_in">max</span>(<span class="hljs-built_in">abs</span>(l.ra - r.la), <span class="hljs-built_in">abs</span>(l.ra + r.la));<br>    <span class="hljs-keyword">return</span> u;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> node <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= t[p].l &amp;&amp; t[p].r &lt;= r) <span class="hljs-keyword">return</span> t[p];<br>    <span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (l &gt; mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">if</span> (r &lt;= mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">merge</span>(<span class="hljs-built_in">query</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r), <span class="hljs-built_in">query</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">query_path</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (top[u] != top[v])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (dep[top[u]] &lt; dep[top[v]]) <span class="hljs-built_in">swap</span>(u, v);<br>        res += <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, dfn[top[u]], dfn[u]).sum;<br>        res += <span class="hljs-built_in">max</span>(<span class="hljs-built_in">abs</span>(a[top[u]] - a[fa[top[u]]]), <span class="hljs-built_in">abs</span>(a[top[u]] + a[fa[top[u]]]));<br>        u = fa[top[u]];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (dep[u] &gt; dep[v]) <span class="hljs-built_in">swap</span>(u, v);<br>    res += <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, dfn[u], dfn[v]).sum;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">read</span>(), q = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) a[i] = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> a = <span class="hljs-built_in">read</span>(), b = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-built_in">add</span>(a, b);<br>        <span class="hljs-built_in">add</span>(b, a);<br>    &#125;<br>    <span class="hljs-built_in">dfs1</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">dfs2</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>    <span class="hljs-keyword">while</span> (q--)<br>    &#123;<br>        <span class="hljs-type">int</span> op = <span class="hljs-built_in">read</span>(), u = <span class="hljs-built_in">read</span>(), v = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, dfn[u], v), a[u] = v;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-built_in">query_path</span>(u, v));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>线段树</tag>
      
      <tag>树链剖分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【游记】CSP2022 VP寄</title>
    <link href="/2022/10/31/CSP2022%20VP%E5%AF%84/"/>
    <url>/2022/10/31/CSP2022%20VP%E5%AF%84/</url>
    
    <content type="html"><![CDATA[<h2 id="Day"><a href="#Day" class="headerlink" title="Day -?"></a>Day -?</h2><p>FZ因不可抗力取消了 CSP，只能线上 VP。</p><span id="more"></span><h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2><p>上午打 J 组，粗略看了一下四个题，T1 快速幂板子，T2 简单数学，T3 模拟，T4 应该是个 DP，然后就开始码，五分钟把 T1 和 T2 写完了，然后明智地认为 T4 比 T3 好写，就跑去写 T4。</p><p>T4 看了一眼题目发现欧几里得距离完全是晃人的，其实就是个曼哈顿距离，然后发现建个 DAG 然后 DP 似乎是 $O(n^2k)$ 的，于是开始码，十分钟过掉了大样例。</p><p>然后开始打 T3，发现 <code>|</code> 和 <code>&amp;</code> 的优先级不会处理，然后发现不会处理这玩意也有 $80$ 分，于是愉快地开始码，很快啊，码完了，写的模拟应该问题不大。</p><p>估分：$100 + 100 + 80 + 100 = 380$</p><p>民间数据: $100 + 100 + 80 + 100 = 380$</p><p>下午去打了 S 组，发现似乎是图论专场，看了一眼题目，T1 神秘最短路，T2 一眼 DS，T3 神秘东西没看，T4 我不会的链上 DP。</p><p>看了四个题感觉 T2 是比 T1 简单的，于是开始想，然后发现对答案有影响的只有最大正数，最小正数，最大负数，最小负数，再分类一个 $0$。于是就变成了一个 RMQ 的板子，然后决定写两棵线段树，每棵维护 $5$ 个 $tag$，然后发现算答案的时候最多带一个 $25$ 的常数，当时没怎么管，写完发现第二个样例没过，手玩了一下发现不对劲，回去看题原来 Q 是可以看到 L 的选择的，改了一下，过了所有样例。</p><p>然后回看 T1，既然是无权图第一步显然是用 bfs 求个全源最短路，这一步是 $O(n^2)$ 的，然后如果最暴力枚举四个点的话肯定会炸，所以考虑枚举两个点然后 $O(1)$ 算出剩下的答案，发现第一个点和第四个点都要在 $1$ 号的可达范围，这个性质是很好的，然后我们考虑把所有在 $1$ 号点可达范围的标记一下，预处理一下前三大，然后就是 $O(n^2)$ 的了，写完一发过了大样例。</p><p>T3 太神秘了先跳，写了T4 $k = 1$ 的 LCA 板子之后又跑回来看，发现条件等价于每个点的出度都为 $1$，又发现 $O(nq)$ 的暴力有 $40$，那赶紧码，然后又打了一个 $t$ 为奇数的分，然后就结束了。</p><p>估分：$100 + 100 + 50 + 16 = 266$</p><p>民间数据：$100 + 100 + 40 + 16 = 256$，T3 还挂分了。</p><p>打完之后发现自己被薄纱了，一车人上了 $300$ 甚至 AK，赛后发现 T4 如果每次把链拿出来 DP 就有 $68$ 分，再次证明了我是傻逼的事实。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>随着 CSP 的结束，也意味着我学 OI 也有一年了，不管考得再差，也总是这一年的成果，希望明年不要像现在这么菜。</p>]]></content>
    
    
    <categories>
      
      <category>游记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>trick</tag>
      
      <tag>游记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】SP26017 GCDMAT</title>
    <link href="/2022/10/27/SP26017%20GCDMAT/"/>
    <url>/2022/10/27/SP26017%20GCDMAT/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/SP26017">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>菜狗的第一道莫反题解。</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>莫比乌斯反演</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>题目中和式的下界并不是从 $1$ 开始，所以我们尝试对其进行转化。</p><p>令</p><script type="math/tex; mode=display">f(n, m) = \sum_{i=1}^n\sum_{j=1}^m \gcd(i,j)</script><p>那我们稍微容斥一下可得</p><script type="math/tex; mode=display">res = f(i2, j2) - f(i1 - 1, j2) - f(i2, j1 - 1) + f(i1 - 1, j1- 1)</script><p>所以我们主要求出 $f(n, m)$ 即可(以下默认 $n &lt; m$ )</p><p>首先是一些套路性操作</p><script type="math/tex; mode=display">\begin{aligned}&\; \; \; \; \; \sum_{i=1}^n\sum_{j=1}^m \gcd(i, j) \\&= \sum_{k=1}^n\sum_{i=1}^{n}\sum_{j=1}^mk[\gcd(i, j) = k] \\ &= \sum_{k=1}^n\sum_{i=1}^{\lfloor\frac{n}{k}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{k}\rfloor}k[\gcd(i, j) = 1] \\&= \sum_{k=1}^n\sum_{i=1}^{\lfloor\frac{n}{k}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{k}\rfloor}k\sum_d\mu(d)[d | \gcd(i, j)]\\&= \sum_{k=1}^nk\sum_{d=1}^{\lfloor\frac{n}{k}\rfloor}\mu(d)\lfloor\frac{n}{kd}\rfloor\lfloor\frac{m}{kd}\rfloor\end{aligned}</script><p>推到这里，我们考虑用整除分块处理最右边那一堆，就可以做到 $O(Tn\sqrt{n})$，但是写一发交上去 T 了，所以不难想到一个常见的优化方式。</p><p>我们令 $T = kd$，那么就有</p><script type="math/tex; mode=display">\begin{aligned}&\; \; \; \; \; \sum_{k=1}^nk\sum_{d=1}^{\lfloor\frac{n}{k}\rfloor}\mu(d)\lfloor\frac{n}{kd}\rfloor\lfloor\frac{m}{kd}\rfloor \\&= \sum_{k=1}^nk\sum_{d=1}^{\lfloor\frac{n}{k}\rfloor}\mu(\frac{T}{k})\lfloor\frac{n}{T}\rfloor\lfloor\frac{m}{T}\rfloor \\&= \sum_{T=1}^n\lfloor\frac{n}{T}\rfloor\lfloor\frac{m}{T}\rfloor\sum_{k}[k |T]k\mu(\frac{T}{k})\end{aligned}</script><p>然后我们不难发现第二个和式可以在预处理时做掉，具体做法是给每一个 $i$ 的倍数都加上对应值，然后我们就可以做到 $O(T\sqrt{n})$ 了。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e4</span> + <span class="hljs-number">10</span>, mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> mu[N], primes[N], v[N], cnt, f[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1ll</span> * x * y % mod;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    mu[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">50000</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!v[i]) primes[++cnt] = i, mu[i] = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= cnt &amp;&amp; primes[j] &lt;= <span class="hljs-number">50000</span> / i; j++)<br>        &#123;<br>            v[i * primes[j]] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>            mu[i * primes[j]] = -mu[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">50000</span>; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= <span class="hljs-number">50000</span>; j += i)<br>            f[j] = (f[j] + <span class="hljs-built_in">mul</span>(i, mu[j / i])) % mod;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">50000</span>; i++) f[i] = (f[i] + f[i - <span class="hljs-number">1</span>]) % mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">get_mod</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (x % mod + mod) % mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (n &gt; m) <span class="hljs-built_in">swap</span>(n, m);<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r; l &lt;= n; l = r + <span class="hljs-number">1</span>)<br>    &#123;<br>        r = <span class="hljs-built_in">min</span>(n / (n / l), m / (m / l));<br>        res = (res + <span class="hljs-built_in">mul</span>(<span class="hljs-built_in">mul</span>(n / l, m / l), <span class="hljs-built_in">get_mod</span>(f[r] - f[l - <span class="hljs-number">1</span>]))) % mod;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-type">int</span> t = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-type">int</span> l1 = <span class="hljs-built_in">read</span>(), l2 = <span class="hljs-built_in">read</span>(), r1 = <span class="hljs-built_in">read</span>(), r2 = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">get_mod</span>(<span class="hljs-built_in">solve</span>(r1, r2) - <span class="hljs-built_in">solve</span>(l1 - <span class="hljs-number">1</span>, r2) - <span class="hljs-built_in">solve</span>(r1, l2 - <span class="hljs-number">1</span>) + <span class="hljs-built_in">solve</span>(l1 - <span class="hljs-number">1</span>, l2 - <span class="hljs-number">1</span>)));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>莫比乌斯反演</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】UVA12470Tribonacci</title>
    <link href="/2022/10/22/UVA12470Tribonacci/"/>
    <url>/2022/10/22/UVA12470Tribonacci/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/UVA12470">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>水题解</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>矩阵乘法。</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>暴力 $O(n)$ 是必然超时的，所以使用矩阵乘法将递推优化至 $O(\log n)$。</p><p>我们设数列的第 $n$ 项为 $f_n$，那么我们不难发现</p><script type="math/tex; mode=display">\begin{bmatrix}f_i & f_{i+1} & f_{i + 2}\end{bmatrix}\begin{bmatrix}0 & 0 &1\\1 & 0 & 1\\0 & 1 & 1\end{bmatrix}=\begin{bmatrix}f_{i+1} &f_{i+2} &f_{i+3}\end{bmatrix}</script><p>所以直接矩阵快速幂即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">9</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">matrix</span><br>&#123;<br>    ll a[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>];<br>    <span class="hljs-built_in">matrix</span>() &#123;<span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> a);&#125;<br>    matrix <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> matrix &amp;b) <span class="hljs-type">const</span><br>    &#123;<br>        matrix c;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">3</span>; i++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">3</span>; j++)<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= <span class="hljs-number">3</span>; k++)<br>                    c.a[i][j] = (c.a[i][j] + a[i][k] * b.a[k][j]) % mod;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y; <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll n = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">while</span> (n)<br>    &#123;<br>        matrix A;<br>        A.a[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = A.a[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = A.a[<span class="hljs-number">3</span>][<span class="hljs-number">1</span>] = A.a[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = A.a[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>] = <span class="hljs-number">1</span>; <br>        matrix res;<br>        res.a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = res.a[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (n)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (n &amp; <span class="hljs-number">1</span>) res = res * A;<br>            A = A * A;<br>            n &gt;&gt;= <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, res.a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]);<br>        n = <span class="hljs-built_in">read</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>矩阵乘法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【比赛】20221020模拟赛</title>
    <link href="/2022/10/20/20221020%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    <url>/2022/10/20/20221020%E6%A8%A1%E6%8B%9F%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一场 TG 模拟赛，VP 打的，最终 $100 + 100 + 0 + 0 = 200$，看 sol 发现一道正解都没有。</p><span id="more"></span><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><blockquote><p>想了 30min 感觉很不可做先写了 T2 再来写的，然后发现少看一个条件，wssb。</p></blockquote><p>我们考虑圆上一条连接 $l, r (l &lt;r)$ 的线段，观察发现这条线段把圆上 $2n$ 个点(不包括 $l, r$ ) 分为两个部分，一个部分的点都在 $(l, r)$ 中，而另外一部分则不在，因为要有交点所以肯定线段的两点分别在两个部分，所以统计区间出现次数为 $1$ 的数的个数即可，不难发现是个莫队板子，最后答案除以 $2$。时间复杂度 $O(n\sqrt{n})$，被树状数组 $O(n\log n)$ 吊打。</p><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><p>默认 $V$ 为值域大小。思维量比较低的一道 DS 题，不难发现当 $n \le 10^7$ 的时候这题差分加值域离散化再加值域分块即可以做到 $O(q\sqrt{V})$，所以剩下 $n \le 10^9$ 的部分肯定是加上序列上的离散化。</p><p>然后我们考虑怎样进行合适的离散化，记 $x<em>i$ 表示离散化后编号为 $i$ 的点，那么我们不难发现在原序列中 $(x_i,x</em>{i+1})$ 中点的值都相同，所以这其实提示我们以下这一种做法：</p><p>首先，我们往离散化后数组每相邻两个数之间就塞一个点，代表区间 $(x<em>i,x</em>{i+1})$ 的值，然后再给每个点分配一个点权 $v<em>i$，如果这个离散化后的点代表的是原序列上的点，那么点权为 $1$，若代表的是区间，那么点权为 $x</em>{i + 1} - x_i - 1$。然后我们发现这种离散化正好把原序列上的信息映射到了新序列上，再对值域进行离散化然后按点权插入块中值域分块即可做到 $O(q\sqrt{V})$。正解是带 $\log$ 的，但我并不会。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>好好看题！！！</p>]]></content>
    
    
    <categories>
      
      <category>比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
      <tag>trick</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【比赛】20221016模拟赛</title>
    <link href="/2022/10/16/20221016%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    <url>/2022/10/16/20221016%E6%A8%A1%E6%8B%9F%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于太菜，只能在PJ组混着，估分 $100 + 100 + 100 + 100 = 400$，实际 T3 写正解但写挂 $100 + 100 + 81 + 100 = 381$ 大寄特寄。</p><span id="more"></span><h2 id="思路-amp-amp-题解"><a href="#思路-amp-amp-题解" class="headerlink" title="思路 &amp;&amp; 题解"></a>思路 &amp;&amp; 题解</h2><p>进场开 T1，看到题感觉要写高精，非常恐怖，思考了几秒发现不用，那就是萌萌题，略。</p><p>搞完 T1 去开 T2，观察到 $A$ 数组的顺序和最终答案无关，果断 sort 一下，然后我们要让最终的极差最小，那么就肯定是把小的增大，大的减小，然后发现排序之后单点加和区间加没什么区别，所以我们可以枚举 $i$ ，让 $[1, i]$ 的数全部加 $k$，$[i + 1, n]$ 的数全部减 $k$，那么极差就是 $max(a<em>n - k, a_i + k) - min(a</em>{i +1} - k, a_1 + k)$，所有答案取 $min$ 即可，时间复杂度 $O(n)$ 。</p><p>T3看到数据范围感觉是个 $O(n^3)$ 的 dp，于是我们设 $f[i][j]$ 表示当前总和为 $i$，有 $j$ 条边边权 $\ge d$ 的方案数，转移非常显然，这样是 $O(n^3)$ 的，然后写的时候发现枚举 $j$ 很傻，于是改状态为 $f[i][0/1]$ 表示当前总和为 $i$，否/是 合法的方案数，转移也很显然，这样就是 $O(n ^ 2)$ 的，但是写挂了，可能是取模锅了，赛后发现是三个 int 加起来爆 int 了，我是傻逼。</p><p>T4看一眼觉得是国庆D1T1的弱化版加上三次二分，首先我们令 $f(x)$ 为方程 $i + j + k = x\ \ i,j,k\in[1,n]$ 解的个数，我们不难用容斥求出 $f(x)$ 然后我们搞个前缀和，记 $s[i] = \sum_{j = 1}^{i} f(j)$，然后二分一下就可以求出 $i + j + k$，第一次二分后我们同理可以二分出 $i$ 和 $j$，然后就写完了，时间复杂度 $O(n)$ 。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这种比赛都 AK 不了，我是傻逼。</p>]]></content>
    
    
    <categories>
      
      <category>比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
      <tag>trick</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】P7834 Peaks</title>
    <link href="/2022/10/10/P7834%20Peaks/"/>
    <url>/2022/10/10/P7834%20Peaks/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P7834">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>发现社区分开始掉就开始写水题题解的屑。</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>Kruscal 重构树，主席树。</p><p>不会重构树的可以去看一下日报。</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先看到这个最大边 $\le x$ 的限制，就肯定会想到把原图的重构树建出来，然后我们发现，因为最小生成树生成的重构树有一个性质：两点在原图上所有路径的最大边是重构树上两点 LCA 的点权，所以我们可以推得从某个点走不超过边权不超过 $x$ 的点就是他祖先中点权小于等于 $x$ 且深度最小的点的子树中所有叶子节点，不难发现这个祖先可以倍增求。然后我们要求第 $k$ 大，所以把 dfs 序搞出来然后主席树即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[N], b[N], len;<br><span class="hljs-type">int</span> h[N], e[M], ne[M], idx;<br><span class="hljs-type">int</span> p[N], val[N];<br><span class="hljs-type">int</span> dfn[N], f[N][<span class="hljs-number">21</span>], tt, sz[N];<br><span class="hljs-type">int</span> n, m, q;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> x, y, z;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> node &amp;e) <span class="hljs-type">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> z &lt; e.z;<br>    &#125;<br>&#125; edges[M];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">tree</span><br>&#123;<br>    <span class="hljs-type">int</span> lc, rc, cnt;<br>&#125; t[N &lt;&lt; <span class="hljs-number">5</span>];<br><span class="hljs-type">int</span> root[N], tot;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x) p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    p = ++tot;<br>    <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span> p;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    t[p].lc = <span class="hljs-built_in">build</span>(t[p].lc, l, mid);<br>    t[p].rc = <span class="hljs-built_in">build</span>(t[p].rc, mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">clone</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[++tot] = t[p];<br>    <span class="hljs-keyword">return</span> tot;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    p = <span class="hljs-built_in">clone</span>(p);<br>    <span class="hljs-keyword">if</span> (l == r)<br>    &#123;<br>        t[p].cnt++;<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (x &lt;= mid) t[p].lc = <span class="hljs-built_in">insert</span>(t[p].lc, l, mid, x);<br>    <span class="hljs-keyword">else</span> t[p].rc = <span class="hljs-built_in">insert</span>(t[p].rc, mid + <span class="hljs-number">1</span>, r, x);<br>    t[p].cnt = t[t[p].lc].cnt + t[t[p].rc].cnt;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span> l;<br>    <span class="hljs-type">int</span> rcnt = t[t[q].rc].cnt - t[t[p].rc].cnt, mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (k &lt;= rcnt) <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(t[p].rc, t[q].rc, mid + <span class="hljs-number">1</span>, r, k);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(t[p].lc, t[q].lc, l, mid, k - rcnt);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    dfn[u] = ++tt, f[u][<span class="hljs-number">0</span>] = p, sz[u] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (u &lt;= n) root[tt] = <span class="hljs-built_in">insert</span>(root[tt - <span class="hljs-number">1</span>], <span class="hljs-number">1</span>, len, a[u]);<br>    <span class="hljs-keyword">else</span> root[tt] = root[tt - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">20</span>; i++)<br>        f[u][i] = f[f[u][i - <span class="hljs-number">1</span>]][i - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (v == p) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs</span>(v, u);<br>        sz[u] += sz[v];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>(), q = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) a[i] = <span class="hljs-built_in">read</span>(), b[i] = a[i];<br>    <span class="hljs-built_in">sort</span>(b + <span class="hljs-number">1</span>, b + n + <span class="hljs-number">1</span>);<br>    len = <span class="hljs-built_in">unique</span>(b + <span class="hljs-number">1</span>, b + n + <span class="hljs-number">1</span>) - b - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) a[i] = <span class="hljs-built_in">lower_bound</span>(b + <span class="hljs-number">1</span>, b + len + <span class="hljs-number">1</span>, a[i]) - b;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> x = <span class="hljs-built_in">read</span>(), y = <span class="hljs-built_in">read</span>(), z = <span class="hljs-built_in">read</span>();<br>        edges[i] = &#123;x, y, z&#125;;<br>    &#125;<br>    <span class="hljs-type">int</span> cnt = n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span> * n - <span class="hljs-number">1</span>; i++) p[i] = i;<br>    <span class="hljs-built_in">sort</span>(edges + <span class="hljs-number">1</span>, edges + m + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> px = <span class="hljs-built_in">find</span>(edges[i].x), py = <span class="hljs-built_in">find</span>(edges[i].y);<br>        <span class="hljs-keyword">if</span> (px == py) <span class="hljs-keyword">continue</span>;<br>        p[px] = p[py] = ++cnt;<br>        val[cnt] = edges[i].z;<br>        <span class="hljs-built_in">add</span>(cnt, px);<br>        <span class="hljs-built_in">add</span>(cnt, py);<br>        <span class="hljs-built_in">add</span>(px, cnt);<br>        <span class="hljs-built_in">add</span>(py, cnt);<br>        <span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">2</span> * n - <span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;<br>    &#125;<br>    root[<span class="hljs-number">0</span>] = <span class="hljs-built_in">build</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, len);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> x = <span class="hljs-built_in">find</span>(i);<br>        <span class="hljs-keyword">if</span> (!dfn[x]) <span class="hljs-built_in">dfs</span>(x, <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-type">int</span> last = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (q--)<br>    &#123;<br>        <span class="hljs-type">int</span> u = (<span class="hljs-built_in">read</span>() ^ last) % n + <span class="hljs-number">1</span>, x = <span class="hljs-built_in">read</span>() ^ last, k = (<span class="hljs-built_in">read</span>() ^ last) % n + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">20</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>            <span class="hljs-keyword">if</span> (f[u][i] &amp;&amp; val[f[u][i]] &lt;= x)<br>                u = f[u][i];<br>        <span class="hljs-type">int</span> l = dfn[u], r = dfn[u] + sz[u] - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (t[root[r]].cnt - t[root[l - <span class="hljs-number">1</span>]].cnt &lt; k) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>), last = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, last = b[<span class="hljs-built_in">query</span>(root[l - <span class="hljs-number">1</span>], root[r], <span class="hljs-number">1</span>, len, k)]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>图论</tag>
      
      <tag>主席树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【游记】2022国庆集训游记</title>
    <link href="/2022/10/03/2022%E5%9B%BD%E5%BA%86%E9%9B%86%E8%AE%AD%E6%B8%B8%E8%AE%B0/"/>
    <url>/2022/10/03/2022%E5%9B%BD%E5%BA%86%E9%9B%86%E8%AE%AD%E6%B8%B8%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="Day"><a href="#Day" class="headerlink" title="Day -???"></a>Day -???</h2><p>whk垫底了，被校内一车人吊打，只能先去学一下OI来缓解一下。</p><span id="more"></span><h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2><p>打的是NOIP的场，花十分钟看了一眼四题题面：T1纯数学，T2有点一眼，T3和T4不在我的能力范围，考虑T2图论题我比较擅长，于是先去推T1的式子，然后推着推着发现好像有容斥的做法，随便打了一下发现过不了样例，然后发现 <code>k</code> 打成 <code>k + 1</code> 了，改掉就过样例了，又拍上了小数据，感觉问题不大。然后看T2发现是个tarjan的一眼题，花了 $10$ 分钟口胡了一个 tarjan + 拓扑排序的做法，感觉能A，剩下的时间就在上拍了。估分 $100 + 100 + 0 + 0 = 200$，中午出分，发现只有 $100 + 70 + 0 + 0 = 170$，一看T2三个点T掉，原来是XJB去重边多了个 $\log$，改掉就过了，wssb。</p><h3 id="Day1-题解"><a href="#Day1-题解" class="headerlink" title="Day1 题解"></a>Day1 题解</h3><h4 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h4><p>考虑容斥，全集大小 $|U| = \binom{m - 1}{n - 1}$，所以我们考虑用全集大小减去至少有一个数大于 $k$ 的情况，不难发现求解恰有 $j$ 个数大于 $k$ 就相当于求解方程</p><script type="math/tex; mode=display">\sum_{i=1}^n x_i = m - jk</script><p>的正整数解个数，加上容斥即可知答案为</p><script type="math/tex; mode=display">\sum_{i=0}^{n} (-1)^i\binom{n}{i}\binom{m - ik - 1}{n - 1}</script><h4 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h4><p>考虑什么情况下会出现 $i$ 和 $j$ 至少能有一方可达，不难发现用tarjan缩点过后新图中的一段链满足要求，所以直接tarjan+拓扑排序即可通过。</p><h2 id="Day2-amp-amp-Day3"><a href="#Day2-amp-amp-Day3" class="headerlink" title="Day2 &amp;&amp; Day3"></a>Day2 &amp;&amp; Day3</h2><p>两天合起来挂了170分，不想写了。</p>]]></content>
    
    
    <categories>
      
      <category>游记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【比赛】近期打过的PJ难度比赛总结</title>
    <link href="/2022/09/26/%E8%BF%91%E6%9C%9F%E6%89%93%E8%BF%87%E7%9A%84PJ%E9%9A%BE%E5%BA%A6%E6%AF%94%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
    <url>/2022/09/26/%E8%BF%91%E6%9C%9F%E6%89%93%E8%BF%87%E7%9A%84PJ%E9%9A%BE%E5%BA%A6%E6%AF%94%E8%B5%9B%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这位选手因为太菜只配参加 PJ 组比赛。</p><span id="more"></span><h2 id="Luogu模拟赛"><a href="#Luogu模拟赛" class="headerlink" title="Luogu模拟赛"></a>Luogu模拟赛</h2><p>本来想赛时认真打的，但是由于sb学校周六补课所以只能打VP，最终 $100 +100 +100 + 0 = 300$，最后一题感觉是个码量巨大的dfs就没写。</p><h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>显然我们枚举每个点作为 X 的中心的情况，但是我们发现长度为偶数的 X 没有中心，所以往里面塞几个 $0$ 分开统计即可，感觉代码比别人丑好多。</p><h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>首先打表得到一天有31个时刻，然后再搞个前缀和就行。</p><h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>一眼二维费用的背包，处理的时候一般用至少一般用至多，注意dp完的时候要让当前状态继承前面的状态。</p><h2 id="机房模拟-A"><a href="#机房模拟-A" class="headerlink" title="机房模拟 A"></a>机房模拟 A</h2><p>一个正常打的比赛，赛时估分 $100 + 100 + 100 + 100 = 400$，实际 $100 + 100 + 100 + 9 = 309$，T4的 <code>char</code> 打成 <code>int</code> 当场暴毙。</p><p>进场直接开了 T1，发现就是一个简单的回文处理，花了 $2$ 分钟写完过了样例，发现数据给的非常水，理论上可以给到 $len(n) \le 10^7$。</p><p>写完开了 T2，发现我们肯定只关心每一个不等式中 $v$ 的大小，所以先离散化，然后发现一个个枚举 $x$ 就可以搞到 $O(n^2)$，可以过掉，果断 $5$ 分钟写完过掉样例，感觉方法非常暴力也没什么好拍的，写完开 T3。</p><p>看 T3 的时候突然降智，看题面看了 $5$ 秒感觉非常树上莫队，然后发现用莫队搞的话很简单，接下来的半个小时非常确信地在写树上莫队(鬼知道为什么一个PJ比赛我会想到这玩意)，写完了之后发现代码足有 $120$ 行，当时还非常惊讶PJ会考莫队，但是思考两分钟之后突然想到这个题是一个 $O(n)$ 的 dfs，整个人傻掉了，然后只用 $5$ 分钟写了一个 dfs，非常顺利地过掉样例，代码仅 $46$ 行。</p><p>看T4的时候发现字符集大小 $k$ 只有 $18$，果断猜测复杂度和 $k$ 有关，于是开始构思一个 $O(nk^2)$ 的算法，然后发现对于查询的每一个字符串，它合法等价于两两取出来的字符都合法，于是用 $f[i][j]$ 表示取第 $i$ 个字符和第 $j$ 个字符是否合法，发现这样的话预处理是 $O(nk^2)$，查询是 $O(qk^2)$，显然可以通过。</p><p>写完 T4 回去看 T2，然后发现给式子排个序是可以二分的，然后花 $5$ 分钟搞了一个 $O(n\log n)$ 的算法。</p><h2 id="机房模拟-B"><a href="#机房模拟-B" class="headerlink" title="机房模拟 B"></a>机房模拟 B</h2><p>赛后VP打的，理论上是TG模拟赛，但感觉出简单了，介于PJ与TG之间，估分 $100 + 40 + 100 + 0 = 240$，实际 $100 + 0 + 100 + 0 = 200$，T2不知道为什么暴力写挂了。</p><p>进场先花了 $10$ 分钟读了一遍题面，确定可以拿的分有 T2 的 $40$ 和 T3 的 $20$，然后开始想 T1，过了 $5$ 分钟手推了几组数据，发现答案显然不大于 $2$，然后如果答案为 $1$ 的话肯定有一个点在四个角落，直接特判即可，$O(Tn)$ 显然可过。</p><p>然后看 T2，感觉是一个神秘 DS 题，想了莫队和线段树两种搞法，感觉都不是很可做，只会 $O(nm)$ 这一档分，我好废啊!</p><p>T3 是一个加强版的过河卒，首先有一个简单的 $O(nm)$ 的dp，然后就开始往数学哪方面想，过了 $15$ 分钟推了一个 $O(2^k)$ 的容斥，加上dp就可以有 $40$ 分，想到容斥之后突然想起如果把所有点排序一下似乎可以做一个容斥的dp，然后就令 $f[i]$ 表示走到第 $i$ 个不合法点的方案数，显然有$f[i] = \binom{x<em>i + y_i - 2}{x_i - 1} - \sum</em>{j = 1}^{i - 1}f[j]\binom{x_i + y_i - x_j -y_j}{x_i - x_j}$<br>预处理组合数然后直接dp是 $O(k^2)$ 的，可以通过。</p><p>T4，完全不会。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学了不到一年的水平，差不多也就这样了吧，CSP2022 RP++</p>]]></content>
    
    
    <categories>
      
      <category>比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
      <tag>trick</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】CF498C Array and Operations</title>
    <link href="/2022/09/15/CF498C%20Array%20and%20Operations/"/>
    <url>/2022/09/15/CF498C%20Array%20and%20Operations/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF498C">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>暑假的一道集训题目，今天想起来补一发题解。</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>网络流</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先题目里面的限制非常多而且复杂，所以我们考虑用网络流解决。</p><p>首先我们看到下标之和为奇数这个限制就会想到把整个序列按下标奇偶分组，建一个二分图，然后我们考虑怎么解决。</p><p>首先我们很容易发现要使操作次数最多，每次除的肯定是一个质因数，所以我们预处理出每个数的质因数以及每个因数的指数。</p><p>然后我们按如下方式连边:</p><ol><li>将序列中的每个下标拆成 $x$ 个点，其中 $x$ 为这个数不同的质因数个数。</li><li>按下标奇偶分组，然后对每个点分别向源点/汇点连容量为这个质因数指数的边。</li><li>对于每一个组合，如果这两个数有公共的质因数，就将这两个质因数代表的点连上容量为 $inf$ 的边。</li></ol><p>建完图跑最大流即可。</p><p>具体实现见代码。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>, INF = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> h[N], e[N], ne[N], f[N], idx;<br>vector&lt;<span class="hljs-type">int</span>&gt; fac[N];<br>vector&lt;<span class="hljs-type">int</span>&gt; cnt[N];<br><span class="hljs-type">int</span> n, m, s, t;<br><span class="hljs-type">int</span> d[N], cur[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>;<br>        c = <span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b;<br>    f[idx] = c;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> tmp = a[id];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= tmp / i; i++)<br>        <span class="hljs-keyword">if</span> (tmp % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            fac[id].<span class="hljs-built_in">push_back</span>(i);<br>            <span class="hljs-type">int</span> cntt = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (tmp % i == <span class="hljs-number">0</span>)<br>                cntt++, tmp /= i;<br>            cnt[id].<span class="hljs-built_in">push_back</span>(cntt);<br>        &#125;<br>    <span class="hljs-keyword">if</span> (tmp &gt; <span class="hljs-number">1</span>) fac[id].<span class="hljs-built_in">push_back</span>(tmp), cnt[id].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (i - <span class="hljs-number">1</span>) * n + j + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> d);<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(s);<br>    d[s] = <span class="hljs-number">0</span>, cur[s] = h[s];<br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> u = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> v = e[i];<br>            <span class="hljs-keyword">if</span> (d[v] == <span class="hljs-number">-1</span> &amp;&amp; f[i])<br>            &#123;<br>                d[v] = d[u] + <span class="hljs-number">1</span>;<br>                cur[v] = h[v];<br>                <span class="hljs-keyword">if</span> (v == t) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                q.<span class="hljs-built_in">push</span>(v);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> lim)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (u == t) <span class="hljs-keyword">return</span> lim;<br>    <span class="hljs-type">int</span> flow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = cur[u]; ~i &amp;&amp; flow &lt; lim; i = ne[i])<br>    &#123;<br>        cur[u] = i;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (d[v] == d[u] + <span class="hljs-number">1</span> &amp;&amp; f[i])<br>        &#123;<br>            <span class="hljs-type">int</span> t = <span class="hljs-built_in">find</span>(v, <span class="hljs-built_in">min</span>(f[i], lim - flow));<br>            <span class="hljs-keyword">if</span> (!t) d[v] = <span class="hljs-number">-1</span>;<br>            f[i] -= t, f[i ^ <span class="hljs-number">1</span>] += t, flow += t;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flow;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dinic</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>, flow;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">bfs</span>()) <span class="hljs-keyword">while</span> (flow = <span class="hljs-built_in">find</span>(s, INF)) res += flow;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>();<br>    s = <span class="hljs-number">0</span>, t = N - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) a[i] = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-built_in">init</span>(i);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i &amp; <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; fac[i].<span class="hljs-built_in">size</span>(); j++)<br>                <span class="hljs-built_in">add</span>(s, <span class="hljs-built_in">get</span>(i, j), cnt[i][j]), <span class="hljs-built_in">add</span>(<span class="hljs-built_in">get</span>(i, j), s, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; fac[i].<span class="hljs-built_in">size</span>(); j++)<br>                <span class="hljs-built_in">add</span>(<span class="hljs-built_in">get</span>(i, j), t, cnt[i][j]), <span class="hljs-built_in">add</span>(t, <span class="hljs-built_in">get</span>(i, j), <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">while</span> (m--)<br>    &#123;<br>        <span class="hljs-type">int</span> a = <span class="hljs-built_in">read</span>(), b = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) <span class="hljs-built_in">swap</span>(a, b);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; fac[a].<span class="hljs-built_in">size</span>(); i++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; fac[b].<span class="hljs-built_in">size</span>(); j++)<br>                <span class="hljs-keyword">if</span> (fac[a][i] == fac[b][j])<br>                    <span class="hljs-built_in">add</span>(<span class="hljs-built_in">get</span>(a, i), <span class="hljs-built_in">get</span>(b, j), INF), <span class="hljs-built_in">add</span>(<span class="hljs-built_in">get</span>(b, j), <span class="hljs-built_in">get</span>(a, i), <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">dinic</span>());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>网络流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】P3489 WIE-Hexer</title>
    <link href="/2022/09/03/P3489%20WIE-Hexer/"/>
    <url>/2022/09/03/P3489%20WIE-Hexer/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3489">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>感觉和孤岛营救问题完全一致，建图好像还更简单一点。</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>最短路，状压</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>看到 $p$ 很小我们考虑状态压缩，设 $d[u][s]$ 表示走到点 $u$ 时剑的状态为 $s$ 时的最短路，然后我们考虑怎么在跑最短路是转移，首先，如果当前节点有宝剑，那么我们把宝剑捡起来肯定不会更劣，所以我们可以用当前最短路去更新捡到钥匙后的状态的最短路，然后就是照常按 dijkstra 转移即可，注意要判断现有钥匙能否经过当前道路。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pii pair<span class="hljs-string">&lt;int, pair&lt;int, int&gt;</span> &gt;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> mk(a, b) make_pair(a, b)</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">210</span>, M = <span class="hljs-number">6010</span>, K = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">15</span>;<br><span class="hljs-type">int</span> h[N], e[M], ne[M], w[M], s[N], idx;<br><span class="hljs-type">int</span> st[N];<br><span class="hljs-type">int</span> d[N][K], vis[N][K];<br><span class="hljs-type">int</span> n, m, p, k;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c, <span class="hljs-type">int</span> d)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b;<br>    w[idx] = c;<br>    s[idx] = d;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> st1, <span class="hljs-type">int</span> st2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">14</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-keyword">if</span> ((st2 &gt;&gt; i &amp; <span class="hljs-number">1</span>) &amp;&amp; !(st1 &gt;&gt; i &amp; <span class="hljs-number">1</span>))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> d);<br>    d[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt; &gt; q;<br>    q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">mk</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">mk</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)));<br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        pii t = q.<span class="hljs-built_in">top</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-type">int</span> u = t.second.first, stt = t.second.second;<br>        <span class="hljs-keyword">if</span> (vis[u][stt]) <span class="hljs-keyword">continue</span>;<br>        vis[u][stt] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (st[u])<br>        &#123;<br>            <span class="hljs-type">int</span> sta = stt | st[u];<br>            <span class="hljs-keyword">if</span> (d[u][sta] &gt; d[u][stt])<br>            &#123;<br>                d[u][sta] = d[u][stt];<br>                q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">mk</span>(d[u][sta], <span class="hljs-built_in">mk</span>(u, sta)));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>            &#123;<br>                <span class="hljs-type">int</span> v = e[i];<br>                <span class="hljs-keyword">if</span> (s[i] &amp;&amp; !<span class="hljs-built_in">check</span>(stt, s[i])) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span> (d[v][stt] &gt; d[u][stt] + w[i])<br>                &#123;<br>                    d[v][stt] = d[u][stt] + w[i];<br>                    q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">mk</span>(d[v][stt], <span class="hljs-built_in">mk</span>(v, stt)));<br>                &#125;<br>            &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>(), p = <span class="hljs-built_in">read</span>(), k = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">while</span> (k--)<br>    &#123;<br>        <span class="hljs-type">int</span> u = <span class="hljs-built_in">read</span>(), x = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">while</span> (x--)<br>        &#123;<br>            <span class="hljs-type">int</span> y = <span class="hljs-built_in">read</span>();<br>            st[u] |= <span class="hljs-number">1</span> &lt;&lt; y;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (m--)<br>    &#123;<br>        <span class="hljs-type">int</span> a = <span class="hljs-built_in">read</span>(), b = <span class="hljs-built_in">read</span>(),  c = <span class="hljs-built_in">read</span>(), x = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-type">int</span> tmp = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (x--)<br>        &#123;<br>            <span class="hljs-type">int</span> y = <span class="hljs-built_in">read</span>();<br>            tmp |= <span class="hljs-number">1</span> &lt;&lt; y;<br>        &#125;<br>        <span class="hljs-built_in">add</span>(a, b, c, tmp);<br>        <span class="hljs-built_in">add</span>(b, a, c, tmp);<br>    &#125;<br>    <span class="hljs-built_in">dijkstra</span>();<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0x3f3f3f3f</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1</span> &lt;&lt; (p + <span class="hljs-number">1</span>); i++)<br>        res = <span class="hljs-built_in">min</span>(res, d[n][i]);<br>    <span class="hljs-keyword">if</span> (res == <span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>图论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】SP11985 GOT</title>
    <link href="/2022/09/02/SP11985%20GOT/"/>
    <url>/2022/09/02/SP11985%20GOT/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/SP11985">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现有的题解好像都是带 $log$ 的主席树，这里提供一个好想且好写但时间复杂度较高的根号算法</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>树上莫队</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>题目中要查询的就是存不存在某个数的出现次数大于等于一，所以我们考虑用 $cnt[x]$ 表示当前 $x$ 的出现次数，显然我们可以 $O(1)$ 进行区间的扩张和收缩，所以考虑莫队，那么每次的答案我们直接查 $cnt$ 即可，用树上莫队维护。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>, B = <span class="hljs-number">450</span>;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> h[N], e[N], ne[N], idx;<br><span class="hljs-type">int</span> st[N], ed[N], rk[N], fa[N], dep[N], sz[N], son[N], top[N], tt;<br><span class="hljs-type">bool</span> res[N], used[N];<br><span class="hljs-type">int</span> cnt[N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> l, r, k, lca, id;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> node &amp;e) <span class="hljs-type">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> l / B == e.l / B ? (l / B &amp; <span class="hljs-number">1</span> ? r &lt; e.r : r &gt; e.r) : l &lt; e.l;<br>    &#125;<br>&#125; q[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    st[u] = ++tt, rk[tt] = u, fa[u] = p, dep[u] = dep[p] + <span class="hljs-number">1</span>, sz[u] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (v == p) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs1</span>(v, u);<br>        sz[u] += sz[v];<br>        <span class="hljs-keyword">if</span> (sz[son[u]] &lt; sz[v]) son[u] = v;<br>    &#125;<br>    ed[u] = ++tt, rk[tt] = u;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    top[u] = t;<br>    <span class="hljs-keyword">if</span> (!son[u]) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">dfs2</span>(son[u], t);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (v == son[u] || v == fa[u]) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs2</span>(v, v);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (top[u] != top[v])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (dep[top[u]] &lt; dep[top[v]]) <span class="hljs-built_in">swap</span>(u, v);<br>        u = fa[top[u]];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (dep[u] &gt; dep[v]) <span class="hljs-built_in">swap</span>(u, v);<br>    <span class="hljs-keyword">return</span> u;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    cnt[a[x]]++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    cnt[a[x]]--;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    !used[x] ? <span class="hljs-built_in">add</span>(x) : <span class="hljs-built_in">del</span>(x);<br>    used[x] ^= <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m) != EOF)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>        <span class="hljs-built_in">memset</span>(used, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> used);<br>        <span class="hljs-built_in">memset</span>(son, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> son);<br>        <span class="hljs-built_in">memset</span>(cnt, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> cnt);<br>        <span class="hljs-built_in">memset</span>(res, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> res);<br>        idx = tt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) a[i] = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> a = <span class="hljs-built_in">read</span>(), b = <span class="hljs-built_in">read</span>();<br>            <span class="hljs-built_in">add</span>(a, b);<br>            <span class="hljs-built_in">add</span>(b, a);<br>        &#125;<br>        <span class="hljs-built_in">dfs1</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">dfs2</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> l = <span class="hljs-built_in">read</span>(), r = <span class="hljs-built_in">read</span>(), k = <span class="hljs-built_in">read</span>();<br>            <span class="hljs-keyword">if</span> (st[l] &gt; st[r]) <span class="hljs-built_in">swap</span>(l, r);<br>            <span class="hljs-type">int</span> p = <span class="hljs-built_in">lca</span>(l, r);<br>            <span class="hljs-keyword">if</span> (p == l) q[i] = &#123;st[l], st[r], k, <span class="hljs-number">0</span>, i&#125;;<br>            <span class="hljs-keyword">else</span> q[i] = &#123;ed[l], st[r], k, p, i&#125;;<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(q + <span class="hljs-number">1</span>, q + m + <span class="hljs-number">1</span>);<br>        <span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        &#123;<br>            <span class="hljs-keyword">while</span> (l &gt; q[i].l) <span class="hljs-built_in">modify</span>(rk[--l]);<br>            <span class="hljs-keyword">while</span> (r &lt; q[i].r) <span class="hljs-built_in">modify</span>(rk[++r]);<br>            <span class="hljs-keyword">while</span> (l &lt; q[i].l) <span class="hljs-built_in">modify</span>(rk[l++]);<br>            <span class="hljs-keyword">while</span> (r &gt; q[i].r) <span class="hljs-built_in">modify</span>(rk[r--]);<br>            <span class="hljs-keyword">if</span> (q[i].lca) <span class="hljs-built_in">modify</span>(q[i].lca);<br>            res[q[i].id] = cnt[q[i].k] ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (q[i].lca) <span class="hljs-built_in">modify</span>(q[i].lca);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>            <span class="hljs-built_in">puts</span>(res[i] ? <span class="hljs-string">&quot;Find&quot;</span> : <span class="hljs-string">&quot;NotFind&quot;</span>);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>莫队</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】CF808F Card Game</title>
    <link href="/2022/09/01/CF808F%20Card%20Game/"/>
    <url>/2022/09/01/CF808F%20Card%20Game/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF808F">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>感觉是打过的一场模拟赛里面的一道题的弱化版，比较轻松地做了出来。</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>网络流</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>不难发现答案具有单调性，所以我们可以二分最终的等级 $x$，现在问题就转化成了等级为 $x$ 时获得的最大能量。</p><p>然后我们想到把两张不满足要求的卡牌连边，那么我们要求的就是图中的最大独立集，这玩意在一般图中是 NPC 的，所以我们考虑一些特殊性质，观察到，质数除了 $2$ 都是奇数，所以我们如果把 $2$ 的情况排除掉就能得到一个二分图 (按奇偶分左右)，然后又观察到 $2 = 1 + 1$，所以 $1$ 只能选一张，贪心地选能量最大的即可，建完图后跑 dinic 即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">110</span>, INF = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>;<br><span class="hljs-type">int</span> h[N], e[N], ne[N], f[N], idx;<br><span class="hljs-type">int</span> d[N], cur[N];<br><span class="hljs-type">int</span> v[N], primes[N], cnt;<br><span class="hljs-type">int</span> s, t;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> p, c, l;<br>&#125; a[M];<br><span class="hljs-type">int</span> n, k;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b;<br>    f[idx] = c;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">200000</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!v[i]) primes[++cnt] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= cnt &amp;&amp; primes[j] &lt;= <span class="hljs-number">200000</span> / i; j++)   <br>        &#123;<br>            v[i * primes[j]] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> d);<br>    d[s] = <span class="hljs-number">0</span>;<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(s);<br>    cur[s] = h[s];<br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> u = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> v = e[i];<br>            <span class="hljs-keyword">if</span> (d[v] == <span class="hljs-number">-1</span> &amp;&amp; f[i])<br>            &#123;<br>                d[v] = d[u] + <span class="hljs-number">1</span>;<br>                cur[v] = h[v];<br>                <span class="hljs-keyword">if</span> (v == t) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                q.<span class="hljs-built_in">push</span>(v);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> lim)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (u == t) <span class="hljs-keyword">return</span> lim;<br>    <span class="hljs-type">int</span> flow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = cur[u]; ~i &amp;&amp; flow &lt; lim; i = ne[i])<br>    &#123;<br>        cur[u] = i;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (d[v] == d[u] + <span class="hljs-number">1</span> &amp;&amp; f[i])<br>        &#123;<br>            <span class="hljs-type">int</span> t = <span class="hljs-built_in">find</span>(v, <span class="hljs-built_in">min</span>(f[i], lim - flow));<br>            <span class="hljs-keyword">if</span> (!t) d[v] = <span class="hljs-number">-1</span>;<br>            f[i] -= t, f[i ^ <span class="hljs-number">1</span>] += t, flow += t;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flow;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">dinic</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>, flow;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">bfs</span>()) <span class="hljs-keyword">while</span> (flow = <span class="hljs-built_in">find</span>(s, INF)) res += flow;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    idx = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (a[i].l &gt; x) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span> (!(a[i].c &amp; <span class="hljs-number">1</span>)) <span class="hljs-built_in">add</span>(s, i, a[i].p), <span class="hljs-built_in">add</span>(i, s, <span class="hljs-number">0</span>), tot += a[i].p;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[i].c != <span class="hljs-number">1</span>) <span class="hljs-built_in">add</span>(i, t, a[i].p), <span class="hljs-built_in">add</span>(t, i, <span class="hljs-number">0</span>), tot += a[i].p;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (a[i].l &gt; x || a[j].l &gt; x || a[i].c &amp; <span class="hljs-number">1</span> || !(a[j].c &amp; <span class="hljs-number">1</span>) || v[a[i].c + a[j].c] || a[i].c == <span class="hljs-number">1</span> || a[j].c == <span class="hljs-number">1</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-built_in">add</span>(i, j, INF);<br>            <span class="hljs-built_in">add</span>(j, i, <span class="hljs-number">0</span>);<br>        &#125;<br>    <span class="hljs-type">int</span> mx = <span class="hljs-number">0</span>, p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">if</span> (a[i].l &lt;= x &amp;&amp; a[i].c == <span class="hljs-number">1</span> &amp;&amp; a[i].p &gt; mx)<br>            mx = a[i].p, p = i;<br>    <span class="hljs-keyword">if</span> (p)<br>    &#123;<br>        tot += mx;<br>        <span class="hljs-built_in">add</span>(p, t, mx);<br>        <span class="hljs-built_in">add</span>(t, p, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            <span class="hljs-keyword">if</span> (!(a[i].c &amp; <span class="hljs-number">1</span>) &amp;&amp; !v[a[i].c + <span class="hljs-number">1</span>])<br>                <span class="hljs-built_in">add</span>(i, p, INF), <span class="hljs-built_in">add</span>(p, i, <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-type">int</span> res = <span class="hljs-built_in">dinic</span>();<br>    <span class="hljs-keyword">return</span> tot - res &gt;= k;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">init</span>();<br>    n = <span class="hljs-built_in">read</span>(), k = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        a[i].p = <span class="hljs-built_in">read</span>(), a[i].c = <span class="hljs-built_in">read</span>(), a[i].l = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r = n;<br>    s = <span class="hljs-number">0</span>, t = n + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">bool</span> flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (l &lt;= r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) r = mid - <span class="hljs-number">1</span>, flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, flag ? l : <span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>网络流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】CF852I Dating</title>
    <link href="/2022/08/31/CF852I%20Dating/"/>
    <url>/2022/08/31/CF852I%20Dating/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF852I">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一眼树上莫队，用 20min 切了。</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>树上莫队</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>注意到这题要分别维护男生和女生最喜欢的数字，所以我们用 $cnt[k][0/1]$ 来表示当前最喜欢数字是 $k$ 的男生/女生人数，不难发现这玩意在区间上可以 $O(1)$ 扩展，然后直接树上莫队维护即可，不会树上莫队的可以看 <a href="https://www.luogu.com.cn/problem/SP10707">SP10707</a>。</p><p>注意开 <code>long long</code> ！</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>, B = <span class="hljs-number">450</span>;<br><span class="hljs-type">bool</span> g[N], used[N];<br><span class="hljs-type">int</span> a[N], tot;<br><span class="hljs-type">int</span> h[N], e[N], ne[N], idx;<br><span class="hljs-type">int</span> st[N], ed[N], rk[N], sz[N], son[N], top[N], dep[N], fa[N], tt;<br><span class="hljs-type">int</span> cnt[N][<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> res[N], now;<br>unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; ha;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> l, r, lca, id;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> node &amp;e) <span class="hljs-type">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> l / B == e.l / B ? (l / B &amp; <span class="hljs-number">1</span> ? r &lt; e.r : r &gt; e.r) : l &lt; e.l;<br>    &#125;<br>&#125; q[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    fa[u] = p, dep[u] = dep[p] + <span class="hljs-number">1</span>, sz[u] = <span class="hljs-number">1</span>, st[u] = ++tt, rk[tt] = u;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (v == p) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs1</span>(v, u);<br>        sz[u] += sz[v];<br>        <span class="hljs-keyword">if</span> (sz[son[u]] &lt; sz[v]) son[u] = v;<br>    &#125;<br>    ed[u] = ++tt, rk[tt] = u;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    top[u] = t;<br>    <span class="hljs-keyword">if</span> (!son[u]) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">dfs2</span>(son[u], t);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (v == son[u] || v == fa[u]) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs2</span>(v, v);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (top[u] != top[v])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (dep[top[u]] &lt; dep[top[v]]) <span class="hljs-built_in">swap</span>(u, v);<br>        u = fa[top[u]];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (dep[u] &gt; dep[v]) <span class="hljs-built_in">swap</span>(u, v);<br>    <span class="hljs-keyword">return</span> u;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    cnt[a[x]][g[x]]++;<br>    now += cnt[a[x]][g[x] ^ <span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    cnt[a[x]][g[x]]--;<br>    now -= cnt[a[x]][g[x] ^ <span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    !used[x] ? <span class="hljs-built_in">add</span>(x) : <span class="hljs-built_in">del</span>(x);<br>    used[x] ^= <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) g[i] = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        a[i] = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span> (!ha[a[i]]) ha[a[i]] = ++tot;<br>        a[i] = ha[a[i]];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> a = <span class="hljs-built_in">read</span>(), b = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-built_in">add</span>(a, b);<br>        <span class="hljs-built_in">add</span>(b, a);<br>    &#125;<br>    <span class="hljs-built_in">dfs1</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">dfs2</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> m = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> u = <span class="hljs-built_in">read</span>(), v = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span> (st[u] &gt; st[v]) <span class="hljs-built_in">swap</span>(u, v);<br>        <span class="hljs-type">int</span> p = <span class="hljs-built_in">lca</span>(u, v);<br>        <span class="hljs-keyword">if</span> (p == u) q[i] = &#123;st[u], st[v], <span class="hljs-number">0</span>, i&#125;;<br>        <span class="hljs-keyword">else</span> q[i] = &#123;ed[u], st[v], p, i&#125;;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(q + <span class="hljs-number">1</span>, q + m + <span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (l &gt; q[i].l) <span class="hljs-built_in">modify</span>(rk[--l]);<br>        <span class="hljs-keyword">while</span> (r &lt; q[i].r) <span class="hljs-built_in">modify</span>(rk[++r]);<br>        <span class="hljs-keyword">while</span> (l &lt; q[i].l) <span class="hljs-built_in">modify</span>(rk[l++]);<br>        <span class="hljs-keyword">while</span> (r &gt; q[i].r) <span class="hljs-built_in">modify</span>(rk[r--]);<br>        <span class="hljs-keyword">if</span> (q[i].lca) <span class="hljs-built_in">modify</span>(q[i].lca);<br>        res[q[i].id] = now;<br>        <span class="hljs-keyword">if</span> (q[i].lca) <span class="hljs-built_in">modify</span>(q[i].lca);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, res[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>莫队</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】CF277E Binary Tree on Plane</title>
    <link href="/2022/08/30/CF277E%20Binary%20Tree%20on%20Plane/"/>
    <url>/2022/08/30/CF277E%20Binary%20Tree%20on%20Plane/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF277E">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>尝试对 <code>double</code> 数组数组进行 <code>memset</code> 并 debug 一小时。</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>网络流</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先，为什么这一题可以用网络流来做呢？</p><p>网络流的题目一般都有一个明显的特点：有很多其他方法解决不了的限制。然后我们来看这道题，题目中要求构建一颗二叉树，也就相当于一个节点最多只有两个儿子和一个父亲，然后还有对于 $y$ 坐标的限制，考虑到这些限制不好用其它方法搞，于是考虑网络流建模。</p><p>我们考虑任意一个二叉树的节点 $u$，它有着双重身份——父亲和儿子，于是我们把一个点 $u$ 拆成 $u_1$ 和 $u_2$ 两个点，$u_1$ 代表父亲，$u_2$ 代表儿子，然后我们套路地将源点 $s$ 向 $u_1$ 连一条容量为 $2$，费用为 $0$ 的边，代表一个点最多只能有两个儿子，$u_2$ 向汇点 $t$ 连一条容量为 $1$，费用为 $0$ 的边，代表一个点有一个父亲。</p><p>然后我们考虑两个点 $u$ 和 $v$，如果 $u$ 可以当 $v$ 的父亲，我们就从 $u_1$ 向 $v_2$ 连一条容量为 $1$，费用为两点距离的边，代表连边的费用为两点间距离，然后我们跑最小费用最大流即可 AC 本题。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pii pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>, INF = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>;<br><span class="hljs-type">int</span> h[N], e[N], ne[N], f[N], idx;<br><span class="hljs-type">int</span> s, t;<br><span class="hljs-type">double</span> w[N];<br>pii pos[N];<br><span class="hljs-type">double</span> d[N];<br><span class="hljs-type">int</span> minf[N], pre[N];<br><span class="hljs-type">bool</span> vis[N];<br><span class="hljs-type">int</span> flow;<br><span class="hljs-type">double</span> res;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c, <span class="hljs-type">double</span> d)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b;<br>    f[idx] = c;<br>    w[idx] = d;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">double</span> <span class="hljs-title">dist</span><span class="hljs-params">(<span class="hljs-type">int</span> x1, <span class="hljs-type">int</span> y1, <span class="hljs-type">int</span> x2, <span class="hljs-type">int</span> y2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = s; i &lt;= t; i++) d[i] = INF;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(s);<br>    d[s] = <span class="hljs-number">0</span>;<br>    minf[s] = INF;<br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> u = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        vis[u] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> v = e[i];<br>            <span class="hljs-keyword">if</span> (d[v] &gt; d[u] + w[i] &amp;&amp; f[i])<br>            &#123;<br>                d[v] = d[u] + w[i];<br>                minf[v] = <span class="hljs-built_in">min</span>(minf[u], f[i]);<br>                pre[v] = i;<br>                <span class="hljs-keyword">if</span> (!vis[v])<br>                    q.<span class="hljs-built_in">push</span>(v), vis[v] = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> d[t] &lt; INF;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">EK</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">spfa</span>())<br>    &#123;<br>        flow += minf[t], res += d[t] * minf[t];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = t; i != s; i = e[pre[i] ^ <span class="hljs-number">1</span>])<br>            f[pre[i]] -= minf[t], f[pre[i] ^ <span class="hljs-number">1</span>] += minf[t];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) pos[i].first = <span class="hljs-built_in">read</span>(), pos[i].second = <span class="hljs-built_in">read</span>();<br>    s = <span class="hljs-number">0</span>, t = <span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">add</span>(s, i, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>), <span class="hljs-built_in">add</span>(i, s, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">add</span>(i + n, t, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>), <span class="hljs-built_in">add</span>(t, i + n, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i == j || pos[i].second &lt;= pos[j].second) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-type">double</span> d = <span class="hljs-built_in">dist</span>(pos[i].first, pos[i].second, pos[j].first, pos[j].second);<br>            <span class="hljs-built_in">add</span>(i, j + n, <span class="hljs-number">1</span>, d);<br>            <span class="hljs-built_in">add</span>(j + n, i, <span class="hljs-number">0</span>, -d);<br>        &#125;<br>    <span class="hljs-built_in">EK</span>();<br>    <span class="hljs-keyword">if</span> (flow &lt; n - <span class="hljs-number">1</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.10lf\n&quot;</span>, res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>网络流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【比赛】 CF Edu Round 134</title>
    <link href="/2022/08/29/CF%20Edu%20Round%20134/"/>
    <url>/2022/08/29/CF%20Edu%20Round%20134/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这一场算是我人生中的第一场 CF，由于被人催着去睡觉，赛时只切了 ABC，赛后也懒得补题。</p><span id="more"></span><h2 id="赛时记录-amp-题解"><a href="#赛时记录-amp-题解" class="headerlink" title="赛时记录 &amp; 题解"></a>赛时记录 &amp; 题解</h2><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><p>进场先开A，发现直接依题意分类讨论即可，5min 切掉。</p><h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p>然后看 B 的题面第一眼感觉 bfs，看了数据范围很快放弃了这个想法，然后发现题目中不可经过的点构成的形状是一个十字里面套一个正方形，所以显然不会影响 $(1, 1)$ 到 $(n, m)$ 的最短路，所以只需要判断不能到达的情况即可，发现性质之后 5min 切了。</p><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p>C 感觉是一个二合一的题目，显然每一个 $a<em>i$ 都只能变成大于等于它的 $b_j$，所以最小值 <code>lower_bound</code> 一下就出来了，然后想着最小值是二分得出就考虑能不能二分出最大值，想了 10min 发现不是很会做，于是转变一下思路，每个 $d_i$ 要取最大值也就相当于要给当前 $a_i$ 找到一个最大的 $b_j$，于是考虑这个最大的 $b_j$ 有什么性质。然后发现如果一个位置 $i$ 满足 $a_i &gt;b</em>{i - 1}$，那么 $[1, i - 1]$ 的数肯定配不到 $[i, n]$ 的数(用抽屉原理感性理解)，然后我们就找到了 $b_j$ 的最大值，然后就轻松切了。</p>]]></content>
    
    
    <categories>
      
      <category>比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
      <tag>trick</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【笔记】浅谈LOJ数列分块九合一</title>
    <link href="/2022/08/13/%E6%B5%85%E8%B0%88LOJ%E6%95%B0%E5%88%97%E5%88%86%E5%9D%97%E4%B9%9D%E5%90%88%E4%B8%80/"/>
    <url>/2022/08/13/%E6%B5%85%E8%B0%88LOJ%E6%95%B0%E5%88%97%E5%88%86%E5%9D%97%E4%B9%9D%E5%90%88%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>笔者刚学分块，最近写完了LOJ的数列分块九合一，在此写一下题解报告与分块的基础思想。</p><span id="more"></span><h2 id="分块基础知识"><a href="#分块基础知识" class="headerlink" title="分块基础知识"></a>分块基础知识</h2><p>分块其实就是一种优美的暴力，以最基础的数列分块为例，我们一般把数列分为若干块(块长一般为 $\sqrt{n}$ )，然后我们维护每个块中的一些信息，从而在查询时整块处理，时间复杂度一般为 $O(n\sqrt{n})$。下面以LOJ数列分块入门为例，讲解分块在竞赛题目当中的应用。</p><h2 id="数列分块例题"><a href="#数列分块例题" class="headerlink" title="数列分块例题"></a>数列分块例题</h2><h3 id="LOJ6277"><a href="#LOJ6277" class="headerlink" title="LOJ6277"></a>LOJ6277</h3><p><a href="https://loj.ac/p/6277">题目传送门</a></p><p>这是数列分块最基础的一道题目，涉及区间修改，单点查询。我们可以先把原序列分成若干个块长为 $\sqrt{n}$ 的块，然后我们对每个块维护如下信息:</p><p>$tag[i]$ 第 $i$ 块一共被加上了多少(类似线段树中的 $lazytag$ )。</p><p>那么对于每个修改操作，我们分两种情况讨论</p><ol><li>若 $l$ 和 $r$ 在同一块中，那么我们直接暴力对原序列中的每个数进行修改。</li><li>若 $l$ 和 $r$ 在不同块中，那么我们先对 $l$ 和 $r$ 所在的块分别进行暴力修改，然后对于夹在中间的块，我们只需要修改它们的 $tag$ 即可。</li></ol><p>对于每个查询操作，我们直接输出原序列的值加上当前块的 $tag$ 即可，具体代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e4</span> + <span class="hljs-number">10</span>, B = <span class="hljs-number">225</span>;<br><span class="hljs-type">int</span> a[N], tag[B], id[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (id[l] == id[r])<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i++)<br>            a[i] += c;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; id[i] == id[l]; i++) a[i] += c;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; id[i] == id[r]; i--) a[i] += c;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = id[l] + <span class="hljs-number">1</span>; i &lt;= id[r] - <span class="hljs-number">1</span>; i++) tag[i] += c;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a[x] + tag[id[x]];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        a[i] = <span class="hljs-built_in">read</span>(), id[i] = (i - <span class="hljs-number">1</span>) / B + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> op = <span class="hljs-built_in">read</span>(), l = <span class="hljs-built_in">read</span>(), r = <span class="hljs-built_in">read</span>(), c = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">0</span>) <span class="hljs-built_in">modify</span>(l, r, c);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">query</span>(r));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LOJ6278"><a href="#LOJ6278" class="headerlink" title="LOJ6278"></a>LOJ6278</h3><p><a href="https://loj.ac/p/6278">题目传送门</a></p><p>对于一般的分块题，我们有一个非常重要的思路: 怎么暴力怎么来。那让我们想一下怎么暴力求出区间比 $x$ 小的数的个数呢? 很显然，我们只需要先对区间排序，然后再二分查找即可。那么我们就有了一个最基本的思路。</p><p>首先我们对原序列进行分块，然后我们对每个块分别排序，因为操作涉及区间加法，所以我们还是维护每个块的 $tag$。</p><p>对于每个修改操作，我们处理方式和上题一致，不过在修改不完整块时，要对当前块进行重排。</p><p>对于每个查询操作，我们也分两种情况讨论</p><ol><li>若 $l$ 和 $r$ 在一个块中，我们直接暴力统计。</li><li>若 $l$ 和 $r$ 在不同块中，我们先对 $l$ 和 $r$ 所在块分别进行暴力统计，然后对于中间块，我们直接二分查找即可。</li></ol><p>注意在查询时，要注意 $tag$ 带来的影响。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e4</span> + <span class="hljs-number">10</span>, B = <span class="hljs-number">225</span>;<br><span class="hljs-type">int</span> a[N], tag[B], id[N];<br>vector&lt;<span class="hljs-type">int</span>&gt; b[B];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    b[x].<span class="hljs-built_in">clear</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = (x - <span class="hljs-number">1</span>) * B + <span class="hljs-number">1</span>; i &lt;= <span class="hljs-built_in">min</span>(n, x * B); i++)<br>        b[x].<span class="hljs-built_in">push_back</span>(a[i]);<br>    <span class="hljs-built_in">sort</span>(b[x].<span class="hljs-built_in">begin</span>(), b[x].<span class="hljs-built_in">end</span>());<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (id[l] == id[r])<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i++)<br>            a[i] += c;<br>        <span class="hljs-built_in">update</span>(id[l]);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; id[i] == id[l]; i++) a[i] += c;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; id[i] == id[r]; i--) a[i] += c;<br>    <span class="hljs-built_in">update</span>(id[l]);<br>    <span class="hljs-built_in">update</span>(id[r]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = id[l] + <span class="hljs-number">1</span>; i &lt;= id[r] - <span class="hljs-number">1</span>; i++) tag[i] += c;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (id[l] == id[r])<br>    &#123;<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i++)<br>            <span class="hljs-keyword">if</span> (a[i] &lt; c - tag[id[i]]) res++;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; id[i] == id[l]; i++) <br>        <span class="hljs-keyword">if</span> (a[i] &lt; c - tag[id[i]]) res++;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; id[i] == id[r]; i--)<br>        <span class="hljs-keyword">if</span> (a[i] &lt; c - tag[id[i]]) res++;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = id[l] + <span class="hljs-number">1</span>; i &lt;= id[r] - <span class="hljs-number">1</span>; i++)<br>        res += <span class="hljs-built_in">lower_bound</span>(b[i].<span class="hljs-built_in">begin</span>(), b[i].<span class="hljs-built_in">end</span>(), c - tag[i]) - b[i].<span class="hljs-built_in">begin</span>();<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    n = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        a[i] = <span class="hljs-built_in">read</span>();<br>        id[i] = (i - <span class="hljs-number">1</span>) / B + <span class="hljs-number">1</span>;<br>        b[id[i]].<span class="hljs-built_in">push_back</span>(a[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= id[n]; i++)<br>        <span class="hljs-built_in">sort</span>(b[i].<span class="hljs-built_in">begin</span>(), b[i].<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> op = <span class="hljs-built_in">read</span>(), l = <span class="hljs-built_in">read</span>(), r = <span class="hljs-built_in">read</span>(), c = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">0</span>) <span class="hljs-built_in">modify</span>(l, r, c);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-built_in">query</span>(l, r, c * c));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LOJ6279"><a href="#LOJ6279" class="headerlink" title="LOJ6279"></a>LOJ6279</h3><p><a href="https://loj.ac/p/6279">题目传送门</a></p><p>这题和上一题的思路基本一致，也是对每个块分别排序，维护一个 $tag$，在查询时逐块比较前驱大小即可，思路相像，不过多赘述。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>, B = <span class="hljs-number">320</span>;<br><span class="hljs-type">int</span> a[N], id[N], tag[N];<br>vector&lt;<span class="hljs-type">int</span>&gt; b[N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    b[x].<span class="hljs-built_in">clear</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = (x - <span class="hljs-number">1</span>) * B + <span class="hljs-number">1</span>; i &lt;= <span class="hljs-built_in">min</span>(n, x * B); i++)<br>        b[x].<span class="hljs-built_in">push_back</span>(a[i]);<br>    <span class="hljs-built_in">sort</span>(b[x].<span class="hljs-built_in">begin</span>(), b[x].<span class="hljs-built_in">end</span>());<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (id[l] == id[r])<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i++)<br>            a[i] += c;<br>        <span class="hljs-built_in">update</span>(id[l]);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; id[i] == id[l]; i++) a[i] += c;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; id[i] == id[r]; i--) a[i] += c;<br>    <span class="hljs-built_in">update</span>(id[l]);<br>    <span class="hljs-built_in">update</span>(id[r]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = id[l] + <span class="hljs-number">1</span>; i &lt;= id[r] - <span class="hljs-number">1</span>; i++) tag[i] += c;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (id[l] == id[r])<br>    &#123;<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i++)<br>            <span class="hljs-keyword">if</span> (a[i] &lt; c - tag[id[i]] &amp;&amp; (res == <span class="hljs-number">-1</span> || res &lt; a[i] + tag[id[i]]))<br>                res = a[i] + tag[id[i]];<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; id[i] == id[l]; i++)<br>        <span class="hljs-keyword">if</span> (a[i] &lt; c - tag[id[i]] &amp;&amp; (res == <span class="hljs-number">-1</span> || res &lt; a[i] + tag[id[i]]))<br>            res = a[i] + tag[id[i]];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; id[i] == id[r]; i--)<br>        <span class="hljs-keyword">if</span> (a[i] &lt; c - tag[id[i]] &amp;&amp; (res == <span class="hljs-number">-1</span> || res &lt; a[i] + tag[id[i]]))<br>            res = a[i] + tag[id[i]];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = id[l] + <span class="hljs-number">1</span>; i &lt;= id[r] - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> x = <span class="hljs-built_in">lower_bound</span>(b[i].<span class="hljs-built_in">begin</span>(), b[i].<span class="hljs-built_in">end</span>(), c - tag[i]) - b[i].<span class="hljs-built_in">begin</span>() - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span> (b[i][x] + tag[i] &lt; c &amp;&amp; (res == <span class="hljs-number">-1</span> || res &lt; b[i][x] + tag[i]))<br>            res = b[i][x] + tag[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    n = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        a[i] = <span class="hljs-built_in">read</span>();<br>        id[i] = (i - <span class="hljs-number">1</span>) / B + <span class="hljs-number">1</span>;<br>        b[id[i]].<span class="hljs-built_in">push_back</span>(a[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= id[n]; i++)<br>        <span class="hljs-built_in">sort</span>(b[i].<span class="hljs-built_in">begin</span>(), b[i].<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> op = <span class="hljs-built_in">read</span>(), l = <span class="hljs-built_in">read</span>(), r = <span class="hljs-built_in">read</span>(), c = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">0</span>) <span class="hljs-built_in">modify</span>(l, r, c);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">query</span>(l, r, c));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LOJ6280"><a href="#LOJ6280" class="headerlink" title="LOJ6280"></a>LOJ6280</h3><p><a href="https://loj.ac/p/6280">题目传送门</a></p><p>固然可以用线段树水过，如果用分块做，我们对每个块维护以下信息:</p><p>$tag[i]$ 第 $i$ 块一共被加了多少。</p><p>$sum[i]$ 第 $i$ 块的总和是多少。</p><p>对于每个修改操作，方法大同小异，不过注意在修改过程中要更新 $sum$ 的值。</p><p>对于每个查询操作，对不完整块暴力计算，对完整块直接叠加 $sum$，即可通过本题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e4</span> + <span class="hljs-number">10</span>, B = <span class="hljs-number">225</span>;<br><span class="hljs-type">int</span> a[N], id[N], tag[B], sum[B];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(n, x * B) - (x - <span class="hljs-number">1</span>) * B;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (id[l] == id[r])<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i++) a[i] += c, sum[id[i]] += c;;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; id[i] == id[l]; i++) a[i] += c, sum[id[i]] += c;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; id[i] == id[r]; i--) a[i] += c, sum[id[i]] += c;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = id[l] + <span class="hljs-number">1</span>; i &lt;= id[r] - <span class="hljs-number">1</span>; i++) tag[i] += c, sum[i] += c * <span class="hljs-built_in">get</span>(i);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (id[l] == id[r])<br>    &#123;<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i++)<br>            res = (res + a[i] + tag[id[i]]) % c;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; id[i] == id[l]; i++) res = (res + a[i] + tag[id[i]]) % c;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; id[i] == id[r]; i--) res = (res + a[i] + tag[id[i]]) % c;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = id[l] + <span class="hljs-number">1</span>; i &lt;= id[r] - <span class="hljs-number">1</span>; i++) res = (res + sum[i]) % c;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    n = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        a[i] = <span class="hljs-built_in">read</span>();<br>        id[i] = (i - <span class="hljs-number">1</span>) / B + <span class="hljs-number">1</span>;<br>        sum[id[i]] += a[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> op = <span class="hljs-built_in">read</span>(), l = <span class="hljs-built_in">read</span>(), r = <span class="hljs-built_in">read</span>(), c = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">0</span>) <span class="hljs-built_in">modify</span>(l, r, c);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-built_in">query</span>(l, r, c + <span class="hljs-number">1</span>));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LOJ6281"><a href="#LOJ6281" class="headerlink" title="LOJ6281"></a>LOJ6281</h3><p><a href="https://loj.ac/p/6281">题目传送门</a></p><p>注意到，因为值域为 $[0, 2^{31}-1]$，所以每个数至多被开方四次就变为 $1$，所以我们可以用一个 $flag$ 数组维护当前块内的数是否全部为 $1$，如果不是就对当前块进行暴力修改，在修改过程中顺便维护 $sum$ 和 $flag$，如果当前块的 $flag$ 为 $1$，则可以跳过修改，查询与上题一致。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e4</span> + <span class="hljs-number">10</span>, B = <span class="hljs-number">225</span>;<br><span class="hljs-type">int</span> a[N], id[N], flag[B], sum[B];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    flag[x] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = (x - <span class="hljs-number">1</span>) * B + <span class="hljs-number">1</span>; i &lt;= <span class="hljs-built_in">min</span>(n, x * B); i++)<br>        flag[x] &amp;= a[i] == <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (id[l] == id[r])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (flag[id[l]]) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i++)<br>        &#123;<br>            sum[id[i]] = sum[id[i]] - a[i] + <span class="hljs-built_in">sqrt</span>(a[i]);<br>            a[i] = <span class="hljs-built_in">sqrt</span>(a[i]);<br>        &#125;<br>        <span class="hljs-built_in">update</span>(id[l]);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!flag[id[l]])<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; id[i] == id[l]; i++)<br>            sum[id[i]] = sum[id[i]] - a[i] + <span class="hljs-built_in">sqrt</span>(a[i]), a[i] = <span class="hljs-built_in">sqrt</span>(a[i]);<br>        <span class="hljs-built_in">update</span>(id[l]);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!flag[id[r]])<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; id[i] == id[r]; i--)<br>            sum[id[i]] = sum[id[i]] - a[i] + <span class="hljs-built_in">sqrt</span>(a[i]), a[i] = <span class="hljs-built_in">sqrt</span>(a[i]);<br>        <span class="hljs-built_in">update</span>(id[r]);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = id[l] + <span class="hljs-number">1</span>; i &lt;= id[r] - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (flag[i]) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = (i - <span class="hljs-number">1</span>) * B + <span class="hljs-number">1</span>; j &lt;= <span class="hljs-built_in">min</span>(n, i * B); j++)<br>            sum[i] = sum[i] - a[j] + <span class="hljs-built_in">sqrt</span>(a[j]), a[j] = <span class="hljs-built_in">sqrt</span>(a[j]);<br>        <span class="hljs-built_in">update</span>(i);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (id[l] == id[r])<br>    &#123;<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i++)<br>            res += a[i];<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; id[i] == id[l]; i++) res += a[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; id[i] == id[r]; i--) res += a[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = id[l] + <span class="hljs-number">1</span>; i &lt;= id[r] - <span class="hljs-number">1</span>; i++) res += sum[i];<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    n = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        a[i] = <span class="hljs-built_in">read</span>();<br>        id[i] = (i - <span class="hljs-number">1</span>) / B + <span class="hljs-number">1</span>;<br>        sum[id[i]] += a[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= id[n]; i++)<br>    &#123;<br>        flag[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = (i - <span class="hljs-number">1</span>) * B + <span class="hljs-number">1</span>; j &lt;= <span class="hljs-built_in">min</span>(n, i * B); j++)<br>            flag[i] &amp;= a[j] == <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> op = <span class="hljs-built_in">read</span>(), l = <span class="hljs-built_in">read</span>(), r = <span class="hljs-built_in">read</span>(), c = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">0</span>) <span class="hljs-built_in">modify</span>(l, r);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">query</span>(l, r));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LOJ6282"><a href="#LOJ6282" class="headerlink" title="LOJ6282"></a>LOJ6282</h3><p><a href="https://loj.ac/p/6282">题目传送门</a></p><p>一个显然的做法是对序列进行分块，然后对于每个插入操作，我们直接在对应块中插入，对于查询操作，就把块中对应位置的值输出，但是这种做法有一个问题，就是如果有多个数被连续插入一个块中，时间复杂度就无法保证，所以当一个块长度超过一个给定值，我们就块重构，这样可以通过本题。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pii pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>, B = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> a[N &lt;&lt; <span class="hljs-number">1</span>], id[N &lt;&lt; <span class="hljs-number">1</span>];<br>vector&lt;<span class="hljs-type">int</span>&gt; b[(N / B) &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function">pii <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (x &gt; b[k].<span class="hljs-built_in">size</span>())<br>        x -= b[k].<span class="hljs-built_in">size</span>(), k++;<br>    <span class="hljs-keyword">return</span> &#123;k, x - <span class="hljs-number">1</span>&#125;;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rebuild</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= id[n]; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> l = b[i].<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; l; j++)<br>            a[++len] = b[i][j];<br>        b[i].<span class="hljs-built_in">clear</span>();<br>    &#125;<br>    n = len;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        id[i] = (i - <span class="hljs-number">1</span>) / B + <span class="hljs-number">1</span>;<br>        b[id[i]].<span class="hljs-built_in">push_back</span>(a[i]);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    pii t = <span class="hljs-built_in">query</span>(l);<br>    b[t.first].<span class="hljs-built_in">insert</span>(b[t.first].<span class="hljs-built_in">begin</span>() + t.second, r);<br>    <span class="hljs-keyword">if</span> (b[t.first].<span class="hljs-built_in">size</span>() &gt; (B &lt;&lt; <span class="hljs-number">2</span>)) <span class="hljs-built_in">rebuild</span>();<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ask</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    pii t = <span class="hljs-built_in">query</span>(x);<br>    <span class="hljs-keyword">return</span> b[t.first][t.second];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    n = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        a[i] = <span class="hljs-built_in">read</span>();<br>        id[i] = (i - <span class="hljs-number">1</span>) / B + <span class="hljs-number">1</span>;<br>        b[id[i]].<span class="hljs-built_in">push_back</span>(a[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> op = <span class="hljs-built_in">read</span>(), l = <span class="hljs-built_in">read</span>(), r = <span class="hljs-built_in">read</span>(), c = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">0</span>) <span class="hljs-built_in">insert</span>(l, r);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">ask</span>(r));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h3 id="LOJ6283"><a href="#LOJ6283" class="headerlink" title="LOJ6283"></a>LOJ6283</h3><p><a href="https://loj.ac/p/6283">题目传送门</a></p><p>这题多了一个乘法操作，所以我们多维护一个乘法的标记 $mul$，表示当前块被乘了多少，因为加法和乘法的优先级不同，所以在每一次修改前对不完整块下传一下标记即可通过。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>, mod = <span class="hljs-number">1e4</span> + <span class="hljs-number">7</span>, B = <span class="hljs-number">320</span>;<br><span class="hljs-type">int</span> a[N], id[N], add[B], mul[B];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>;<br>        c = <span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = (x - <span class="hljs-number">1</span>) * B + <span class="hljs-number">1</span>; i &lt;= <span class="hljs-built_in">min</span>(n, x * B); i++)<br>        a[i] = (a[i] * mul[x] + add[x]) % mod;<br>    add[x] = <span class="hljs-number">0</span>, mul[x] = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">plu</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (id[l] == id[r])<br>    &#123;<br>        <span class="hljs-built_in">update</span>(id[l]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i++)<br>            a[i] = (a[i] + c) % mod;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">update</span>(id[l]);<br>    <span class="hljs-built_in">update</span>(id[r]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; id[i] == id[l]; i++) a[i] = (a[i] + c) % mod;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; id[i] == id[r]; i--) a[i] = (a[i] + c) % mod;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = id[l] + <span class="hljs-number">1</span>; i &lt;= id[r] - <span class="hljs-number">1</span>; i++) add[i] = (add[i] + c) % mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">muli</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (id[l] == id[r])<br>    &#123;<br>        <span class="hljs-built_in">update</span>(id[l]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i++)<br>            a[i] = a[i] * c % mod;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">update</span>(id[l]);<br>    <span class="hljs-built_in">update</span>(id[r]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; id[i] == id[l]; i++) a[i] = a[i] * c % mod;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; id[i] == id[r]; i--) a[i] = a[i] * c % mod;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = id[l] + <span class="hljs-number">1</span>; i &lt;= id[r] - <span class="hljs-number">1</span>; i++) add[i] = add[i] * c % mod, mul[i] = mul[i] * c % mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (a[x] * mul[id[x]] + add[id[x]]) % mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    n = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        a[i] = <span class="hljs-built_in">read</span>() % mod;<br>        id[i] = (i - <span class="hljs-number">1</span>) / B + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= id[n]; i++) mul[i] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> op = <span class="hljs-built_in">read</span>(), l = <span class="hljs-built_in">read</span>(), r = <span class="hljs-built_in">read</span>(), c = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">0</span>) <span class="hljs-built_in">plu</span>(l, r, c);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) <span class="hljs-built_in">muli</span>(l, r, c);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">query</span>(r));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h3 id="LOJ6284"><a href="#LOJ6284" class="headerlink" title="LOJ6284"></a>LOJ6284</h3><p><a href="https://loj.ac/p/6284">题目传送门</a></p><p>首先值域太大了，离散化一下，然后用 $tag[i]$ 表示第 $i$ 块被覆盖成了什么，然后用 $cnt[i][j]$ 表示 <strong>$tag[i]$ 不存在</strong> 的情况下 $j$ 的出现次数。</p><p>对于每个修改操作，还是套路对每个不完整块下传懒标记，然后修改完整块的 $tag$ 即可。</p><p>对于每个查询操作，我们也对不完整块下传懒标记，然后对于每个完整块，如果 $tag[i]$ 存在，则暴力判断 $tag[i]$ 是否与要查找的值相等，不存在则直接加上 $cnt$ 值即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>, B = <span class="hljs-number">320</span>, INF = <span class="hljs-number">-114514</span>;<br><span class="hljs-type">int</span> a[N], id[N], tag[B];<br><span class="hljs-type">int</span> cnt[N][B];<br><span class="hljs-type">int</span> n;<br>unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; h;<br><span class="hljs-type">int</span> tot;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (tag[x] == INF) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = (x - <span class="hljs-number">1</span>) * B + <span class="hljs-number">1</span>; i &lt;= <span class="hljs-built_in">min</span>(n, x * B); i++)<br>        cnt[x][a[i]]--, cnt[x][tag[x]]++, a[i] = tag[x];<br>    tag[x] = INF;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(n, x * B) - (x - <span class="hljs-number">1</span>) * B;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (id[l] == id[r])<br>    &#123;<br>        <span class="hljs-built_in">update</span>(id[l]);<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i++)<br>            <span class="hljs-keyword">if</span> (a[i] == c) res++;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-built_in">update</span>(id[l]);<br>    <span class="hljs-built_in">update</span>(id[r]);<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; id[i] == id[l]; i++)<br>        <span class="hljs-keyword">if</span> (a[i] == c) res++;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; id[i] == id[r]; i--)<br>        <span class="hljs-keyword">if</span> (a[i] == c) res++;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = id[l] + <span class="hljs-number">1</span>; i &lt;= id[r] - <span class="hljs-number">1</span>; i++)<br>        <span class="hljs-keyword">if</span> (tag[i] != INF) res += (tag[i] == c) * <span class="hljs-built_in">get</span>(i);<br>        <span class="hljs-keyword">else</span> res += cnt[i][c];<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (id[l] == id[r])<br>    &#123;<br>        <span class="hljs-built_in">update</span>(id[l]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i++) cnt[id[i]][a[i]]--, cnt[id[i]][c]++, a[i] = c;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">update</span>(id[l]);<br>    <span class="hljs-built_in">update</span>(id[r]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; id[i] == id[l]; i++) cnt[id[i]][a[i]]--, cnt[id[i]][c]++, a[i] = c;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; id[i] == id[r]; i--) cnt[id[i]][a[i]]--, cnt[id[i]][c]++, a[i] = c;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = id[l] + <span class="hljs-number">1</span>; i &lt;= id[r] - <span class="hljs-number">1</span>; i++) tag[i] = c;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    n = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        a[i] = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span> (!h[a[i]]) h[a[i]] = ++tot;<br>        a[i] = h[a[i]];<br>        id[i] = (i - <span class="hljs-number">1</span>) / B + <span class="hljs-number">1</span>;<br>        cnt[id[i]][a[i]]++;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= id[n]; i++) tag[i] = INF;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> l = <span class="hljs-built_in">read</span>(), r = <span class="hljs-built_in">read</span>(), c = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span> (!h[c]) h[c] = ++tot;<br>        c = h[c];<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">query</span>(l, r, c));<br>        <span class="hljs-built_in">modify</span>(l, r, c);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LOJ6285"><a href="#LOJ6285" class="headerlink" title="LOJ6285"></a>LOJ6285</h3><p><a href="https://loj.ac/p/6285">题目传送门</a></p><p>这题回滚莫队可以水过去，但如果强制在线呢?</p><p>我们先对原序列分块，然后考虑 $l$ 和 $r$ 之间的众数，显然这个众数只可能是中间块的众数或是出现在 $l$ 和 $r$ 所在不完整块的数，所以我们可以这么搞:</p><p>$f[l][r]$ 表示第 $l$ 块到第 $r$ 块的最小众数。</p><p>$s[i][j]$ 表示在第 $1$ 块到第 $i$ 块中 $j$ 的出现次数。</p><p>不难发现这两个东西都可以 $O(n\sqrt{n})$ 求出，然后查找的时候直接把中间块的众数与左右块出现的数逐一比对即可得出答案，具体实现见代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>, B = <span class="hljs-number">320</span>;<br><span class="hljs-type">bool</span> vis[N];<br><span class="hljs-type">int</span> a[N], b[N], id[N], len;<br><span class="hljs-type">int</span> f[B][B], s[B][N];<br><span class="hljs-type">int</span> cnt[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">lower_bound</span>(b + <span class="hljs-number">1</span>, b + len + <span class="hljs-number">1</span>, x) - b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j, <span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> s[j][k] - s[i - <span class="hljs-number">1</span>][k];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(cnt, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> cnt);<br>    <span class="hljs-keyword">if</span> (id[l] == id[r])<br>    &#123;<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i++)<br>        &#123;<br>            cnt[a[i]]++;<br>            <span class="hljs-keyword">if</span> (cnt[a[i]] &gt; cnt[res] || (cnt[a[i]] == cnt[res] &amp;&amp; a[i] &lt; res))<br>                res = a[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-type">int</span> res = f[id[l] + <span class="hljs-number">1</span>][id[r] - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; id[i] == id[l]; i++)<br>    &#123;<br>        cnt[a[i]]++;<br>        <span class="hljs-keyword">if</span> (cnt[a[i]] + <span class="hljs-built_in">get</span>(id[l] + <span class="hljs-number">1</span>, id[r] - <span class="hljs-number">1</span>, a[i]) &gt; cnt[res] + <span class="hljs-built_in">get</span>(id[l] + <span class="hljs-number">1</span>, id[r] - <span class="hljs-number">1</span>, res))<br>            res = a[i];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cnt[a[i]] + <span class="hljs-built_in">get</span>(id[l] + <span class="hljs-number">1</span>, id[r] - <span class="hljs-number">1</span>, a[i]) == cnt[res] + <span class="hljs-built_in">get</span>(id[l] + <span class="hljs-number">1</span>, id[r] - <span class="hljs-number">1</span>, res) &amp;&amp; a[i] &lt; res)<br>            res = a[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; id[i] == id[r]; i--)<br>    &#123;<br>        cnt[a[i]]++;<br>        <span class="hljs-keyword">if</span> (cnt[a[i]] + <span class="hljs-built_in">get</span>(id[l] + <span class="hljs-number">1</span>, id[r] - <span class="hljs-number">1</span>, a[i]) &gt; cnt[res] + <span class="hljs-built_in">get</span>(id[l] + <span class="hljs-number">1</span>, id[r] - <span class="hljs-number">1</span>, res))<br>            res = a[i];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cnt[a[i]] + <span class="hljs-built_in">get</span>(id[l] + <span class="hljs-number">1</span>, id[r] - <span class="hljs-number">1</span>, a[i]) == cnt[res] + <span class="hljs-built_in">get</span>(id[l] + <span class="hljs-number">1</span>, id[r] - <span class="hljs-number">1</span>, res) &amp;&amp; a[i] &lt; res)<br>            res = a[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        a[i] = <span class="hljs-built_in">read</span>(), b[i] = a[i];<br>        id[i] = (i - <span class="hljs-number">1</span>) / B + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(b + <span class="hljs-number">1</span>, b + n + <span class="hljs-number">1</span>);<br>    len = <span class="hljs-built_in">unique</span>(b + <span class="hljs-number">1</span>, b + n + <span class="hljs-number">1</span>) - b - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) a[i] = <span class="hljs-built_in">find</span>(a[i]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= id[n]; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = (i - <span class="hljs-number">1</span>) * B + <span class="hljs-number">1</span>; j &lt;= <span class="hljs-built_in">min</span>(n, i * B); j++)<br>            s[i][a[j]]++;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= len; j++)<br>            s[i][j] += s[i - <span class="hljs-number">1</span>][j];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= id[n]; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= id[n]; j++)<br>        &#123;<br>            <span class="hljs-type">int</span> &amp;t = f[i][j];<br>            t = f[i][j - <span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = (j - <span class="hljs-number">1</span>) * B + <span class="hljs-number">1</span>; k &lt;= <span class="hljs-built_in">min</span>(n, j * B); k++)<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">get</span>(i, j, a[k]) &gt; <span class="hljs-built_in">get</span>(i, j, t)) t = a[k];<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">get</span>(i, j, a[k]) == <span class="hljs-built_in">get</span>(i, j, t) &amp;&amp; a[k] &lt; t) t = a[k];<br>        &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> l = <span class="hljs-built_in">read</span>(), r = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, b[<span class="hljs-built_in">query</span>(l, r)]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分块</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】P2464郁闷的小J</title>
    <link href="/2022/08/11/P2464%E9%83%81%E9%97%B7%E7%9A%84%E5%B0%8FJ/"/>
    <url>/2022/08/11/P2464%E9%83%81%E9%97%B7%E7%9A%84%E5%B0%8FJ/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2464">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是一个不会写带修莫队所以分块乱搞的蒟蒻。</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>分块</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先看到这个 $2^{31}-1$ 的值域，肯定要离散化，离散化后考虑对原序列分块，块长为 $\sqrt{n}$。</p><p>我们用 $cnt[i][x]$ 表示第 $i$ 块中 $x$ 的出现次数。</p><p>对于每个修改操作，我们将当前块中原数出现次数减一，新数出现次数加一，最后在原序列中修改即可。</p><p>对于每个查询操作，我们分两种情况考虑:</p><ol><li>若 $l$ 和 $r$ 在同一块中，那么我们直接扫描暴力得出答案。</li><li>若 $l$ 和 $r$ 在不同块中，那么我们对 $l$ 和 $r$ 所在块分别暴力统计，用维护的 $cnt$ 数组统计中间块答案即可。</li></ol><p>时间复杂度 $O(n\sqrt{n})$。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>, B = <span class="hljs-number">320</span>;<br><span class="hljs-type">int</span> a[N], tot;<br><span class="hljs-type">int</span> cnt[B][N];<br><span class="hljs-type">int</span> id[N];<br>unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; h;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!h[c]) h[c] = ++tot;<br>    c = h[c];<br>    cnt[id[x]][a[x]]--, cnt[id[x]][c]++;<br>    a[x] = c;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    k = h[k];<br>    <span class="hljs-keyword">if</span> (id[l] == id[r])<br>    &#123;<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i++)<br>            <span class="hljs-keyword">if</span> (a[i] == k) res++; <br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; id[i] == id[l]; i++)<br>        <span class="hljs-keyword">if</span> (a[i] == k) res++;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; id[i] == id[r]; i--)<br>        <span class="hljs-keyword">if</span> (a[i] == k) res++;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = id[l] + <span class="hljs-number">1</span>; i &lt;= id[r] - <span class="hljs-number">1</span>; i++)<br>        res += cnt[i][k];<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        a[i] = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span> (!h[a[i]]) h[a[i]] = ++tot;<br>        a[i] = h[a[i]];<br>        id[i] = (i - <span class="hljs-number">1</span>) / B + <span class="hljs-number">1</span>;<br>        cnt[id[i]][a[i]]++;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (m--)<br>    &#123;<br>        <span class="hljs-type">char</span> op;<br>        cin &gt;&gt; op;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;C&#x27;</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> x = <span class="hljs-built_in">read</span>(), c = <span class="hljs-built_in">read</span>();<br>            <span class="hljs-built_in">modify</span>(x, c);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-type">int</span> l = <span class="hljs-built_in">read</span>(), r = <span class="hljs-built_in">read</span>(), k = <span class="hljs-built_in">read</span>();<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">query</span>(l, r, k));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>分块</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】SP3266 KQUERY</title>
    <link href="/2022/08/09/SP3266%20KQUERY/"/>
    <url>/2022/08/09/SP3266%20KQUERY/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/SP3266">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现有题解大多写的都是主席树，这里提供一个好想而且好写的分块做法。</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>分块</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>我们考虑对原数组进行分块，每个块内分别排序，在处理询问时，我们分两种情况讨论。</p><ol><li>若 $l$ 和 $r$ 在同一块中，则暴力扫描统计答案。</li><li>若 $l$ 和 $r$ 在不同块中，则对 $l$ 和 $r$ 所处的不完整块进行暴力统计，中间的完整块直接二分查找得出答案。</li></ol><p>我在程序中取得块长为 $\sqrt n$，最终复杂度为 $O(q\log n \sqrt n)$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">3e4</span> + <span class="hljs-number">10</span>, B = <span class="hljs-number">175</span>;<br><span class="hljs-type">int</span> a[N], id[N];<br>vector&lt;<span class="hljs-type">int</span>&gt; b[B];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> i &gt; j;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (id[l] == id[r])<br>    &#123;<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i++)<br>            <span class="hljs-keyword">if</span> (a[i] &gt; k) res++;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; id[i] == id[l]; i++)<br>        <span class="hljs-keyword">if</span> (a[i] &gt; k) res++;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; id[i] == id[r]; i--)<br>        <span class="hljs-keyword">if</span> (a[i] &gt; k) res++;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = id[l] + <span class="hljs-number">1</span>; i &lt;= id[r] - <span class="hljs-number">1</span>; i++)<br>        res += <span class="hljs-built_in">lower_bound</span>(b[i].<span class="hljs-built_in">begin</span>(), b[i].<span class="hljs-built_in">end</span>(), k, <span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;()) - b[i].<span class="hljs-built_in">begin</span>();<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        a[i] = <span class="hljs-built_in">read</span>();<br>        id[i] = (i - <span class="hljs-number">1</span>) / B + <span class="hljs-number">1</span>;<br>        b[id[i]].<span class="hljs-built_in">push_back</span>(a[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= id[n]; i++)<br>        <span class="hljs-built_in">sort</span>(b[i].<span class="hljs-built_in">begin</span>(), b[i].<span class="hljs-built_in">end</span>(), cmp);<br>    <span class="hljs-type">int</span> q = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">while</span> (q--)<br>    &#123;<br>        <span class="hljs-type">int</span> l = <span class="hljs-built_in">read</span>(), r = <span class="hljs-built_in">read</span>(), k = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">query</span>(l, r, k));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>分块</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】P3701主主树</title>
    <link href="/2022/07/29/P3701%E4%B8%BB%E4%B8%BB%E6%A0%91/"/>
    <url>/2022/07/29/P3701%E4%B8%BB%E4%B8%BB%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3701">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>网络流建模入门经典题。</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>最大流</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>看到人分为两个阵营，不难想到用最大流来做。</p><p>我们建立虚拟源汇 $s$ 和 $t$，将 $s$ 向 byx 的人连边，将诗乃的人向 $t$ 连边，边的容量为这个人物初始的生命值，注意如果这个人是 J 的话初始生命值要加上本队中 YYY 的人数，然后按题目给的胜负关系两两连容量为 $1$ 的边。然后跑 dinic 最大流即可。注意最终答案与 $m$ 取 $\min$。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>, INF = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>;<br><span class="hljs-type">int</span> h[N], e[N], ne[N], f[N], idx;<br><span class="hljs-type">int</span> d[N], cur[N];<br><span class="hljs-type">int</span> s, t;<br>string a[N], b[N];<br><span class="hljs-type">int</span> l1[N], l2[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>;<br>        c = <span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b;<br>    f[idx] = c;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (a[i] == <span class="hljs-string">&quot;J&quot;</span>)<br>        <span class="hljs-keyword">return</span> b[j] == <span class="hljs-string">&quot;HK&quot;</span> || b[j] == <span class="hljs-string">&quot;W&quot;</span>;<br>    <span class="hljs-keyword">if</span> (a[i] == <span class="hljs-string">&quot;W&quot;</span>)<br>        <span class="hljs-keyword">return</span> b[j] == <span class="hljs-string">&quot;YYY&quot;</span> || b[j] == <span class="hljs-string">&quot;E&quot;</span>;<br>    <span class="hljs-keyword">if</span> (a[i] == <span class="hljs-string">&quot;HK&quot;</span>)<br>        <span class="hljs-keyword">return</span> b[j] == <span class="hljs-string">&quot;W&quot;</span> || b[j] == <span class="hljs-string">&quot;E&quot;</span>;<br>    <span class="hljs-keyword">if</span> (a[i] == <span class="hljs-string">&quot;YYY&quot;</span>)<br>        <span class="hljs-keyword">return</span> b[j] == <span class="hljs-string">&quot;J&quot;</span> || b[j] == <span class="hljs-string">&quot;HK&quot;</span>;<br>    <span class="hljs-keyword">if</span> (a[i] == <span class="hljs-string">&quot;E&quot;</span>)<br>        <span class="hljs-keyword">return</span> b[j] == <span class="hljs-string">&quot;YYY&quot;</span> || b[j] == <span class="hljs-string">&quot;J&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> d);<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(s);<br>    d[s] = <span class="hljs-number">0</span>;<br>    cur[s] = h[s];<br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> u = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> v = e[i];<br>            <span class="hljs-keyword">if</span> (d[v] == <span class="hljs-number">-1</span> &amp;&amp; f[i])<br>            &#123;<br>                d[v] = d[u] + <span class="hljs-number">1</span>;<br>                cur[v] = h[v];<br>                <span class="hljs-keyword">if</span> (v == t) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                q.<span class="hljs-built_in">push</span>(v);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> lim)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (u == t) <span class="hljs-keyword">return</span> lim;<br>    <span class="hljs-type">int</span> flow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = cur[u]; ~i &amp;&amp; flow &lt; lim; i = ne[i])<br>    &#123;<br>        cur[u] = i;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (d[v] == d[u] + <span class="hljs-number">1</span> &amp;&amp; f[i])<br>        &#123;<br>            <span class="hljs-type">int</span> t = <span class="hljs-built_in">find</span>(v, <span class="hljs-built_in">min</span>(f[i], lim - flow));<br>            <span class="hljs-keyword">if</span> (!t) d[v] = <span class="hljs-number">-1</span>;<br>            f[i] -= t, f[i ^ <span class="hljs-number">1</span>] += t, flow += t;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flow;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">dinic</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>, flow;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">bfs</span>()) <span class="hljs-keyword">while</span> (flow = <span class="hljs-built_in">find</span>(s, INF)) res += flow;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>();<br>    s = <span class="hljs-number">0</span>, t = <span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; a[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; b[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        l1[i] = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        l2[i] = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">if</span> (a[i] == <span class="hljs-string">&quot;YYY&quot;</span>) p++;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">if</span> (a[i] == <span class="hljs-string">&quot;J&quot;</span>) l1[i] += p;<br>    p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">if</span> (b[i] == <span class="hljs-string">&quot;YYY&quot;</span>) p++;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">if</span> (b[i] == <span class="hljs-string">&quot;J&quot;</span>) l2[i] += p;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">add</span>(s, i, l1[i]), <span class="hljs-built_in">add</span>(i, s, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">add</span>(n + i, t, l2[i]), <span class="hljs-built_in">add</span>(t, n + i, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(i, j))<br>                <span class="hljs-built_in">add</span>(i, n + j, <span class="hljs-number">1</span>), <span class="hljs-built_in">add</span>(n + j, i, <span class="hljs-number">0</span>);<br>        &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">min</span>(<span class="hljs-built_in">dinic</span>(), m));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>网络流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】CF585F Digits of Number Pi</title>
    <link href="/2022/07/18/CF585F%20Digits%20of%20Number%20Pi/"/>
    <url>/2022/07/18/CF585F%20Digits%20of%20Number%20Pi/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF585F">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>FOI2022 上 lh 大佬课堂例题上唯一一道会打的黑题，顺便水一发记忆化搜索的题解。</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>ACAM，数位 DP</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>看到这是个判断子串的问题，首先考虑建出 ACAM，然后我们考虑把那些字符串插入 ACAM 中。</p><p>观察到如果说存在大于 $\lfloor\frac{d}{2}\rfloor$ 的子串为 $s$ 的子串，那么一定存在长度等于 $\lfloor\frac{d}{2}\rfloor$ 的子串为 $s$ 的子串，所以我们只需把 $s$ 的所有长度为 $\lfloor\frac{d}{2}\rfloor$ 的子串插入 ACAM 即可，然后非常套路地维护一个 $ed$ 值记录一下这个节点是否为某个子串的结尾，在建 ACAM 的时候通过 $fail$ 指针转移。</p><p>然后考虑数位 DP，我们用 $f[pos][p][0/1]$ 表示还剩 $pos$ 位，走到了 ACAM 的节点 $p$，当前是否包含给定子串的方案数，然后我们直接套数位 DP 模板即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e3</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">55</span>, mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> t[N * M][<span class="hljs-number">10</span>], ed[N * M], fail[N * M], idx;<br><span class="hljs-type">char</span> s[N], l[N], r[N];<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> f[M][N * M][<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> d;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i + d - <span class="hljs-number">1</span> &lt;= len; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= i + d - <span class="hljs-number">1</span>; j++)<br>        &#123;<br>            <span class="hljs-type">int</span> c = s[j] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            <span class="hljs-keyword">if</span> (!t[p][c]) t[p][c] = ++idx;<br>            p = t[p][c];<br>        &#125;<br>        ed[p] = <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>        <span class="hljs-keyword">if</span> (t[<span class="hljs-number">0</span>][i])<br>            q.<span class="hljs-built_in">push</span>(t[<span class="hljs-number">0</span>][i]);<br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> p = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> c = t[p][i];<br>            <span class="hljs-keyword">if</span> (!c) t[p][i] = t[fail[p]][i];<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                fail[c] = t[fail[p]][i];<br>                ed[c] |= ed[fail[c]];<br>                q.<span class="hljs-built_in">push</span>(c); <br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> pos, <span class="hljs-type">int</span> p, <span class="hljs-type">bool</span> lead, <span class="hljs-type">bool</span> lim, <span class="hljs-type">bool</span> st)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!pos) <span class="hljs-keyword">return</span> st &amp;&amp; !lead;<br>    <span class="hljs-keyword">if</span> (!lead &amp;&amp; !lim &amp;&amp; ~f[pos][p][st]) <span class="hljs-keyword">return</span> f[pos][p][st];<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> up = lim ? a[pos] : <span class="hljs-number">9</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= up; i++)<br>        res = (res + <span class="hljs-built_in">dfs</span>(pos - <span class="hljs-number">1</span>, (lead &amp;&amp; !i) ? <span class="hljs-number">0</span> : t[p][i], lead &amp;&amp; !i, lim &amp;&amp; i == up, lead &amp;&amp; !i ? <span class="hljs-number">0</span> : st | ed[t[p][i]])) % mod;<br>    <span class="hljs-keyword">if</span> (!lead &amp;&amp; !lim) f[pos][p][st] = res;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> f);<br>    <span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(l + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; i++)<br>        a[len - i + <span class="hljs-number">1</span>] = l[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-type">int</span> tmp = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (a[tmp] == <span class="hljs-number">0</span>) a[tmp++] = <span class="hljs-number">9</span>;<br>    a[tmp]--;<br>    <span class="hljs-type">int</span> r1 = <span class="hljs-built_in">dfs</span>(len, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; i++)<br>        a[len - i + <span class="hljs-number">1</span>] = r[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-type">int</span> r2 = <span class="hljs-built_in">dfs</span>(len, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> (r2 - r1 + mod) % mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%s%s&quot;</span>, s + <span class="hljs-number">1</span>, l + <span class="hljs-number">1</span>, r + <span class="hljs-number">1</span>);<br>    d = <span class="hljs-built_in">strlen</span>(l + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">insert</span>();<br>    <span class="hljs-built_in">build</span>();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-built_in">solve</span>());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>ACAM</tag>
      
      <tag>数位DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】SP10502 VIDEO</title>
    <link href="/2022/07/07/SP10502%20VIDEO/"/>
    <url>/2022/07/07/SP10502%20VIDEO/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/SP10502">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ACAM + DP 入门题目。</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>ACAM</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>看到题目中这种多模式串匹配问题，第一反应是建出 ACAM，然后我们维护每个节点的贡献 $cnt[p]$，在建立 ACAM 的过程中可以顺便加上他的子串的贡献。</p><p>然后我们来考虑如何 DP，设 $f[i][j]$ 表示当前串长为 $i$ 走到了节点 $j$ 上的最大长度，那么我们显然可以由 $f[i][j]$ 来转移到它的每个儿子，具体方程为:</p><script type="math/tex; mode=display">f[i][t[j][k]] = \max_{0\le k < 3}\{f[i - 1][j] + cnt[t[j][k]]\}</script><p>最后的答案取个最大值就行了。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">30</span>, M = <span class="hljs-number">20</span>, K = <span class="hljs-number">1e3</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> t[N * M][<span class="hljs-number">3</span>], fail[N * M], cnt[N * M], idx;<br><span class="hljs-type">char</span> s[M];<br><span class="hljs-type">int</span> f[K][N * M];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; s[i]; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> c = s[i] - <span class="hljs-string">&#x27;A&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (!t[p][c]) t[p][c] = ++idx;<br>        p = t[p][c];<br>    &#125;<br>    cnt[p]++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>        <span class="hljs-keyword">if</span> (t[<span class="hljs-number">0</span>][i])<br>            q.<span class="hljs-built_in">push</span>(t[<span class="hljs-number">0</span>][i]);<br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> p = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> c = t[p][i];<br>            <span class="hljs-keyword">if</span> (!c) t[p][i] = t[fail[p]][i];<br>            <span class="hljs-keyword">else</span> fail[c] = t[fail[p]][i], q.<span class="hljs-built_in">push</span>(c);<br>        &#125;<br>        cnt[p] += cnt[fail[p]];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s + <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">insert</span>();<br>    &#125;<br>    <span class="hljs-built_in">build</span>();<br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0xcf</span>, <span class="hljs-keyword">sizeof</span> f);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= m; i++) f[i][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= idx; j++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">3</span>; k++)<br>            &#123;<br>                <span class="hljs-type">int</span> c = t[j][k];<br>                f[i][c] = <span class="hljs-built_in">max</span>(f[i][c], f[i - <span class="hljs-number">1</span>][j] + cnt[c]);<br>            &#125;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= idx; i++) res = <span class="hljs-built_in">max</span>(res, f[m][i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>ACAM</tag>
      
      <tag>动态规划DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】P3311数数</title>
    <link href="/2022/07/07/P3311%E6%95%B0%E6%95%B0/"/>
    <url>/2022/07/07/P3311%E6%95%B0%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3311">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ACAM + 数位 DP 好题。</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>ACAM，数位 DP</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>看到这个题目，很容易想到先把 ACAM 给建出来，然后我们在 Trie 图上的每个节点多维护一个 $ed$ 值，表示这个节点是否为一个模式串的结尾。我们很容易想到，在建立 ACAM 的时候，如果一个节点的 $fail$ 指针指向的节点的 $ed$ 值为真，那么这个节点的 $ed$ 值也为真，那么我们就完成了建立 ACAM 的步骤。</p><p>下一步为数位 DP，我采用的是记忆化搜索的写法，设 $f[pos][p]$ 表示还剩 $pos$ 位，在 ACAM 上当前走到的节点为 $p$ 的时候的合法方案，直接套上数位 DP 板子即可，不过这里要注意，匹配过程一旦出现当前节点的 $ed$ 值为真，那么直接返回，最后注意一下前导零的判断即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1510</span>, mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> t[N][<span class="hljs-number">10</span>], fail[N], ed[N], idx;<br><span class="hljs-type">char</span> s[N], S[N];<br><span class="hljs-type">int</span> f[N][N];<br><span class="hljs-type">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; s[i]; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> c = s[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (!t[p][c]) t[p][c] = ++idx;<br>        p = t[p][c];<br>    &#125;<br>    ed[p] = <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>        <span class="hljs-keyword">if</span> (t[<span class="hljs-number">0</span>][i])<br>            q.<span class="hljs-built_in">push</span>(t[<span class="hljs-number">0</span>][i]);<br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> p = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> c = t[p][i];<br>            <span class="hljs-keyword">if</span> (!c) t[p][i] = t[fail[p]][i];<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                fail[c] = t[fail[p]][i];<br>                ed[c] |= ed[fail[c]];<br>                q.<span class="hljs-built_in">push</span>(c);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> pos, <span class="hljs-type">int</span> p, <span class="hljs-type">bool</span> lead, <span class="hljs-type">bool</span> lim)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (ed[p]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (!pos) <span class="hljs-keyword">return</span> !lead;<br>    <span class="hljs-keyword">if</span> (!lim &amp;&amp; !lead &amp;&amp; ~f[pos][p]) <span class="hljs-keyword">return</span> f[pos][p];<br>    <span class="hljs-type">int</span> up = lim ? a[pos] : <span class="hljs-number">9</span>;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= up; i++)<br>        res = (res + <span class="hljs-built_in">dfs</span>(pos - <span class="hljs-number">1</span>, (lead &amp;&amp; !i) ? <span class="hljs-number">0</span> : t[p][i], lead &amp;&amp; !i, lim &amp;&amp; i == up)) % mod;<br>    <span class="hljs-keyword">if</span> (!lim &amp;&amp; !lead) f[pos][p] = res;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> f);<br>    <span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(S + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; i++)  <br>        a[len - i + <span class="hljs-number">1</span>] = S[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(len, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, S + <span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s + <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">insert</span>();<br>    &#125;<br>    <span class="hljs-built_in">build</span>();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">solve</span>());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>ACAM</tag>
      
      <tag>数位DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【游记】期末考游记</title>
    <link href="/2022/07/02/%E6%9C%9F%E6%9C%AB%E8%80%83%E6%B8%B8%E8%AE%B0/"/>
    <url>/2022/07/02/%E6%9C%9F%E6%9C%AB%E8%80%83%E6%B8%B8%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>翻盘 rk1，赢麻了。</p><span id="more"></span><h2 id="Day"><a href="#Day" class="headerlink" title="Day -???"></a>Day -???</h2><p>半个学期语文作业没写， 被 zm 叫办公室处刑，说考后背《送东阳马生序》，语文没上 $130$ 杀了我，感觉非常悲伤，而且掉出段前十要 AFO 了。上数学课又在推有限微积分的式子，被 cjs 当场点名不听课，再次被叫办公室，说低于 $145$ 分就拿钱请他吃饭 <del>敲诈勒索举报了</del>。ccg 又要求英语拿段一。期末 buff 直接叠满。</p><h2 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h2><p> 不想复习，打 phigros。</p><h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2><p>上午考语文，由于 zm 告诉我们今年语文会很水，所以考得非常放松，感觉阅读答得还行，但是作文有点小裂，略微估了一下有 $130+$，感觉状态非常好，可以冲一把段一。</p><p>下午第一场地理，八班同学说今年 ly 出卷，感觉十分不友好。果然，考了一堆没学过的东西，最后一个大题考了什么水文特征，但是 lzy 上课完全没有讲过这个玩意，直接开始乱写，考完对了一下答案，zlt 表示地理非常简单，周围一圈人均比我高，直接自闭。第二场道法，感觉开放题特别多，不知道是什么新型题型，反正直接乱搞，考完又去对答案，好像选择错了一道，再次自闭。</p><h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h2><p>上午考数学，这也是我最慌的一科，因为期末模拟的卷子压轴题基本都不会做，很少能写完，只能祈祷出题人善良。发卷子之后看了一下压轴，感觉非常不可做，又想到 cjs 的<del>敲诈</del>行为，感觉要人财两空，因为自己太过紧张，填空压轴题卡了好久，更加感觉要炸裂，只能想着跳过，写到第 $24$ 题，第三小题完全不知道在说什么，直接采用枚举法来枚举取值范围，算出了一个看起来很合理的答案，然后直接写压轴。本来想着压轴很难的，但是看 rzr 坐我旁边已经开始检查，感觉还是可以切掉，果然，压轴挺水的，直接作平行三次全等搞定，然后又把填空压轴补了一下，看到时间还剩半个小时，感觉超常发挥了，非常的妙。考后对了一下 $24$ 题第三小题，发现大家答案都不一样，有点慌。</p><p>下午是历史和生物，考历史的时候发现第一个选择就不会做，感觉非常困难。果然，后面的解答题直接给我看傻了，只能完全靠着意志答题，考后和 zrh，zlt 等人对一波答案，选择直接挂了两道，非常慌，感觉历史要下 $90$。第二场生物，感觉选择题非常水，但是一看填空题一堆模棱两可的答案，感觉出得非常不严谨，考完与生物神仙 rzr，zrh 等人继续对答案，发现 nmd 判断题是写 T 和 F，打钩打叉的我直接傻了，感觉生物直接崩盘，甚至感觉要 AFO 了。</p><h2 id="Day-3"><a href="#Day-3" class="headerlink" title="Day 3"></a>Day 3</h2><p>早上 zm 通知生物打钩打叉不扣分，我直接乐了。</p><p>只剩一科英语了，由于模拟考拿了个 rk1，非常自信，直接不复习，然后被 ccg 给 D 了。发卷子，看了一下前几道语法题，感觉非常的困难，语法题基本全部都是蒙的，感觉这次英语要炸裂，但是阅读题又很水，考完和 zlt 对了一下语法题，答案竟然出奇的一致，我忽然感觉英语要上天了。</p><p>下午讲评主课试卷。考英语直接阳寿用尽，获得了全班唯一的选择全对，但是由于自己的 nt 错误，把 special 写成 speceil，痛失 $1$ 分。<del>(话说我模拟考也是这么写的，ccg 每次都打钩)</del>。数学直接原地爆炸，那道用枚举法写的题直接错掉，问了 cjs 分值，他说直接写出答案的题会少扣分，但是估计也 $5$ 分没了，再加上一些杂七杂八的过程，我只能跟  cjs 说上不了 $145$，又被骂一顿，cjs 还发了篇文章给我妈。语文感觉语积超神了，只要作文正常 $130$ 应该没有问题。</p><p>晚上回家路上，我妈收到 cjs 的文章后又骂了我一顿，看来以后还是要听数学课，不要在课上搞 OI。回到家，突然 cjs 发来了一条微信: wcy 数学 $147$，年段第一！我 tm 直接傻了，感觉期末的希望又回来了。</p><h2 id="Day-4"><a href="#Day-4" class="headerlink" title="Day 4"></a>Day 4</h2><p>据说今天会出分，非常紧张，早上的时候 zm 发来了我的主课成绩：语文作文爆炸 $127.5$，年段 rk50, 数学 $147$，年段 rk1，英语 $147.5$ 年段 rk1。看到两科段一，我直接喜极而泣，看来段前十应该没什么问题，看小四科考好一点能不能段一。几分钟后，zm 又发来了其他成绩: 生物 $97$，地理 $95$，道法 $95$，历史 $91$，体育 $3.75$，算了一下总分足足有 $803.75 $ 感觉年段第一希望非常大，所以非常期待段排名。中午，段排出来了，果然直接 rk1。zm 似乎比我还高兴，直接不用背课文。</p><p>后来问了一下别人的成绩，rzr 好像每科都比我低一点点，只剩一个 rk23。zzm $785+$，应该有前十。不知道那个神仙语文考了 $138$，开学之后去膜一膜。</p>]]></content>
    
    
    <categories>
      
      <category>游记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游记</tag>
      
      <tag>whk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】CF911G Mass Change Queries</title>
    <link href="/2022/06/26/CF911G%20Mass%20Change%20Queries/"/>
    <url>/2022/06/26/CF911G%20Mass%20Change%20Queries/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF911G">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>线段树里开了一百多个懒标记，直接暴力艹过。</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>线段树</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先，这题最引人注目的就是这个 $[1,100]$ 的值域，那看到这种值域，我们考虑在线段树的每个节点开一个数组 $cover$，$cover[i]$ 就表示数 $i$ 现在变成了什么数。</p><p>对每个修改操作，因为值域很小，所以我们每次修改的时候直接遍历一下这个节点的 $cover$ 数组，把其中等于 $x$ 的改成 $y$ 就可以。</p><p>对于每个查询操作，我们直接从树根递归到叶子节点，把叶子结点变成的数输出即可。</p><p>最后注意一下，在懒标记下传的时候直接把左右节点的值暴力赋为父节点上对应的值即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">110</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> l, r;<br>    <span class="hljs-type">int</span> val;<br>    <span class="hljs-type">int</span> cover[M];<br>&#125; t[N &lt;&lt; <span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].l = l;<br>    t[p].r = r;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++)<br>        t[p].cover[i] = i;<br>    <span class="hljs-keyword">if</span> (l == r)<br>    &#123;<br>        t[p].val = a[l];<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    node &amp;u = t[p], &amp;l = t[p &lt;&lt; <span class="hljs-number">1</span>], &amp;r = t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++)<br>        l.cover[i] = u.cover[l.cover[i]], r.cover[i] = u.cover[r.cover[i]];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++)<br>        u.cover[i] = i;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= t[p].l &amp;&amp; t[p].r &lt;= r)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++)<br>            <span class="hljs-keyword">if</span> (t[p].cover[i] == x)<br>                t[p].cover[i] = y;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= mid) <span class="hljs-built_in">modify</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r, x, y);<br>    <span class="hljs-keyword">if</span> (r &gt; mid) <span class="hljs-built_in">modify</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r, x, y);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (t[p].l == t[p].r)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, t[p].cover[t[p].val]);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-built_in">print</span>(p &lt;&lt; <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">print</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        a[i] = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>    <span class="hljs-type">int</span> m = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">while</span> (m--)<br>    &#123;<br>        <span class="hljs-type">int</span> l = <span class="hljs-built_in">read</span>(), r = <span class="hljs-built_in">read</span>(), x = <span class="hljs-built_in">read</span>(), y = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, l, r, x, y);<br>    &#125;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>线段树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】SP10628 COT</title>
    <link href="/2022/06/25/SP10628%20COT/"/>
    <url>/2022/06/25/SP10628%20COT/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/SP10628">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个蒟蒻因为 LCA 中 <code>f[f[u][i - 1]][i - 1]</code> 打成 <code>f[u][f[u][i - 1]]</code> 调了两天。</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>主席树，LCA</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>观察到这个题其实就是树上的静态第 $k$ 小问题，那么考虑建立主席树。</p><p>我们建立主席树的时候考虑用 $root[i]$ 来表示从根节点到 $i$ 号节点的主席树的根，然后和模板题一样，维护每个主席树上 $[l, r]$ 中数字出现的个数(即 $cnt$ 值)。</p><p>然后考虑查询，这里运用到树上差分的思想，我们发现 $u, v$ 两点路径上的 $cnt$ 值其实等于</p><script type="math/tex; mode=display">cnt[u] +cnt[v] - cnt[lca(u ,v)] - cnt[fa[lca(u, v)]]</script><p>其中 $fa[x]$ 表示某个节点的父亲，那么我们就可以用主席树来写完这题了。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> lc, rc, cnt;<br>&#125; t[N &lt;&lt; <span class="hljs-number">5</span>];<br><br><span class="hljs-type">int</span> root[N];<br><span class="hljs-type">int</span> h[N], e[N &lt;&lt; <span class="hljs-number">1</span>], ne[N &lt;&lt; <span class="hljs-number">1</span>], idx;<br><span class="hljs-type">int</span> f[N][<span class="hljs-number">21</span>], dep[N];<br><span class="hljs-type">int</span> tot, len;<br><span class="hljs-type">int</span> a[N], b[N];<br><span class="hljs-type">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">lower_bound</span>(b + <span class="hljs-number">1</span>, b + len + <span class="hljs-number">1</span>, x) - b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    p = ++tot;<br>    <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span> p;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    t[p].lc = <span class="hljs-built_in">build</span>(t[p].lc, l, mid);<br>    t[p].rc = <span class="hljs-built_in">build</span>(t[p].rc, mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">clone</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[++tot] = t[p];<br>    <span class="hljs-keyword">return</span> tot;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].cnt = t[t[p].lc].cnt + t[t[p].rc].cnt;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    p = <span class="hljs-built_in">clone</span>(p);<br>    <span class="hljs-keyword">if</span> (l == r)<br>    &#123;<br>        t[p].cnt += k;<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (x &lt;= mid) t[p].lc = <span class="hljs-built_in">insert</span>(t[p].lc, l, mid, x, k);<br>    <span class="hljs-keyword">else</span> t[p].rc = <span class="hljs-built_in">insert</span>(t[p].rc, mid + <span class="hljs-number">1</span>, r, x, k);<br>    <span class="hljs-built_in">pushup</span>(p);<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    root[u] = <span class="hljs-built_in">insert</span>(root[p], <span class="hljs-number">1</span>, len, a[u], <span class="hljs-number">1</span>);<br>    dep[u] = dep[p] + <span class="hljs-number">1</span>, f[u][<span class="hljs-number">0</span>] = p;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; (<span class="hljs-number">1</span> &lt;&lt; i) &lt;= dep[u]; i++)<br>        f[u][i] = f[f[u][i - <span class="hljs-number">1</span>]][i - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (v == p) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs</span>(v, u);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (dep[x] &lt; dep[y]) <span class="hljs-built_in">swap</span>(x, y);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-built_in">log2</span>(n); i &gt;= <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-keyword">if</span> (dep[f[x][i]] &gt;= dep[y])<br>            x = f[x][i];<br>    <span class="hljs-keyword">if</span> (x == y) <span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-built_in">log2</span>(n); i &gt;= <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-keyword">if</span> (f[x][i] != f[y][i])<br>            x = f[x][i], y = f[y][i];<br>    <span class="hljs-keyword">return</span> f[x][<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span> l;<br>    <span class="hljs-type">int</span> lcnt = t[t[p].lc].cnt + t[t[q].lc].cnt - t[t[x].lc].cnt - t[t[y].lc].cnt;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (k &lt;= lcnt) <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(t[p].lc, t[q].lc, t[x].lc, t[y].lc, l, mid, k);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(t[p].rc, t[q].rc, t[x].rc, t[y].rc, mid + <span class="hljs-number">1</span>, r, k - lcnt);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        a[i] = <span class="hljs-built_in">read</span>(), b[i] = a[i];<br>    <span class="hljs-built_in">sort</span>(b + <span class="hljs-number">1</span>, b + n + <span class="hljs-number">1</span>);<br>    len = <span class="hljs-built_in">unique</span>(b + <span class="hljs-number">1</span>, b + n + <span class="hljs-number">1</span>) - b - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        a[i] = <span class="hljs-built_in">find</span>(a[i]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> u = <span class="hljs-built_in">read</span>(), v = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-built_in">add</span>(u, v);<br>        <span class="hljs-built_in">add</span>(v, u);<br>    &#125;<br>    root[<span class="hljs-number">0</span>] = <span class="hljs-built_in">build</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, len);<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">while</span> (m--)<br>    &#123;<br>        <span class="hljs-type">int</span> u = <span class="hljs-built_in">read</span>(), v = <span class="hljs-built_in">read</span>(), k = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-type">int</span> p = <span class="hljs-built_in">lca</span>(u, v);<br>        <span class="hljs-type">int</span> res = b[<span class="hljs-built_in">query</span>(root[u], root[v], root[p], root[f[p][<span class="hljs-number">0</span>]], <span class="hljs-number">1</span>, len, k)];<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>图论</tag>
      
      <tag>主席树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】P6166 scrivener</title>
    <link href="/2022/06/19/P6166%20scrivener/"/>
    <url>/2022/06/19/P6166%20scrivener/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P6166">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>主席树板子题，<a href="https://www.luogu.com.cn/problem/P1383">双倍经验</a></p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>主席树</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>看到撤销操作，考虑建立一颗主席树。</p><p>对于每个操作 $T$ 来说，我们可以维护每个版本 $ver$ 的文章长度 $len[ver]$，插入时就相当于把 $len[ver]$ 处的字符改掉。</p><p>对于每个操作 $U$ 来说，我们直接把当前根赋值为操作 $x$ 次前的根即可实现目的。</p><p>对于每个操作 $P$ 来说，直接主席树查询板子即可</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> root[N], len[N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> lc, rc;<br>    <span class="hljs-type">char</span> c;<br>&#125; t[N &lt;&lt; <span class="hljs-number">5</span>];<br><span class="hljs-type">int</span> tot, ver;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    p = ++tot;<br>    <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span> p;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    t[p].lc = <span class="hljs-built_in">build</span>(t[p].lc, l, mid);<br>    t[p].rc = <span class="hljs-built_in">build</span>(t[p].rc, mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">clone</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[++tot] = t[p];<br>    <span class="hljs-keyword">return</span> tot;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x, <span class="hljs-type">char</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    p = <span class="hljs-built_in">clone</span>(p);<br>    <span class="hljs-keyword">if</span> (l == r)<br>    &#123;<br>        t[p].c = c;<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (x &lt;= mid) t[p].lc = <span class="hljs-built_in">modify</span>(t[p].lc, l, mid, x, c);<br>    <span class="hljs-keyword">else</span> t[p].rc = <span class="hljs-built_in">modify</span>(t[p].rc, mid + <span class="hljs-number">1</span>, r, x, c);<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">char</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span> t[p].c;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (x &lt;= mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(t[p].lc, l, mid, x);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(t[p].rc, mid + <span class="hljs-number">1</span>, r, x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    root[<span class="hljs-number">0</span>] = <span class="hljs-built_in">build</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-type">char</span> op;<br>        cin &gt;&gt; op;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;T&#x27;</span>)<br>        &#123;<br>            <span class="hljs-type">char</span> x;<br>            cin &gt;&gt; x;<br>            ver++;<br>            len[ver] = len[ver - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>            root[ver] = <span class="hljs-built_in">modify</span>(root[ver - <span class="hljs-number">1</span>], <span class="hljs-number">1</span>, m, len[ver], x);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;U&#x27;</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> x;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>            ver++;<br>            len[ver] = len[ver - x - <span class="hljs-number">1</span>];<br>            root[ver] = root[ver - x - <span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-type">int</span> x;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>            x++;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>, <span class="hljs-built_in">query</span>(root[ver], <span class="hljs-number">1</span>, m, x));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>主席树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】UVA12983 The Battle of Chibi</title>
    <link href="/2022/06/14/UVA12983%20The%20Battle%20of%20Chibi/"/>
    <url>/2022/06/14/UVA12983%20The%20Battle%20of%20Chibi/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/UVA12983">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>机房模拟赛出了这个题的弱化版，赛后找来原题做了一下</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先我们可以想到一个非常简单的线性DP。</p><p>设 $f[i][j]$ 表示以 $a[i]$ 结尾，长度为 $j$ 的最长上升子序列长度，那我们可以轻松得到</p><script type="math/tex; mode=display">f[i][j] = \sum_{k=1,a[i]>a[k]} ^ {i - 1} f[k][j - 1]</script><p>但是这个做法是 $O(n^2m)$ 的，所以我们要想办法优化，我们可以发现式子右边那一坨东西很像用树状数组维护逆序对时候维护的信息，所以我们不妨用树状数组维护一下，具体操作就是先离散化一下然后每次求完插进树状数组里面。</p><p>再考虑空间上的优化，原本我们要开二维数组，所以我们现在试着用 $f[i]$ 表示以 $a[i]$ 结尾的最长上升子序列个数，我们发现，在利用树状数组维护之后第 $j$ 轮递推后的 $f[i]$ 就表示上文的 $f[i][j]$ 所以我们只需要先把 $f[i]$ 插入树状数组中再把新一轮的 $f[i]$ 求出来即可，这样我们的空间复杂度为 $O(n)$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>, mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> f[N];<br><span class="hljs-type">int</span> n, m, len;<br><span class="hljs-type">int</span> a[N], b[N];<br><span class="hljs-type">int</span> t[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">lower_bound</span>(b + <span class="hljs-number">1</span>, b + len + <span class="hljs-number">1</span>, x) - b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x &amp; -x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &lt;= n; i += <span class="hljs-built_in">lowbit</span>(i)) t[i] = (t[i] + k) % mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i; i -= <span class="hljs-built_in">lowbit</span>(i)) res = (res + t[i]) % mod;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> u = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> c = <span class="hljs-number">1</span>; c &lt;= u; c++)<br>    &#123;<br>        n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            a[i] = <span class="hljs-built_in">read</span>(), b[i] = a[i];<br>        <span class="hljs-built_in">sort</span>(b + <span class="hljs-number">1</span>, b + <span class="hljs-number">1</span> + n);<br>        len = <span class="hljs-built_in">unique</span>(b + <span class="hljs-number">1</span>, b + n + <span class="hljs-number">1</span>) - b - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            a[i] = <span class="hljs-built_in">find</span>(a[i]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            f[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= m; i++)<br>        &#123;<br>            <span class="hljs-built_in">memset</span>(t, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> t);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>                <span class="hljs-built_in">add</span>(a[j], f[j]), f[j] = <span class="hljs-built_in">query</span>(a[j] - <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            res = (res + f[i]) % mod;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%d: %d\n&quot;</span>, c, res);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划DP</tag>
      
      <tag>树状数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【比赛】20220603模拟赛</title>
    <link href="/2022/06/04/20220603%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    <url>/2022/06/04/20220603%E6%A8%A1%E6%8B%9F%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>机房有史以来最简单的模拟赛，打了1h剩下时间都在睡大觉也能AK，下面是赛时思路以及题解。</p><span id="more"></span><h2 id="思路-amp-题解"><a href="#思路-amp-题解" class="headerlink" title="思路&amp;题解"></a>思路&amp;题解</h2><h3 id="T1-kziv-cpp"><a href="#T1-kziv-cpp" class="headerlink" title="T1(kziv.cpp)"></a>T1(kziv.cpp)</h3><blockquote><p>题面：Kled 是一个经常口吐芬芳的英雄。为了使他的语音不被和谐，能在国服顺利上 线，你需要修改他的语音。修改语音有三个步骤，请依次输出完成这三个步骤后 的结果。 出现在答案中的是字母和下列字符： “.”“,”“:”“;”“!”“?”“-”和空格（空格不会在开头和结尾出现） 字母是指：小写字母’a’…’z’大写字母’A’…’Z’，其中 aeiouAEIOU 是元音字母 修改语音的步骤： 第 1 个步骤：将所有字母换成’.’； 第 2 个步骤：在第 1 个步骤的基础上，求出所有字母的个数，再将总个数除以 三，得到的最接近商的自然数 N，打印第 1 个步骤中的前 N 个字母； 第 3 个步骤：在第 2 个步骤的基础上，打印剩下的元音字母。假如没有可显示 的元音字母，则在第 1 个步骤的基础上，打印前 2/3 的字母（同样如不能被 3 整除则取最接近的整数）。</p></blockquote><p>进场开了T1，发现是一个量级不大的模拟，但是细节还是挺多的，花了我25min,机房好多人写挂，AC的只有两个人，下面是赛时代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>;<br><span class="hljs-type">char</span> a[N];<br><span class="hljs-type">bool</span> is_display[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">is_letter</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (a[i] &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; a[i] &lt;= <span class="hljs-string">&#x27;z&#x27;</span>) || (a[i] &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; a[i] &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">double</span> tmp = x - <span class="hljs-built_in">floor</span>(x);<br>    <span class="hljs-keyword">if</span> (tmp &lt; <span class="hljs-number">0.5</span>)<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)<span class="hljs-built_in">floor</span>(x);<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)<span class="hljs-built_in">ceil</span>(x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">is_yy</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (a[i] == <span class="hljs-string">&#x27;a&#x27;</span> || a[i] == <span class="hljs-string">&#x27;A&#x27;</span> || a[i] == <span class="hljs-string">&#x27;e&#x27;</span> || a[i] == <span class="hljs-string">&#x27;E&#x27;</span> || a[i] == <span class="hljs-string">&#x27;o&#x27;</span> || a[i] == <span class="hljs-string">&#x27;O&#x27;</span> || a[i] == <span class="hljs-string">&#x27;i&#x27;</span> || a[i] == <span class="hljs-string">&#x27;I&#x27;</span> || a[i] == <span class="hljs-string">&#x27;u&#x27;</span> || a[i] == <span class="hljs-string">&#x27;U&#x27;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;kviz.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;kviz.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br>    <span class="hljs-built_in">gets</span>(a + <span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> letters = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(a + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">is_letter</span>(i))<br>            <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;.&#x27;</span>), letters++;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">putchar</span>(a[i]);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-type">double</span> k = letters / <span class="hljs-number">3.0</span>;<br>    <span class="hljs-type">int</span> display = <span class="hljs-built_in">get</span>(k);<br>    <span class="hljs-type">int</span> idx = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">is_letter</span>(i) &amp;&amp; idx &lt; display)<br>            <span class="hljs-built_in">putchar</span>(a[i]), idx++, is_display[i] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">is_letter</span>(i))<br>            <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">putchar</span>(a[i]);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">is_yy</span>(i) &amp;&amp; !is_display[i])<br>        &#123;<br>            flag = <span class="hljs-literal">true</span>; <br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    <span class="hljs-keyword">if</span> (flag)<br>    &#123;<br>        <span class="hljs-type">int</span> idx = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">is_letter</span>(i) &amp;&amp; idx &lt; display)<br>                <span class="hljs-built_in">putchar</span>(a[i]), idx++;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">is_yy</span>(i))<br>                <span class="hljs-built_in">putchar</span>(a[i]);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">is_letter</span>(i))<br>                <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;.&#x27;</span>);<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-built_in">putchar</span>(a[i]);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-type">double</span> k = letters * <span class="hljs-number">2</span> / <span class="hljs-number">3.0</span>;<br>        <span class="hljs-type">int</span> u = <span class="hljs-built_in">get</span>(k);<br>        <span class="hljs-type">int</span> idx = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">is_letter</span>(i) &amp;&amp; idx &lt; u)<br>                <span class="hljs-built_in">putchar</span>(a[i]), idx++;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">is_letter</span>(i))<br>                <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;.&#x27;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">putchar</span>(a[i]);<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-built_in">fclose</span>(stdin);<br>    <span class="hljs-built_in">fclose</span>(stdout);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这题hyc大佬因为四舍五入写错直接 $100 \rightarrow 50$ 非常的可惜</p><hr><h3 id="T2-remove-cpp"><a href="#T2-remove-cpp" class="headerlink" title="T2(remove.cpp)"></a>T2(remove.cpp)</h3><blockquote><p>题面：Darius 的大招非常厉害，叫诺克萨斯断头台，能把敌方英雄直接斩杀。 有 n 个不同的敌方英雄 x1, x2, … xn 排成一排，Darius 可以从左边或右边斩杀 掉连续的 i 个英雄（只能从两边斩杀英雄），1&lt;=i&lt;=n，剩下 n-i 个英雄，再对剩 下的英雄使用大招，直到所有的英雄都被斩杀为止。 每次开大斩杀敌方英雄都能获得赏金，比如现在要斩杀从 a 位置到 b 位置上的 所有的英雄。开大得到的赏金为|xa – xb|*(b-a+1)；如果只杀掉一个英雄 i，开大得到的赏金为 xi。 求 Darius 能获得的最大赏金。</p></blockquote><p>这题是我个人认为本场难度最低的一道题，3分钟出思路，10分钟出代码，我们看到连续斩杀，可以直接考虑区间DP。</p><p>设 $f[l][r]$ 表示斩杀 $[l, r]$ 这一段所获得的的最大赏金，那我们不用思考也能得到转移方程</p><script type="math/tex; mode=display">f[l][r] = \max_{l\le k < r}(f[l][r], f[l][k] +f[k +1][r])</script><p>然后我们还有一种选择是一次直接把这些人全部杀光，所以我们还要考虑</p><script type="math/tex; mode=display">f[l][r] = \max(f[l][r], |x[r]-a[l]|(r - l + 1))</script><p>最后初始化一下，也就是</p><script type="math/tex; mode=display">f[i][i] = x[i]\ \ (1 \le i \le n)</script><p>赛时代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> f[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;remove.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;remove.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        f[i][i] = a[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">2</span>; len &lt;= n; len++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">1</span>; l + len - <span class="hljs-number">1</span> &lt;= n; l++)<br>        &#123;<br>            <span class="hljs-type">int</span> r = l + len - <span class="hljs-number">1</span>;<br>            f[l][r] = <span class="hljs-built_in">abs</span>(a[r] - a[l]) * len;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = l; k &lt; r; k++)<br>                f[l][r] = <span class="hljs-built_in">max</span>(f[l][r], f[l][k] + f[k + <span class="hljs-number">1</span>][r]);<br>        &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, f[<span class="hljs-number">1</span>][n]);<br>    <span class="hljs-built_in">fclose</span>(stdin);<br>    <span class="hljs-built_in">fclose</span>(stdout);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个题hyc大佬因为交错文件 $100 \rightarrow 0$ 非常的可惜</p><hr><h3 id="T3-game-cpp"><a href="#T3-game-cpp" class="headerlink" title="T3(game.cpp)"></a>T3(game.cpp)</h3><blockquote><p>题面：Twisted Fate 的被动技能是：在击杀了一名单位后，Twisted Fate 会投掷他的“幸 运”骰，并随机获得 0 到 6 的额外赏金。 Twisted Fate 每隔一段时间会记录自己获得的总赏金。显然总赏金是单调不减 的。这些总赏金构成了一段序列，但是由于他的好基友 Graves 的枪走火了，往 他的序列上射出了一些子弹，在序列中增加了一些本来不存在的数。为了挽回两 人的友情，Graves 需要在当前序列的子序列中找出所有可能的原序列。万幸的 是，TwistedFate 仍然记得原序列的长度。因此 Graves 现在只要找出一定长度 的不下降子序列的种数，也就是可能的原序列，就完成任务了。</p></blockquote><p>这个题目的意思就是让你求出给定长度的最长不下降子序列的个数，赛时老师说多个相同的子序列算多种情况，那么我们就可以想到一个简单的线性DP。</p><p>我们设 $f[i][j]$ 表示以 $a[i]$ 结尾长度为 $j$ 的最长不下降子序列的个数，那我们显然有</p><script type="math/tex; mode=display">f[i][j] = \sum_{k=1, a[i] \ge a[k]}^{i - 1} f[k][j - 1]</script><p>答案就是</p><script type="math/tex; mode=display">\sum_{1 \le i\le n} f[i][m]</script><p>然后就是一个简单的初始化</p><script type="math/tex; mode=display">f[i][1] = 1\ \ (1 \le i \le n)</script><p>赛时代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>;<br><span class="hljs-type">int</span> a[N];<br>ll f[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;game.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;game.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br>    <span class="hljs-type">int</span> n, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        f[i][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">2</span>; j &lt;= m; j++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt; i; k++)<br>                <span class="hljs-keyword">if</span> (a[i] &gt;= a[k])<br>                    f[i][j] += f[k][j - <span class="hljs-number">1</span>];<br>    ll res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        res += f[i][m];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, res);<br>    <span class="hljs-built_in">fclose</span>(stdin);<br>    <span class="hljs-built_in">fclose</span>(stdout);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这题hyc大佬记忆化搜索写错，直接 $100 \rightarrow 15$ 非常的可惜</p><hr><h3 id="T4-trans-cpp"><a href="#T4-trans-cpp" class="headerlink" title="T4(trans.cpp)"></a>T4(trans.cpp)</h3><blockquote><p>题面:Pantheon 现在捕捉到了 n 只 Yuumi，需要把她们传送到家里。Pantheon 的大 招是传送，但是只能将 1 只 Yuumi 传送至指定地点。现在 Pantheon 打算将 n 只 Yuumi 变为 1 只 Yuumi，具体步骤是：每只 Yuumi 都有一定的重量，且每只 Yuumi 都能附身到另外一只 Yuumi 上，从而两 Yuumi 合体为一只 Yuumi。每次 Yuumi 们进行该过程耗费的能量为两个 Yuumi 的重量之和除以 K，两 Yuumi 合体后的新 Yuumi 的新重量与上述耗能等值。Pantheon 想知道他最后一只剩下的 Yuumi 最小重量是多少</p></blockquote><p>观察到题面非常像合并果子，所以先打了一遍合并果子，发现没过样例，然后把小根堆改成了大根堆，就莫名过了，感性理解一下，就是把两个大的合并到一起，做出的贡献是最多的。</p><p>赛时代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e4</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;trans.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;trans.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br>    <span class="hljs-type">int</span> n, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    priority_queue&lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt; &gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        q.<span class="hljs-built_in">push</span>(a[i]);<br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-type">int</span> u = q.<span class="hljs-built_in">top</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-type">int</span> v = q.<span class="hljs-built_in">top</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        q.<span class="hljs-built_in">push</span>((u + v) / m);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, q.<span class="hljs-built_in">top</span>());<br>    <span class="hljs-built_in">fclose</span>(stdin);<br>    <span class="hljs-built_in">fclose</span>(stdout);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="赛后总结"><a href="#赛后总结" class="headerlink" title="赛后总结"></a>赛后总结</h2><p>本次比赛极易，成功AK，最惨hyc($400 \rightarrow 175$)</p>]]></content>
    
    
    <categories>
      
      <category>比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
      <tag>trick</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】UVA1331 Minimax Triangulation</title>
    <link href="/2022/05/29/UVA1331%20Minimax%20Triangulation/"/>
    <url>/2022/05/29/UVA1331%20Minimax%20Triangulation/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/UVA1331">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>看见是个黑题，尝试做了一下，没想到挺水的，一遍AC</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>区间DP，海伦公式</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这道题目是一道经典的区间DP题目，因为我们发现这个大多边形的每一个子多边形点的排列都是连续的，我们不妨考虑一下区间D</p><p>我们设原多边形为 $A<em>1A_2\ldots A_n$，$f[l][r]$ 表示 $A_lA</em>{l+1}\ldots A_r$ 这些点组成的多边形的最小三角剖分，我们按照区间DP的思路，枚举一下中间点，很容易得到以下转移方程:</p><script type="math/tex; mode=display">f[l][r] = \min_{l<k<r}(f[l][r], \max(f[l][k],f[k][r], S_\triangle A_lA_kA_r))</script><p>其中的 $S_\triangle A_lA_kA_r$ 我们可以使用海伦公式来求。</p><p>做到这步，你以为这题写完了吗，题目中并没有明确给出多边形是凸多边形还是凹多边形，如果题目给的是凹多边形，那我们选定的三个点所组成的三角形可能不完全在多边形内部，也就不符合我们的条件，那我们如何判断一个三角形是否在多边形内部呢？</p><p>这个问题十分简单，我们知道，如果一个点 $P$ 在 $\triangle ABC$ 的内部，则有</p><script type="math/tex; mode=display">S_\triangle ABC = S_\triangle ABP + S_\triangle BCP + S_\triangle CAP</script><p>所以我们只需要枚举一下多边形的所有点，判断一下每个点是否在三角形内部，就可以判断这个三角形合不合法了。</p><p>最后我们考虑初始化，显然初始化为正无穷，然后 $f[i][i + 1] = 0$ 即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">55</span>, INF = <span class="hljs-number">1e9</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> eps = <span class="hljs-number">1e-2</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> x, y;<br>&#125; pos[N];<br><span class="hljs-type">double</span> f[N][N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">double</span> <span class="hljs-title">dist</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> <span class="hljs-comment">// 算两点之间距离</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>((pos[i].x - pos[j].x) * (pos[i].x - pos[j].x) + (pos[i].y - pos[j].y) * (pos[i].y - pos[j].y));    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">double</span> <span class="hljs-title">area</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j, <span class="hljs-type">int</span> k)</span> <span class="hljs-comment">// 海伦公式求面积</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">double</span> a = <span class="hljs-built_in">dist</span>(i, j), b = <span class="hljs-built_in">dist</span>(j, k), c = <span class="hljs-built_in">dist</span>(k, i);<br>    <span class="hljs-type">double</span> p = (a + b + c) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>(p * (p - a) * (p - b) * (p - c));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j, <span class="hljs-type">int</span> k)</span> <span class="hljs-comment">// 判断三角形是否合法</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x = <span class="hljs-number">1</span>; x &lt;= n; x++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (x == i || x == j || x == k) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-type">double</span> s = <span class="hljs-built_in">area</span>(i, j, x) + <span class="hljs-built_in">area</span>(i, k, x) + <span class="hljs-built_in">area</span>(j, k, x) - <span class="hljs-built_in">area</span>(i, j, k);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(s) &lt; eps) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 注意double精度问题</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t);<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;pos[i].x, &amp;pos[i].y);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            f[i][i + <span class="hljs-number">1</span>] = <span class="hljs-number">0.0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">3</span>; len &lt;= n; len++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">1</span>; l + len - <span class="hljs-number">1</span> &lt;= n; l++)<br>            &#123;<br>                <span class="hljs-type">int</span> r = l + len - <span class="hljs-number">1</span>;<br>                f[l][r] = INF;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = l + <span class="hljs-number">1</span>; k &lt; r; k++)<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(l, r, k)) <span class="hljs-comment">// 只有合法才转移</span><br>                        f[l][r] = <span class="hljs-built_in">min</span>(f[l][r], <span class="hljs-built_in">max</span>(<span class="hljs-built_in">max</span>(f[l][k], f[k][r]), <span class="hljs-built_in">area</span>(l, r, k)));<br>            &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.1lf\n&quot;</span>, f[<span class="hljs-number">1</span>][n]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>动态规划DP</tag>
      
      <tag>区间DP</tag>
      
      <tag>计算几何</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】UVA1626 Brackets sequence</title>
    <link href="/2022/05/18/UVA1626%20Brackets%20sequence/"/>
    <url>/2022/05/18/UVA1626%20Brackets%20sequence/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/UVA1626">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本来以为很水的，调了很久居然是输入输出格式不对，顺便吐槽一下样例与原题不一样。</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>区间DP</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>看到题面，我们很容易想到区间DP，设 $f[l][r]$ 表示 $s[l\ldots r]$ 中最小添加的括号个数 ( $s$ 为括号序列)。</p><p>我们可以得到以下结论:</p><ol><li>如果 $s[l]$ 和 $s[r]$ 可以组成一对括号，那么 $f[l][r] = \min(f[l][r], f[l + 1][r - 1])$</li><li>枚举中转点 $k$ 有 $f[l][r] = \min_{l \le k &lt; r}(f[l][k], f[k + 1][r])$ (区间DP经典套路)</li></ol><p>然后考虑初始化。</p><p>当区间 $[l, r]$ 为空串，也就是 $l &gt; r$ 时，$f[l][r] = 0$</p><p>当区间 $[l, r]$ 长度为 1，也就是 $l = r$ 时，$f[l][r] = 1$</p><p>其余初始化成正无穷即可。</p><p>题目叫我们输出方案，经典套路，根据 DP 过程递归输出。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>;<br>string s;<br><span class="hljs-type">int</span> f[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (s[i] == <span class="hljs-string">&#x27;(&#x27;</span> &amp;&amp; s[j] == <span class="hljs-string">&#x27;)&#x27;</span>) || (s[i] == <span class="hljs-string">&#x27;[&#x27;</span> &amp;&amp; s[j] == <span class="hljs-string">&#x27;]&#x27;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> <span class="hljs-comment">// 打印 [l, r] 中的方案</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l == r)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (s[l] == <span class="hljs-string">&#x27;(&#x27;</span> || s[l] == <span class="hljs-string">&#x27;)&#x27;</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;()&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[]&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(l, r) &amp;&amp; f[l][r] == f[l + <span class="hljs-number">1</span>][r - <span class="hljs-number">1</span>])<br>    &#123;<br>        <span class="hljs-built_in">putchar</span>(s[l]);<br>        <span class="hljs-built_in">print</span>(l + <span class="hljs-number">1</span>, r - <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">putchar</span>(s[r]);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = l; k &lt; r; k++)<br>        <span class="hljs-keyword">if</span> (f[l][r] == f[l][k] + f[k + <span class="hljs-number">1</span>][r])<br>        &#123;<br>            <span class="hljs-built_in">print</span>(l, k);<br>            <span class="hljs-built_in">print</span>(k + <span class="hljs-number">1</span>, r);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-built_in">getline</span>(cin, s); <span class="hljs-comment">// 输入输出真恶心</span><br>        <span class="hljs-built_in">getline</span>(cin, s);<br>        s = <span class="hljs-string">&#x27; &#x27;</span> + s;<br>        <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> f);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (i &gt; j) f[i][j] = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == j) f[i][j] = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span> f[i][j] = <span class="hljs-number">0x3f3f3f3f</span>;<br>            &#125;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">2</span>; len &lt;= n; len++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">1</span>; l + len - <span class="hljs-number">1</span> &lt;= n; l++)<br>            &#123;<br>                <span class="hljs-type">int</span> r = l + len - <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(l, r)) f[l][r] = <span class="hljs-built_in">min</span>(f[l][r], f[l + <span class="hljs-number">1</span>][r - <span class="hljs-number">1</span>]); <span class="hljs-comment">// 可以拼括号</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = l; k &lt; r; k++)<br>                    f[l][r] = <span class="hljs-built_in">min</span>(f[l][r], f[l][k] + f[k + <span class="hljs-number">1</span>][r]);<br>            &#125;<br>        <span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>, n);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">if</span> (t) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>动态规划DP</tag>
      
      <tag>区间DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】UVA10003 Cutting Sticks</title>
    <link href="/2022/05/16/UVA10003%20Cutting%20Sticks/"/>
    <url>/2022/05/16/UVA10003%20Cutting%20Sticks/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/UVA10003">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从紫书上看见的，区间DP 入门题目</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>区间DP</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这个题的题面很像石子合并，我们不妨考虑区间DP。</p><p>我们用 $a[i]$ 表示每个断点的位置，为了方便转移，不妨设 $a[0] = 0$，$a[n + 1] = L$。</p><p>我们用 $f[l][r]$ 表示第 $l$ 个断点到第 $r$ 和断点这段区间内的最小费用，那我们按照经典做法枚举中间点 $k$ 可以得到转移方程</p><script type="math/tex; mode=display">f[l][r] = \min_{l<k<r}(f[l][r], f[l][k] + f[k][r] + a[r] - a[l])</script><p>转移方程推完了，我们考虑初始化，其中两个断点之间的木棍是不用切割的，所以初始化为</p><script type="math/tex; mode=display">f[i][i + 1] = 0 (0 \le i \le n)</script><p>最后的结果就是 $f[0][n + 1]$ (注意有个坑点就是枚举区间长度的时候要枚举到 $n + 2$ )</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> f[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> L;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;L);<br>    <span class="hljs-keyword">while</span> (L)<br>    &#123;<br>        <span class="hljs-type">int</span> n;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        a[n + <span class="hljs-number">1</span>] = L; <span class="hljs-comment">// 特殊处理</span><br>        <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> f);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++)<br>            f[i][i + <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">3</span>; len &lt;= n + <span class="hljs-number">2</span>; len++) <span class="hljs-comment">// 区间长度从3到n + 2</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">0</span>; l + len - <span class="hljs-number">1</span> &lt;= n + <span class="hljs-number">1</span>; l++) <span class="hljs-comment">// 枚举左端点</span><br>            &#123;<br>                <span class="hljs-type">int</span> r = l + len - <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = l + <span class="hljs-number">1</span>; k &lt; r; k++)<br>                    f[l][r] = <span class="hljs-built_in">min</span>(f[l][r], f[l][k] + f[k][r] + a[r] - a[l]);<br>            &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The minimum cutting is %d.\n&quot;</span>, f[<span class="hljs-number">0</span>][n + <span class="hljs-number">1</span>]);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;L);<br>    &#125;   <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>动态规划DP</tag>
      
      <tag>区间DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】UVA1630 Folding</title>
    <link href="/2022/05/04/UVA1630%20Folding/"/>
    <url>/2022/05/04/UVA1630%20Folding/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/UVA1630">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://www.luogu.com.cn/problem/P4302">双倍经验</a></p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>区间DP</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这是一道 DP 输出方案的题目，遇到这种题目不要慌，DP 输出方案大致分为两个步骤: 1.找答案 2. 记录步骤。</p><p>题目要求我们求字符串的最短折叠，那我们不妨把字符串的最短折叠长度求出来。</p><p>我们用 $f[l][r]$ 表示字符串 $[l, r]$ 这一段最短折叠的长度，用 $num[i]$ 表示数字 $i$ 的长度(如 $num[10]=2$ )，然后我们可以得出方程。</p><ol><li>如果我们不折叠，那么我们有 $f[l][r] = \min(f[l][r] + f[l][k] + f[k + 1][r]) (l \le k &lt;r)$</li><li>如果我们折叠，我们设折叠的一段为 $[l, k]$ , 然后我们判断一下 $[l, r]$ 能否由 $[l,k]$ 折叠得到，如果可以，我们有$f[l][r] = \min(f[l][r], f[l][k] +num[(r - l +1) / (r - k +1)] + 2)$ 最后加的 $2$ 表示一对括号的长度。</li></ol><p>因为我们要输出方案，所以我们在 DP 的过程中记录一下取到 $f[l][r]$ 最小值的中转点 $k$ , 并用 $p[l][r]$ 表示，并用 $fold[l][r]$ 表示 $[l, r]$ 是否折叠。</p><p>然后我们递归输出最短折叠，用 <code>print(l, r)</code> 来输出 $[l, r]$ 的最短折叠，下面我们来分类讨论一下。</p><ol><li>如果 <code>l == r</code> 那么我们直接输出 $a[l]$ ( $a$ 表示原字符串)</li><li>如果 <code>fold[l][r] == 0</code> 那么说明这一段没有折叠，直接执行 <code>print(l, p[l][r])</code> 和 <code>print(p[l][r] + 1, r)</code></li><li>如果 <code>fold[l][r] == 1</code> 那么说明这一段有折叠，我们先把左括号和折叠次数打出来，然后把折叠的一段输出出来，也就是 <code>print(l, p[l][r])</code>, 最后再把右括号打印出来。</li></ol><p>注意我们是多组数据，所以在输出完毕后要加一个换行符。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>;<br><span class="hljs-type">char</span> a[N];<br><span class="hljs-type">int</span> num[N];<br><span class="hljs-type">int</span> f[N][N];<br><span class="hljs-type">int</span> p[N][N];<br><span class="hljs-type">bool</span> fold[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> len)</span> <span class="hljs-comment">// 判断 [l,r] 能否折成每段 len 个字符</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r - len; i++)<br>        <span class="hljs-keyword">if</span> (a[i] != a[i + len]) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l == r)<br>    &#123;<br>        <span class="hljs-built_in">putchar</span>(a[l]);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!fold[l][r])<br>    &#123;<br>        <span class="hljs-built_in">print</span>(l, p[l][r]);<br>        <span class="hljs-built_in">print</span>(p[l][r] + <span class="hljs-number">1</span>, r);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d(&quot;</span>, (r - l + <span class="hljs-number">1</span>) / (p[l][r] - l + <span class="hljs-number">1</span>));<br>        <span class="hljs-built_in">print</span>(l, p[l][r]);<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;)&#x27;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++)<br>        num[i] = num[i / <span class="hljs-number">10</span>] + <span class="hljs-number">1</span>; <span class="hljs-comment">// 预处理num[i]</span><br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; a + <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(a + <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> f);<br>        <span class="hljs-built_in">memset</span>(p, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> p);<br>        <span class="hljs-built_in">memset</span>(fold, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> fold);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            f[i][i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">2</span>; len &lt;= n; len++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">1</span>; l + len - <span class="hljs-number">1</span> &lt;= n; l++)<br>            &#123;<br>                <span class="hljs-type">int</span> r = l + len - <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = l; k &lt; r; k++)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (f[l][r] &gt; f[l][k] + f[k + <span class="hljs-number">1</span>][r])<br>                    &#123;<br>                        f[l][r] = f[l][k] + f[k + <span class="hljs-number">1</span>][r];<br>                        p[l][r] = k;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = l; k &lt; r; k++)<br>                &#123;<br>                    <span class="hljs-type">int</span> a = k - l + <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">if</span> (len % a) <span class="hljs-keyword">continue</span>;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(l, r, a) &amp;&amp; f[l][r] &gt; f[l][k] + num[len / a] + <span class="hljs-number">2</span>)<br>                    &#123;<br>                        f[l][r] = f[l][k] + num[len / a] + <span class="hljs-number">2</span>;<br>                        fold[l][r] = <span class="hljs-literal">true</span>;<br>                        p[l][r] = k;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        <span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>, n);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>动态规划DP</tag>
      
      <tag>区间DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】SP33 TRIP</title>
    <link href="/2022/05/03/SP33%20TRIP/"/>
    <url>/2022/05/03/SP33%20TRIP/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/SP33">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一道输出dp方案的题目，如果你不会输出dp的方案，那么这题是一道很好的练手题</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>LCS</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>求 LCS 长度的话应该不用多说了，这里具体说一下如何把所有 LCS 找出来。(用 $f[i][j]$ 表示 LCS 长度)</p><p>我们用 $recordA[i][j]$, 来表示 $s1$ 中前 $i$ 个字符中字符 $j$ 出现的最后一个下标, $recordB[i][j]$同理，只不过是表示 $s2$中的字符。</p><p>然后在找方案的过程中，我们选择倒序遍历，每次用 $len$ 表示 LCS 取的剩下的长度，一旦有 <code>f[recordA[i][k]][recordB[j][k]] == len</code> 我们就把字符 $k$ 加入我们的答案字符串，并以 $recordA[i][k]-1$ 和 $recordB[j][k]-1$为起点继续搜索，直至 <code>len == 0</code> 将当前字符串加入答案数组中。</p><p>具体实现看代码。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>, M = <span class="hljs-number">30</span>;<br><span class="hljs-type">int</span> f[N][N];<br><span class="hljs-type">int</span> recordA[N][M], recordB[N][M];<br>vector&lt;string&gt; res;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(string s1, string s2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 求LCS长度</span><br>    <span class="hljs-type">int</span> l1 = s1.<span class="hljs-built_in">size</span>(), l2 = s2.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= l1; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= l2; j++)<br>        &#123;<br>            f[i][j] = <span class="hljs-built_in">max</span>(f[i][j - <span class="hljs-number">1</span>], f[i - <span class="hljs-number">1</span>][j]);<br>            <span class="hljs-keyword">if</span> (s1[i - <span class="hljs-number">1</span>] == s2[j - <span class="hljs-number">1</span>]) f[i][j] = f[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>        &#125;<br>    <span class="hljs-comment">// 预处理两个数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= l1; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">26</span>; j++)<br>            <span class="hljs-keyword">if</span> (s1[i - <span class="hljs-number">1</span>] == <span class="hljs-built_in">char</span>(<span class="hljs-string">&#x27;a&#x27;</span> + j)) recordA[i][j] = i;<br>            <span class="hljs-keyword">else</span> recordA[i][j] = recordA[i - <span class="hljs-number">1</span>][j];<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= l2; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">26</span>; j++)<br>            <span class="hljs-keyword">if</span> (s2[i - <span class="hljs-number">1</span>] == <span class="hljs-built_in">char</span>(<span class="hljs-string">&#x27;a&#x27;</span> + j)) recordB[i][j] = i;<br>            <span class="hljs-keyword">else</span> recordB[i][j] = recordB[i - <span class="hljs-number">1</span>][j];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j, <span class="hljs-type">int</span> len, string str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (len == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-comment">// 剩余长度为0，此时的str为一个LCS</span><br>        res.<span class="hljs-built_in">push_back</span>(str);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> || j == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 任意一个搜完了，剪枝</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">26</span>; k++)<br>    &#123;<br>        <span class="hljs-type">int</span> ki = recordA[i][k], kj = recordB[j][k];<br>        <span class="hljs-keyword">if</span> (f[ki][kj] == len) <span class="hljs-comment">// 以ki-1和kj-1为起点搜索</span><br>            <span class="hljs-built_in">print</span>(ki - <span class="hljs-number">1</span>, kj - <span class="hljs-number">1</span>, len - <span class="hljs-number">1</span>, <span class="hljs-built_in">char</span>(<span class="hljs-string">&#x27;a&#x27;</span> + k) + str); <span class="hljs-comment">// 注意倒序添加</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> f);<br>        <span class="hljs-built_in">memset</span>(recordA, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> recordA);<br>        <span class="hljs-built_in">memset</span>(recordB, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> recordB);<br>        res.<span class="hljs-built_in">clear</span>();<br>        string s1, s2;<br>        cin &gt;&gt; s1 &gt;&gt; s2;<br>        <span class="hljs-built_in">init</span>(s1, s2);<br>        <span class="hljs-type">int</span> l1 = s1.<span class="hljs-built_in">size</span>(), l2 = s2.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-built_in">print</span>(l1, l2, f[l1][l2], <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-built_in">sort</span>(res.<span class="hljs-built_in">begin</span>(), res.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; res.<span class="hljs-built_in">size</span>(); i++)<br>            cout &lt;&lt; res[i] &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>动态规划DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】SP19568 PRMQUER</title>
    <link href="/2022/04/30/SP19568%20PRMQUER/"/>
    <url>/2022/04/30/SP19568%20PRMQUER/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/SP19568">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一道线段树比较板子的题目，应该没有紫，个人评价是蓝。</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>线段树，线性筛</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>题目有一个操作是让我们求出某一个区间内质数的个数，看到 $10^7$ 的范围直接用线性筛预处理出 $1 - 10^7$ 中的所有质数，然后来考虑怎么线段树维护信息。</p><p>首先我们来考虑线段树中一个区间的属性，首先我们有查询区间个数的操作，所以我们用 $sum$ 表示一个区间内质数的个数，然后有区间覆盖，再来一个懒标记就可以。</p><p>对于每个操作 $A$ , 我们直接在对应的位置上加上这个数，然后判断新的数是不是质数，如果是质数就把这个区间的 $sum$ 变成 $1$ 反之则是 $0$ 。</p><p>对于每个操作 $R$ , 我们判断区间覆盖的数是否是质数，如果是就把对应区间的 $sum$ 改为这个区间的长度，反之则是 $0$,注意修改完要 pushdown 一下。</p><p>对于每个操作 $Q$ , 直接线段树求和板子即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">1e7</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> l, r, val;<br>    <span class="hljs-type">int</span> sum;<br>&#125; t[N &lt;&lt; <span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> primes[M], v[M];<br><span class="hljs-type">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(v, <span class="hljs-number">1</span>, <span class="hljs-keyword">sizeof</span> v);<br>    v[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; M; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (v[i])<br>            primes[++cnt] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= cnt &amp;&amp; primes[j] &lt;= M / i; j++)<br>        &#123;<br>            v[i * primes[j]] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (n &lt;= <span class="hljs-number">1e7</span> &amp;&amp; v[n]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].sum = t[p &lt;&lt; <span class="hljs-number">1</span>].sum + t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!t[p].val) <span class="hljs-keyword">return</span>;<br>    <br>    t[p &lt;&lt; <span class="hljs-number">1</span>].val = t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].val = t[p].val;<br>    t[p &lt;&lt; <span class="hljs-number">1</span>].sum = (t[p &lt;&lt; <span class="hljs-number">1</span>].r - t[p &lt;&lt; <span class="hljs-number">1</span>].l + <span class="hljs-number">1</span>) * (t[p].sum &gt; <span class="hljs-number">0</span>);<br>    t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum = (t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].r - t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].l + <span class="hljs-number">1</span>) * (t[p].sum &gt; <span class="hljs-number">0</span>);<br><br>    t[p].val = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].l = l;<br>    t[p].r = r;<br>    <span class="hljs-keyword">if</span> (l == r)<br>    &#123;<br>        t[p].val = a[l];<br>        t[p].sum = <span class="hljs-built_in">check</span>(t[p].val);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (t[p].l == t[p].r)<br>    &#123;<br>        t[p].val += k;<br>        t[p].sum = <span class="hljs-built_in">check</span>(t[p].val);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (x &lt;= mid) <span class="hljs-built_in">modify</span>(p &lt;&lt; <span class="hljs-number">1</span>, x, k);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">modify</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, x, k); <br>    <span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">cover</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= t[p].l &amp;&amp; t[p].r &lt;= r)<br>    &#123;<br>        t[p].val = k;<br>        t[p].sum = (t[p].r - t[p].l + <span class="hljs-number">1</span>) * <span class="hljs-built_in">check</span>(t[p].val);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= mid) <span class="hljs-built_in">cover</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r, k);<br>    <span class="hljs-keyword">if</span> (r &gt; mid) <span class="hljs-built_in">cover</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r, k);<br>    <span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ask</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= t[p].l &amp;&amp; t[p].r &lt;= r) <span class="hljs-keyword">return</span> t[p].sum;<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= mid) res += <span class="hljs-built_in">ask</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">if</span> (r &gt; mid) res += <span class="hljs-built_in">ask</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>    <span class="hljs-keyword">while</span> (m--)<br>    &#123;<br>        <span class="hljs-type">char</span> op;<br>        cin &gt;&gt; op;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;A&#x27;</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> x, k;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;k, &amp;x);<br>            <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, x, k);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;R&#x27;</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> l, r, k;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;k, &amp;l, &amp;r);<br>            <span class="hljs-built_in">cover</span>(<span class="hljs-number">1</span>, l, r, k);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-type">int</span> l, r;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">ask</span>(<span class="hljs-number">1</span>, l, r));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>线段树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】P4320道路相遇</title>
    <link href="/2022/04/29/P4320%E9%81%93%E8%B7%AF%E7%9B%B8%E9%81%87/"/>
    <url>/2022/04/29/P4320%E9%81%93%E8%B7%AF%E7%9B%B8%E9%81%87/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4320">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一眼出思路 tarjan+LCA，感觉可以切掉，但是最后调了两天</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>tarjan, v-DCC缩点, 圆方树，LCA</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先，我们可以发现，如果两个点在同一个 v-DCC 中，那么它们之间就没有任何必经点，所以我们直接进行 v-DCC 缩点。</p><p>因为题目给的图是连通的，所以我们缩完点后的图是一棵树，也就是常说的<strong>圆方树</strong>，那么我们要求的点数就是圆方树上两点之间圆点的个数，我们就可以对这两个点的类型进行分类讨论，我们设这两个点之间的距离为 $dist$ ( $dist$用 LCA 求 )，两点间圆点个数为 $x$ 。</p><ol><li>若这两个点都是方点，我们可以得到 $x = dist / 2$ </li><li>若这两个点一个是圆点，一个点是方点，则 $x = (dist - 1) / 2$</li><li>若这两个点都是圆点，则 $x = (dist - 2) / 2$</li></ol><p>我们发现，上述式子可以总结为一个式子</p><script type="math/tex; mode=display">x = (dist - k)/2</script><p>其中 $k$ 表示这两个点中圆点的数量。</p><p>但是题目中有说把这两个点算进去，所以我们最终的答案为 $x + 2$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">2e6</span> + <span class="hljs-number">10</span>; <span class="hljs-comment">// 注意N要开两倍，要不然RE</span><br><span class="hljs-type">int</span> h[N], e[M], ne[M], idx;<br><span class="hljs-type">int</span> H[N], E[M], NE[M];<br><span class="hljs-type">int</span> dep[N], f[N][<span class="hljs-number">21</span>];<br><span class="hljs-type">int</span> dfn[N], low[N], stk[N];<br><span class="hljs-type">int</span> id[N];<br><span class="hljs-type">bool</span> cut[N]; <span class="hljs-comment">// 表示每个点是否为割点(圆点)</span><br><span class="hljs-type">int</span> t, tt, cnt;<br><span class="hljs-type">int</span> root;<br><span class="hljs-type">int</span> n, m, q;<br>vector&lt;<span class="hljs-type">int</span>&gt; dcc[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> <span class="hljs-comment">// v-DCC 缩点板子</span></span><br><span class="hljs-function"></span>&#123;<br>    dfn[u] = low[u] = ++t;<br>    stk[++tt] = u;<br>    <span class="hljs-keyword">if</span> (h[u] == <span class="hljs-number">-1</span>)<br>    &#123;<br>        dcc[++cnt].<span class="hljs-built_in">push_back</span>(u);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> kid = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (!dfn[v])<br>        &#123;<br>            <span class="hljs-built_in">tarjan</span>(v);<br>            low[u] = <span class="hljs-built_in">min</span>(low[u], low[v]);<br>            <span class="hljs-keyword">if</span> (dfn[u] &lt;= low[v])<br>            &#123;<br>                <span class="hljs-keyword">if</span> (u != root || ++kid &gt; <span class="hljs-number">1</span>) cut[u] = <span class="hljs-literal">true</span>;<br>                cnt++;<br>                <span class="hljs-type">int</span> j;<br>                <span class="hljs-keyword">do</span> &#123;<br>                    j = stk[tt--];<br>                    dcc[cnt].<span class="hljs-built_in">push_back</span>(j);<br>                &#125; <span class="hljs-keyword">while</span> (v != j);<br>                dcc[cnt].<span class="hljs-built_in">push_back</span>(u);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            low[u] = <span class="hljs-built_in">min</span>(low[u], dfn[v]);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> h[], <span class="hljs-type">int</span> e[], <span class="hljs-type">int</span> ne[], <span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> p)</span> <span class="hljs-comment">// LCA 板子</span></span><br><span class="hljs-function"></span>&#123;<br>    dep[u] = dep[p] + <span class="hljs-number">1</span>, f[u][<span class="hljs-number">0</span>] = p;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; (<span class="hljs-number">1</span> &lt;&lt; i) &lt;= dep[u]; i++)<br>        f[u][i] = f[f[u][i - <span class="hljs-number">1</span>]][i - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = H[u]; ~i; i = NE[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = E[i];<br>        <span class="hljs-keyword">if</span> (v == p) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs</span>(v, u);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (dep[x] &lt; dep[y]) <span class="hljs-built_in">swap</span>(x, y);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-built_in">log2</span>(n); i &gt;= <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-keyword">if</span> (dep[f[x][i]] &gt;= dep[y])<br>            x = f[x][i];<br>    <span class="hljs-keyword">if</span> (x == y) <span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-built_in">log2</span>(n); i &gt;= <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-keyword">if</span> (f[x][i] != f[y][i])<br>            x = f[x][i], y = f[y][i];<br>    <span class="hljs-keyword">return</span> f[x][<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-built_in">memset</span>(H, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> H);<br>    <span class="hljs-keyword">while</span> (m--)<br>    &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>        <span class="hljs-built_in">add</span>(h ,e, ne, a, b);<br>        <span class="hljs-built_in">add</span>(h, e, ne, b, a);<br>    &#125;<br>    root = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">tarjan</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> num = cnt;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">if</span> (cut[i])<br>            id[i] = ++num;<br>    idx = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 建立圆方树</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; dcc[i].<span class="hljs-built_in">size</span>(); j++)<br>        &#123;<br>            <span class="hljs-type">int</span> k = dcc[i][j];<br>            <span class="hljs-keyword">if</span> (cut[k])<br>            &#123;<br>                <span class="hljs-built_in">add</span>(H, E, NE, i, id[k]);<br>                <span class="hljs-built_in">add</span>(H, E, NE, id[k], i);<br>            &#125;<br>            <span class="hljs-keyword">else</span> id[k] = i;<br>        &#125;<br><br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;q);<br>    <span class="hljs-keyword">while</span> (q--)<br>    &#123;<br>        <span class="hljs-type">int</span> s, t;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;s, &amp;t);<br>        <span class="hljs-type">int</span> a = cut[s], b = cut[t];<br>        s = id[s], t = id[t];<br>        <span class="hljs-type">int</span> p = <span class="hljs-built_in">lca</span>(s, t);<br>        <span class="hljs-type">int</span> dist = dep[s] + dep[t] - <span class="hljs-number">2</span> * dep[p];<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, (dist - (a + b)) / <span class="hljs-number">2</span> + <span class="hljs-number">2</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>图论</tag>
      
      <tag>tarjan</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】CF1000E We Need More Bosses</title>
    <link href="/2022/04/18/CF1000E%20We%20Need%20More%20Bosses/"/>
    <url>/2022/04/18/CF1000E%20We%20Need%20More%20Bosses/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF1000E">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这题本来是寒假听fls大佬讲课的时候课上讲的例题，但是当时由于太菜，没写出来，最近把这题给补了。</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>tarjan 算法，e-DCC 的缩点，树的直径</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>看到题目中<strong>必须经过</strong>这几个字，就想起了 e-DCC 的一个重要性质: 同一个 e-DCC 中的任意两点都有两条及以上相离的路径(在<a href="https://www.luogu.com.cn/problem/P2860">冗余路径</a>这一题中也有所体现)，我们来简单证明一下。</p><p>如果同一个 e-DCC 中的两个点 $u,v$ 不存在相离的路径，那么就意味着，它们之间必定存在着一些必经边，如果把边删去，那么 $u,v$ 两点就不连通，也就是说这些边是这个图中的割边，与 e-DCC 的性质相矛盾。</p><p>那么我们就可以考虑 e-DCC 缩点，缩完点后建一张新图。显然，新图是一个<strong>森林</strong>，同一个连通块中每一条边都是必经边，那么我们就直接找一下树的直径就可以了。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">3e5</span> + <span class="hljs-number">10</span>, M = N &lt;&lt; <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> h[N], e[M], ne[M], idx;<br><span class="hljs-type">int</span> H[N], E[M], NE[M];<br><span class="hljs-type">int</span> dfn[N], low[N], id[N], stk[N];<br><span class="hljs-type">bool</span> vis[N];<br><span class="hljs-type">int</span> res;<br><span class="hljs-type">int</span> cnt, tt, t;<br><span class="hljs-type">int</span> d1[N], d2[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> h[], <span class="hljs-type">int</span> e[], <span class="hljs-type">int</span> ne[], <span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> p)</span> <span class="hljs-comment">// e-DCC 缩点板子</span></span><br><span class="hljs-function"></span>&#123;<br>    dfn[u] = low[u] = ++t;<br>    stk[++tt] = u;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (!dfn[v])<br>        &#123;<br>            <span class="hljs-built_in">tarjan</span>(v, i);<br>            low[u] = <span class="hljs-built_in">min</span>(low[u], low[v]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i != (p ^ <span class="hljs-number">1</span>))<br>            low[u] = <span class="hljs-built_in">min</span>(low[u], dfn[v]);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (dfn[u] == low[u])<br>    &#123;<br>        <span class="hljs-type">int</span> v;<br>        cnt++;<br>        <span class="hljs-keyword">do</span> &#123;<br>            v = stk[tt--];<br>            id[v] = cnt;<br>        &#125; <span class="hljs-keyword">while</span> (u != v);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> p)</span> <span class="hljs-comment">// 求一个连通块中树的直径</span></span><br><span class="hljs-function"></span>&#123;<br>    vis[u] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = H[u]; ~i; i = NE[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = E[i];<br>        <span class="hljs-keyword">if</span> (v == p) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs</span>(v, u);<br>        <span class="hljs-type">int</span> d = d1[v] + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (d &gt; d1[u]) d2[u] = d1[u], d1[u] = d;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (d &gt; d2[u]) d2[u] = d;<br>    &#125;<br>    res = <span class="hljs-built_in">max</span>(res, d1[u] + d2[u]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-built_in">memset</span>(H, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> H);<br>    <span class="hljs-keyword">while</span> (m--)<br>    &#123;<br>        <span class="hljs-type">int</span> x, y;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);<br>        <span class="hljs-built_in">add</span>(h, e, ne, x, y);<br>        <span class="hljs-built_in">add</span>(h, e, ne, y, x);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">if</span> (!id[i])<br>            <span class="hljs-built_in">tarjan</span>(i, <span class="hljs-number">-1</span>);<br>    idx = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = h[i]; ~j; j = ne[j])<br>        &#123;<br>            <span class="hljs-type">int</span> k = e[j];<br>            <span class="hljs-keyword">if</span> (id[i] != id[k])<br>                <span class="hljs-built_in">add</span>(H, E, NE, id[i], id[k]); <span class="hljs-comment">// 建新图</span><br>        &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; i++)<br>        <span class="hljs-keyword">if</span> (!vis[i]) <span class="hljs-comment">// 注意原图不一定连通</span><br>            <span class="hljs-built_in">dfs</span>(i, <span class="hljs-number">-1</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>图论</tag>
      
      <tag>tarjan</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】SP15577 STC10</title>
    <link href="/2022/04/10/SP15577%20STC10/"/>
    <url>/2022/04/10/SP15577%20STC10/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/SP15577">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是一道双连通分量的<del>板子</del>题</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>双连通分量，割点</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>看到题目中<strong>封锁一个点</strong>的说法，我们很容易想到无向图中割点的概念，所以我们对每一个点进行分类讨论</p><ol><li>如果这个点不是割点，那么这个点被封锁后其他点依旧可以互相到达，只是到达不了这个被封锁的点，所以我们不能互相到达的点对数量就为 $2(n - 1)$ (注意题目中求的是有序点对)。</li><li>如果这个点是割点，那么这个点被封锁之后我们的图后被分为若干个连通块，我们设节点 $i$ 的子节点中点集 $V$ 满足 $dfn[i] &lt;= low[v \in V]$ 也就是这些子节点可以判定 $i$ 为割点。我们设 $size[i]$ 表示以 $i$ 为根的子树的大小，那我们的方案数就可以用以下式子表示</li></ol><script type="math/tex; mode=display">\sum_{v\in V}size[v] \times (n - size[v]) +\left(\sum_{v \in V}size[v] + 1\right) \times \left( n - 1-\sum_{v\in V}size[v]\right) + (n - 1)</script><p>(建议没看懂这个式子的朋友自行画图思考)</p><p>我们发现我们可以在 dfs 的过程中记录一下 $\sum_{v\in V}size[v]$,来方便我们的计算</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> h[N], e[M], ne[M], idx;<br><span class="hljs-type">int</span> dfn[N], low[N], cut[N], sz[N];<br><span class="hljs-type">int</span> t;<br>ll res[N];<br><span class="hljs-type">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    e[idx] = b;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> </span>&#123;<br>    dfn[u] = low[u] = ++t;<br>    sz[u] = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>, sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (!dfn[v])<br>        &#123;<br>            <span class="hljs-built_in">tarjan</span>(v);<br>            sz[u] += sz[v]; <span class="hljs-comment">// 累加子树大小</span><br>            low[u] = <span class="hljs-built_in">min</span>(low[u], low[v]);<br>            <span class="hljs-keyword">if</span> (dfn[u] &lt;= low[v])<br>            &#123;<br>                res[u] += (ll)sz[v] * (n - sz[v]);<br>                sum += sz[v]; <span class="hljs-comment">// 记录子节点子树大小之和</span><br>                cnt++;<br>                <span class="hljs-keyword">if</span> (u != <span class="hljs-number">1</span> || cnt &gt; <span class="hljs-number">1</span>)<br>                    cut[u] = <span class="hljs-literal">true</span>; <br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            low[u] = <span class="hljs-built_in">min</span>(low[u], dfn[v]);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!cut[u]) res[u] = (n - <span class="hljs-number">1</span>) * <span class="hljs-number">2</span>; <span class="hljs-comment">// 非割点情况</span><br>    <span class="hljs-keyword">else</span> res[u] += (ll)(n - sum - <span class="hljs-number">1</span>) * (sum + <span class="hljs-number">1</span>) + (n - <span class="hljs-number">1</span>); <span class="hljs-comment">// 前半部分答案已经在dfs过程中记录完成</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>        <span class="hljs-built_in">add</span>(a, b);<br>        <span class="hljs-built_in">add</span>(b, a);<br>    &#125;<br>    <span class="hljs-built_in">tarjan</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, res[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>图论</tag>
      
      <tag>tarjan</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】SP16185 BUSINESS</title>
    <link href="/2022/04/09/SP16185%20BUSINESS/"/>
    <url>/2022/04/09/SP16185%20BUSINESS/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/SP16185">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这道题是一道双连通分量的<del>板子</del>题</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>双连通分量, v-DCC</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>看到这个题目我们很容易想到用 tarjan 算法把这个无向图里的所有割点和 v-DCC 求出来，然后我们来对每个 v-DCC 中割点的数量进行分类讨论，我们设这个 v-DCC 中点的个数为 $x$ ，割点的个数为 $y$。</p><ol><li>如果 $y = 0$ ，也就是说明这个 v-DCC 是一个单独的连通块，那么我们就至少要在这里面放两个太平井(只放一个如果太平井塌了就跑不掉)，这个 v-DCC 的方案数就为 $C_x^2=\frac{x(x - 1)}{2}$ 。但是有一种特殊情况，就是这个 v-DCC中只有一个点，那么我们就只要装一个太平井，方案数为 $1$ (虽然这种情况在本题不可能出现)。</li><li>如果 $y = 1$ ，那么说明这个 v-DCC 有和其他的 v-DCC 相连，我们就只需要这里面<strong>非割点</strong>的地方任意安装一个太平井，来保证在某个节点坍塌之后，要么可以去到该 v-DCC 中的太平井，要么可以跑到别的 v-DCC ,这个 v-DCC的方案数就为 $x - 1$。</li><li>如果 $y &gt; 1$，那么这个 v-DCC 中的所有点在某个点坍塌后一定可以跑去别的 v-DCC , 我们就不用在这里安装额外的太平井</li></ol><p>那我们的答案也就呼之欲出了： 太平井的数量就是所有 v-DCC 中安装的太平井的数量之和，方案数就是每个 v-DCC 中节点方案数的乘积</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e4</span> + <span class="hljs-number">10</span>, M = N &lt;&lt; <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> h[N], e[M], ne[M], idx;<br><span class="hljs-type">int</span> dfn[N], low[N], stk[N], cut[N];<br><span class="hljs-type">int</span> t, cnt, tt;<br>vector&lt;<span class="hljs-type">int</span>&gt; dcc[N]; <br><span class="hljs-type">int</span> root;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> <span class="hljs-comment">// tarjan求割点和 v-DCC 的板子</span></span><br><span class="hljs-function"></span>&#123;<br>    dfn[u] = low[u] = ++t;<br>    stk[++tt] = u;<br>    <span class="hljs-keyword">if</span> (h[u] == <span class="hljs-number">-1</span>)<br>    &#123;<br>        dcc[++cnt].<span class="hljs-built_in">push_back</span>(u);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> kid = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (!dfn[v])<br>        &#123;<br>            <span class="hljs-built_in">tarjan</span>(v);<br>            low[u] = <span class="hljs-built_in">min</span>(low[u], low[v]);<br>            <span class="hljs-keyword">if</span> (dfn[u] &lt;= low[v])<br>            &#123;<br>                <span class="hljs-keyword">if</span> (u != root || ++kid &gt; <span class="hljs-number">1</span>) cut[u] = <span class="hljs-literal">true</span>;<br>                cnt++;<br>                <span class="hljs-type">int</span> j;<br>                <span class="hljs-keyword">do</span> &#123;<br>                    j = stk[tt--];<br>                    dcc[cnt].<span class="hljs-built_in">push_back</span>(j);<br>                &#125; <span class="hljs-keyword">while</span> (v != j);<br>                dcc[cnt].<span class="hljs-built_in">push_back</span>(u);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            low[u] = <span class="hljs-built_in">min</span>(low[u], dfn[v]);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-type">int</span> tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <span class="hljs-keyword">while</span> (m)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case %d: &quot;</span>, ++tot);<br>        <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>        <span class="hljs-built_in">memset</span>(dfn, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> dfn);<br>        <span class="hljs-built_in">memset</span>(cut, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> cut);<br>        idx = cnt = t = tt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (m--)<br>        &#123;<br>            <span class="hljs-type">int</span> a, b;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>            n = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">max</span>(a, b), n); <br>            <span class="hljs-built_in">add</span>(a, b);<br>            <span class="hljs-built_in">add</span>(b, a);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            dcc[i].<span class="hljs-built_in">clear</span>();<br>        <span class="hljs-keyword">for</span> (root = <span class="hljs-number">1</span>; root &lt;= n; root++)<br>            <span class="hljs-keyword">if</span> (!dfn[root])<br>                <span class="hljs-built_in">tarjan</span>(root); <span class="hljs-comment">// 如果这个节点没被搜过，那么就以这个节点为根开始搜索</span><br>        ll res1 = <span class="hljs-number">0</span>, res2 = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> cnt_cut = <span class="hljs-number">0</span>; <span class="hljs-comment">// 统计当前 v-DCC 中割点的数量</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; dcc[i].<span class="hljs-built_in">size</span>(); j++)<br>                cnt_cut += cut[dcc[i][j]];<br>            <span class="hljs-keyword">if</span> (!cnt_cut)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (dcc[i].<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span>) res1 += <span class="hljs-number">2</span>, res2 *= (ll)dcc[i].<span class="hljs-built_in">size</span>() * (dcc[i].<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">else</span> res1++; <span class="hljs-comment">// 特殊情况(在本题不可能出现)</span><br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cnt_cut == <span class="hljs-number">1</span>)<br>                res1++, res2 *= (ll)dcc[i].<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %lld\n&quot;</span>, res1, res2);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>图论</tag>
      
      <tag>tarjan</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】P2122还教室</title>
    <link href="/2022/04/08/P2122%E8%BF%98%E6%95%99%E5%AE%A4/"/>
    <url>/2022/04/08/P2122%E8%BF%98%E6%95%99%E5%AE%A4/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2122">题目传送门</a></p><p>题目大意:给定一个序列，支持区间加法，查询平均数和方差。</p><span id="more"></span><p>区间问题，最喜欢用线段树来解决。</p><p>首先我们由查询平均数知道肯定要维护区间和，但是我们还要支持查询方差，所以我们还需要维护一些其它的东西，把方差公式展开得到( $A_i$ 表示序列第 $i$ 项，$\overline A$ 表示序列 $A$ 的平均数)。</p><script type="math/tex; mode=display">s^2=\frac{1}{n}\sum_{i=1}^n(A_i-\overline A)^2</script><script type="math/tex; mode=display">s^2=\frac{1}{n}(A_1^2-2A_1\overline A+\overline A^2+A_2^2-2A_2\overline A+\overline A^2+\cdots+A_n^2-2A_n\overline A+\overline A^2)</script><script type="math/tex; mode=display">s^2=\frac{\sum_{i=1}^nA_i^2}{n}-\frac{2\overline A\sum_{i=1}^{n}A_i-n\overline A^2}{n}</script><script type="math/tex; mode=display">s^2=\frac{\sum_{i=1}^nA_i^2}{n}-2\overline A\frac{\sum_{i=1}^{n}A_i}{n} + \overline A^2</script><script type="math/tex; mode=display">s^2=\frac{\sum_{i=1}^nA_i^2}{n}-2\overline A^2+\overline A^2</script><script type="math/tex; mode=display">s^2=\frac{\sum_{i=1}^nA_i^2}{n}-\overline A^2</script><p>所以我们不难看出，我们要维护一个区间的和与平方和，那我们在区间加之后修改区间的平方和数据呢？</p><p>假设我们这次把区间内的每个数加上 $k$ ，那么我们可以得到。</p><script type="math/tex; mode=display">\sum_{i=1}^{n}(A_i+k)^2=\sum_{i=1}^{n}A_i^2+2k\sum_{i=1}^{n}A_i+nk^2</script><p>所以我们就可已用上一轮的平方和与区间和数据来更新被修改后的区间平方和，这个式子也告诉我们在修改时，要先修改平方和，再修改区间和。</p><p>但是这道题题目让我们输出的是最简分数的形式，所以我们还需要对平均数式子和方差式子进行进一步简化。</p><p>设当前区间和为 $sum$ ，区间平方和为 $square$ ，区间长度为 $n$ </p><p>那么我们就可以把平均数式子写成这样：</p><script type="math/tex; mode=display">\frac{sum}{n}</script><p>所以我们就可以通过约去上下两式的最大公因式来得到它的最简形式。</p><p>再来看方差</p><script type="math/tex; mode=display">\frac{square}{n}-(\frac{sum}{n})^2</script><p>化简得到</p><script type="math/tex; mode=display">\frac{n\cdot square - sum^2}{n^2}</script><p>也是通过约去上下的最简公分母来得到最简形式。</p><p>于是我们就做完了这道蓝题。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> l, r;<br>    ll sum, square, add;<br>&#125; t[N &lt;&lt; <span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a, ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> b ? <span class="hljs-built_in">gcd</span>(b, a % b) : a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].sum = t[p &lt;&lt; <span class="hljs-number">1</span>].sum + t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum;<br>    t[p].square = t[p &lt;&lt; <span class="hljs-number">1</span>].square + t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].square;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    node &amp;u = t[p], &amp;l = t[p &lt;&lt; <span class="hljs-number">1</span>], &amp;r = t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>];<br><br>    <span class="hljs-keyword">if</span> (!u.add) <span class="hljs-keyword">return</span>;<br><br>    l.add += u.add;<br>    r.add += u.add;<br><br>    l.square += <span class="hljs-number">2</span> * u.add * l.sum + (l.r - l.l + <span class="hljs-number">1</span>) * u.add * u.add; <span class="hljs-comment">// 平方和式子</span><br>    r.square += <span class="hljs-number">2</span> * u.add * r.sum + (r.r - r.l + <span class="hljs-number">1</span>) * u.add * u.add;<br>    <br>    l.sum += (l.r - l.l + <span class="hljs-number">1</span>) * u.add;<br>    r.sum += (r.r - r.l + <span class="hljs-number">1</span>) * u.add;<br>    <br>    u.add = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].l = l, t[p].r = r;<br>    <span class="hljs-keyword">if</span> (l == r)<br>    &#123;<br>        t[p].sum = a[l];<br>        t[p].square = a[l] * a[l];<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> d)</span> <span class="hljs-comment">// 区间修改，线段树板子</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= t[p].l &amp;&amp; t[p].r &lt;= r)<br>    &#123;<br>        t[p].add += d;<br>        t[p].square += <span class="hljs-number">2</span> * d * t[p].sum + (t[p].r - t[p].l + <span class="hljs-number">1</span>) * d * d; <span class="hljs-comment">// 推平方和的式子</span><br>        t[p].sum += d * (t[p].r - t[p].l + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= mid) <span class="hljs-built_in">modify</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r, d);<br>    <span class="hljs-keyword">if</span> (r &gt; mid) <span class="hljs-built_in">modify</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r, d);<br>    <span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">get_sum</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> <span class="hljs-comment">// 查询区间和</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= t[p].l &amp;&amp; t[p].r &lt;= r) <span class="hljs-keyword">return</span> t[p].sum;<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    ll res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= mid) res += <span class="hljs-built_in">get_sum</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">if</span> (r &gt; mid) res += <span class="hljs-built_in">get_sum</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">get_square</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> <span class="hljs-comment">// 查询区间平方和</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= t[p].l &amp;&amp; t[p].r &lt;= r) <span class="hljs-keyword">return</span> t[p].square;<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    ll res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= mid) res += <span class="hljs-built_in">get_square</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">if</span> (r &gt; mid) res += <span class="hljs-built_in">get_square</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n); <span class="hljs-comment">// 建树</span><br>    <span class="hljs-keyword">while</span> (m--)<br>    &#123;<br>        <span class="hljs-type">int</span> opt, l, r;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;opt, &amp;l, &amp;r);<br>        <span class="hljs-keyword">if</span> (opt == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> d;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;d);<br>            <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, l, r, d); <span class="hljs-comment">// 区间加</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (opt == <span class="hljs-number">2</span>)<br>        &#123;<br>            ll sum = <span class="hljs-built_in">get_sum</span>(<span class="hljs-number">1</span>, l, r), length = r - l + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (sum == <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0/1&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            ll d = <span class="hljs-built_in">gcd</span>(sum, length);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld/%lld\n&quot;</span>, sum / d, length / d);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (opt == <span class="hljs-number">3</span>)<br>        &#123;<br>            ll sum = <span class="hljs-built_in">get_sum</span>(<span class="hljs-number">1</span>, l, r), square = <span class="hljs-built_in">get_square</span>(<span class="hljs-number">1</span>, l, r), length = r - l + <span class="hljs-number">1</span>;<br>            ll tmp = length * square - sum * sum; length *= length; <span class="hljs-comment">// 方差式子中的分母</span><br>            <span class="hljs-keyword">if</span> (tmp == <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0/1&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            ll d = <span class="hljs-built_in">gcd</span>(tmp, length);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld/%lld\n&quot;</span>, tmp / d, length / d);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>线段树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】CF1055A Metro</title>
    <link href="/2022/04/03/CF1055A%20Metro/"/>
    <url>/2022/04/03/CF1055A%20Metro/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF1055A">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>看到这题是个蓝题还以为要写最短路，做完以后感觉这题<del>最多是个黄</del>。</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>我们用序列 $A$ 记录 $1-n$ 中站点的开放情况，用序列 $B$ 记录 $n - 1$ 中站点开放的情况。</p><p>这题其实就是一个分类讨论的题目，我们来思考一下什么情况能到，什么情况到不了。</p><ol><li>当 $A[1] == 0$，也就是连车都上不了，肯定到不了。</li><li>当 $A[1]\&amp;\&amp;A[s]$，这个时候我们可以通过 $1-n$ 的路线直达目的地，所以可以到达。</li><li>当 $1$, $2$ 两种情况均不满足，我们考虑从 $s + 1 - n$ 这一段路线中转，我们可以枚举这一段路径上的所有站点，如果存在一个站点 $i$ 使得 $A[i]\&amp;\&amp;B[i]\&amp;\&amp;B[s]$ ，这个时候我们就可以从 $1$ 坐到 $i$ ，再从 $i$ 坐到 $s$，我们就可以到达了，反之如果不存在这样的站点，那我们就到达不了。</li></ol><p>所以，我们就可以根据这些结论写出极短的代码了。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> a[N], b[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, s;<br>    cin &gt;&gt; n &gt;&gt; s;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; a[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; b[i];<br>    <span class="hljs-keyword">if</span> (!a[<span class="hljs-number">1</span>]) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[s]) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YES&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = s + <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            <span class="hljs-keyword">if</span> (a[i] &amp;&amp; b[i] &amp;&amp; b[s])<br>                &#123;<br>                    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YES&quot;</span>);<br>                    flag = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>        <span class="hljs-keyword">if</span> (!flag) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>模拟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】SP2885 WORDRING</title>
    <link href="/2022/03/24/SP2885%20WORDRING/"/>
    <url>/2022/03/24/SP2885%20WORDRING/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/SP2885">题目传送门</a></p><h2 id="1-建图"><a href="#1-建图" class="headerlink" title="1.建图"></a>1.建图</h2><p>看完这个题目的第一时间就想到了一个建图方式：将每个字符串看成一个点，如果字符串 $A$ 与 $B$ 相连，那么就连一条从 $A$ 到 $B$ 长度为 $A.length()$ 的有向边，但是仔细一想，在最坏情况下，我们的图中会有 $10^5$ 个点，$10^{10}$ 条边，这显然是我们不能接受的。</p><span id="more"></span><p>但是我们观察到每个字符串中其实只有前两个字符和后两个字符是有用的，所以我们可以只取每个字符串的前两个字符和后两个字符，在它们之间连一条长度为这个字符串长度的有向边，这样做其实是和第一种建图方式等价的，但是我们最多只要 $26 \times 26 = 676$ 个点，$10^5$ 条边，这样的时空复杂度是我们能够接受的。</p><p>样例建的图如下:</p><p><img src="https://s2.loli.net/2022/03/24/wBClfXQpRvWLt3y.png" alt=""></p><p>这样建完图以后，我们还可以使用类似<strong>字符串哈希</strong>的做法，把字符串映射为 $1 \sim 676$ 中的数字，方便建图。</p><h2 id="2-求解"><a href="#2-求解" class="headerlink" title="2.求解"></a>2.求解</h2><p>建完图以后，我们的目标就变成了找到一个环，使得 $\frac{\sum w}{s}$ 最大（$w$ 指的是边权，$s$ 为边数）</p><p>看到这个式子，首先想到的就是 $0/1$ 分数规划二分答案的思想（显然有单调性）</p><p>考虑一个数 $x$，使得 $\frac{\sum w}{s} &gt; x$，将这个式子变形得到 $\sum w - s \cdot x &gt; 0$，所以，我们可以将原图中每一条边的边权设为 $w -  x$（$w$ 表示该边边权），那么就可以将问题转化为原图中是否存在正环，我们可以用 dfs 版的 SPFA 求最长路解决这个问题。</p><h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">676</span>, M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>, L = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> h[N], e[M], ne[M], w[M], idx; <span class="hljs-comment">// 邻接表存图</span><br><span class="hljs-type">char</span> s[L];<br><span class="hljs-type">bool</span> flag;<br><span class="hljs-type">double</span> d[N];<br><span class="hljs-type">bool</span> vis[N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">double</span> x)</span> <span class="hljs-comment">// dfs版spfa</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (flag) <span class="hljs-keyword">return</span>;<br>    vis[u] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span> (d[v] &lt; d[u] + w[i] - x) <span class="hljs-comment">// 将边权变为 w[i] - x, 注意判断正环是求最长路</span><br>        &#123;<br>            d[v] = d[u] + w[i] - x;<br>            <span class="hljs-keyword">if</span> (vis[v]) flag = <span class="hljs-literal">true</span>;<br>            <span class="hljs-built_in">spfa</span>(v, x);<br>        &#125;<br>    &#125;<br>    vis[u] = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b;<br>    w[idx] = c;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> d);<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= N; i++)<br>    &#123;<br>        <span class="hljs-built_in">spfa</span>(i, x); <span class="hljs-comment">// 注意图不一定联通，要每个点都dfs一次</span><br>        <span class="hljs-keyword">if</span> (flag) <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 找到正环，退出</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">while</span> (n)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>        idx = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>            <span class="hljs-type">int</span> l = <span class="hljs-built_in">strlen</span>(s);<br>            <span class="hljs-keyword">if</span> (l &gt;= <span class="hljs-number">2</span>)<br>            &#123;<br>                <span class="hljs-type">int</span> u = (s[<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;a&#x27;</span>) * <span class="hljs-number">26</span> + (s[<span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;a&#x27;</span>); <br>                <span class="hljs-type">int</span> v = (s[l - <span class="hljs-number">2</span>] - <span class="hljs-string">&#x27;a&#x27;</span>) * <span class="hljs-number">26</span> + (s[l - <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">// 将字符串映射为数字</span><br>                <span class="hljs-built_in">add</span>(u, v, l); <span class="hljs-comment">// 连一条有向边</span><br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-type">double</span> l = <span class="hljs-number">0</span>, r = L;<br>        <span class="hljs-keyword">while</span> (r - l &gt; <span class="hljs-number">1e-4</span>) <span class="hljs-comment">// 精度要求,保留k位小数时就是 (r - l &gt; 1e-(2+k))</span><br>        &#123;<br>            <span class="hljs-type">double</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>            <span class="hljs-built_in">check</span>(mid);  <span class="hljs-comment">// 判断是否存在正环</span><br>            <span class="hljs-keyword">if</span> (flag) l = mid; <span class="hljs-comment">// 如果存在正环，说明mid比要求的最大值小，就l=mid</span><br>            <span class="hljs-keyword">else</span> r = mid; <span class="hljs-comment">// 不存在正环，说明mid比要求的最大值大，就r=mid</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (l) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lf\n&quot;</span>, l);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No solution.&quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>图论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】P4011孤岛营救问题</title>
    <link href="/2022/03/21/P4011%E5%AD%A4%E5%B2%9B%E8%90%A5%E6%95%91%E9%97%AE%E9%A2%98/"/>
    <url>/2022/03/21/P4011%E5%AD%A4%E5%B2%9B%E8%90%A5%E6%95%91%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4011">题目传送门</a></p><p>注意到数据范围$1\le P\le 10$,很容易想到二进制状压(<del>一开始做题以为钥匙是一次性的，没想到状压</del>)</p><span id="more"></span><p>所以我们可以自然而然地想到设$d[i][state]$表示走到点$i$且钥匙状态为$state$的最短步数(我把二维点压成了一维，代码中会有体现)，分类讨论一下如何转移$d[i][state]$这个状态</p><p>1.如果点$i$处有若干把钥匙，那么我们的最优方案就是将这些钥匙捡起(捡钥匙不占用时间)，所以此时的状态为$d[i][state | key[i]]$($key[i]$表示点$i$处钥匙的状态)，而且我们还可以得出转移式子</p><p>$d[i][state|key[i]] = min(d[i][state|key[i]], d[i][state])$</p><p>2.如果我们从点$i$处走到点$j$处而且手上恰好有能开门的钥匙(或没有门)，那我们就可以得到转移式子</p><p>$d[j][state] = min(d[j][state], d[i][state] +1)$</p><p>我们发现第一种情况的边权为$0$，第二种情况的边权为$1$，所以我们可以想到用双端队列$bfs$的方法去求最短路，具体细节见代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pii pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>, P = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">12</span>;<br>vector&lt;<span class="hljs-type">int</span>&gt; G[N], E[N];<br><span class="hljs-type">int</span> d[N][P];<br><span class="hljs-type">int</span> g[<span class="hljs-number">11</span>][<span class="hljs-number">11</span>];<br><span class="hljs-type">int</span> key[N];<br><span class="hljs-type">int</span> n, m, p, k, s;<br><span class="hljs-type">bool</span> vis[N][P];<br>set&lt;pii&gt; edge;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) y = <span class="hljs-number">-1</span>; c = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    G[a].<span class="hljs-built_in">push_back</span>(b);<br>    E[a].<span class="hljs-built_in">push_back</span>(c);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;, dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k++) <span class="hljs-comment">// 遍历从(i, j)可以走到的边</span><br>            &#123;<br>                <span class="hljs-type">int</span> u = i + dx[k], v = j + dy[k];<br>                <span class="hljs-keyword">if</span> (!u || u &gt; n || !v || v &gt; m) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span> (!edge.<span class="hljs-built_in">count</span>(&#123;g[i][j], g[u][v]&#125;)) <span class="hljs-comment">// 如果还没建过边，那就建</span><br>                    <span class="hljs-built_in">add</span>(g[i][j], g[u][v], <span class="hljs-number">0</span>), <span class="hljs-built_in">add</span>(g[u][v], g[i][j], <span class="hljs-number">0</span>);<br>            &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> d);<br>    d[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">// 起始状态在1号点，手上没有钥匙</span><br>    deque&lt;pii&gt; q;<br>    q.<span class="hljs-built_in">push_front</span>(&#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;);<br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        pii t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop_front</span>();<br>        <span class="hljs-type">int</span> u = t.first, st = t.second;<br>        <span class="hljs-keyword">if</span> (u == n * m) <span class="hljs-keyword">return</span> d[u][st]; <span class="hljs-comment">// 如果搜到答案立刻返回</span><br>        <span class="hljs-keyword">if</span> (vis[u][st]) <span class="hljs-keyword">continue</span>;<br>        vis[u][st] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (key[u]) <span class="hljs-comment">// 如果点u中有钥匙</span><br>        &#123;<br>            <span class="hljs-type">int</span> state = st | key[u];<br>            <span class="hljs-keyword">if</span> (d[u][state] &gt; d[u][st])<br>            &#123;<br>                d[u][state] = d[u][st]; <span class="hljs-comment">// 第一个转移式子</span><br>                q.<span class="hljs-built_in">push_front</span>(&#123;u, state&#125;); <span class="hljs-comment">// 边权为0，插入队头</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; G[u].<span class="hljs-built_in">size</span>(); i++) <span class="hljs-comment">// 遍历周围的点</span><br>        &#123;<br>            <span class="hljs-type">int</span> v = G[u][i], w = E[u][i];<br>            <span class="hljs-keyword">if</span> (w &amp;&amp; !(st &gt;&gt; w &amp; <span class="hljs-number">1</span>)) <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// 如果有门但是没钥匙就跳过</span><br>            <span class="hljs-keyword">if</span> (d[v][st] &gt; d[u][st] + <span class="hljs-number">1</span>)<br>            &#123;<br>                d[v][st] = d[u][st] + <span class="hljs-number">1</span>; <span class="hljs-comment">// 第二个转移式子</span><br>                q.<span class="hljs-built_in">push_back</span>(&#123;v, st&#125;); <span class="hljs-comment">// 边权为1，插入队尾</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>(), p = <span class="hljs-built_in">read</span>(), k = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, idx = <span class="hljs-number">0</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>            g[i][j] = ++idx; <span class="hljs-comment">// 将二维坐标映射为一维</span><br><br>    <span class="hljs-keyword">while</span> (k--)<br>    &#123;<br>        <span class="hljs-type">int</span> x1 = <span class="hljs-built_in">read</span>(), y1 = <span class="hljs-built_in">read</span>(), x2 = <span class="hljs-built_in">read</span>(), y2 = <span class="hljs-built_in">read</span>(), c = <span class="hljs-built_in">read</span>();<br>        edge.<span class="hljs-built_in">insert</span>(&#123;g[x1][y1], g[x2][y2]&#125;), edge.<span class="hljs-built_in">insert</span>(&#123;g[x2][y2], g[x1][y1]&#125;); <span class="hljs-comment">// 在集合中保存已建的边</span><br>        <span class="hljs-keyword">if</span> (c) <span class="hljs-built_in">add</span>(g[x1][y1], g[x2][y2], c), <span class="hljs-built_in">add</span>(g[x2][y2], g[x1][y1], c); <span class="hljs-comment">// 两个点之间建双向边</span><br>    &#125;<br>    <br>    <span class="hljs-built_in">build</span>();<br>    s = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">while</span> (s--)<br>    &#123;<br>        <span class="hljs-type">int</span> x = <span class="hljs-built_in">read</span>(), y = <span class="hljs-built_in">read</span>(), q = <span class="hljs-built_in">read</span>();<br>        key[g[x][y]] |= <span class="hljs-number">1</span> &lt;&lt; q; <span class="hljs-comment">// 一个点可能有多把钥匙</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">bfs</span>());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>图论</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
